{"version":3,"file":"shapediver.chunk.js","mappings":";;;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oCAAoC;AACpC,iBAAiB,mBAAO,CAAC,KAAoB;AAC7C,oBAAoB,mBAAO,CAAC,KAAW;AACvC,iCAAiC,mBAAO,CAAC,IAAoC;AAC7E,8BAA8B,mBAAO,CAAC,KAAiC;AACvE,sCAAsC,mBAAO,CAAC,KAA+B;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8GAA8G,8BAA8B;AAC5I;AACA;AACA;AACA;AACA,SAAS;AACT,yDAAyD;AACzD;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wFAAwF;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA,gCAAgC,gDAAgD;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;;;;;;;ACnTa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mCAAmC;AACnC,8BAA8B,mBAAO,CAAC,KAAiC;AACvE,oBAAoB,mBAAO,CAAC,KAAW;AACvC,qBAAqB,mBAAO,CAAC,KAA0B;AACvD;AACA;AACA;AACA,2FAA2F,uEAAuE,qDAAqD,uEAAuE;AAC9R;AACA;AACA;AACA;AACA;AACA,2FAA2F,+CAA+C,qDAAqD,+CAA+C;AAC9O;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,oGAAoG,qDAAqD,oGAAoG;AACxV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,wGAAwG,qDAAqD,wGAAwG;AAChW;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,qGAAqG,qDAAqD,qGAAqG;AAC1V;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,wGAAwG,qDAAqD,wGAAwG;AAChW;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,wGAAwG,qDAAqD,wGAAwG;AAChW;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,wGAAwG,qDAAqD,wGAAwG;AAChW;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,8DAA8D,qDAAqD,8DAA8D;AAC5Q;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;;;;;;;AC5La;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B,GAAG,oCAAoC;AACtE,uCAAuC,mBAAO,CAAC,KAA+C;AAC9F,gEAA+D,EAAE,qCAAqC,uEAAuE,EAAC;AAC9K,qBAAqB,mBAAO,CAAC,KAAyB;AACtD,2DAA0D,EAAE,qCAAqC,gDAAgD,EAAC;AAClJ;;;;;;;ACPa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gEAAgE,+BAA+B,KAAK;AACrG;AACA;AACA","sources":["webpack://spinlio-workspace/./node_modules/@shapediver/viewer.features.attribute-visualization/dist/implementation/AttributeVisualizationEngine.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.features.attribute-visualization/dist/implementation/AttributeVisualizationUtils.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.features.attribute-visualization/dist/index.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.features.attribute-visualization/dist/interfaces/IAttribute.js"],"sourcesContent":["\"use strict\";\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _AttributeVisualizationEngine_uuidGenerator, _AttributeVisualizationEngine_viewport, _AttributeVisualizationEngine_attributes, _AttributeVisualizationEngine_defaultMaterial, _AttributeVisualizationEngine_defaultLayer, _AttributeVisualizationEngine_layers, _AttributeVisualizationEngine_overview, _AttributeVisualizationEngine_listeners, _AttributeVisualizationEngine_visualizedMaterialType, _AttributeVisualizationEngine_layerMaterialType, _AttributeVisualizationEngine_nodesWithAttributeData;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AttributeVisualizationEngine = void 0;\r\nconst viewer_1 = require(\"@shapediver/viewer\");\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst viewer_shared_types_1 = require(\"@shapediver/viewer.shared.types\");\r\nconst AttributeVisualizationUtils_1 = require(\"./AttributeVisualizationUtils\");\r\nclass AttributeVisualizationEngine {\r\n    // #endregion Properties (7)\r\n    // #region Constructors (1)\r\n    constructor(viewport) {\r\n        // #region Properties (7)\r\n        _AttributeVisualizationEngine_uuidGenerator.set(this, viewer_shared_services_1.UuidGenerator.instance);\r\n        _AttributeVisualizationEngine_viewport.set(this, void 0);\r\n        _AttributeVisualizationEngine_attributes.set(this, []);\r\n        _AttributeVisualizationEngine_defaultMaterial.set(this, new viewer_shared_types_1.MaterialUnlitData({ color: '#000000', opacity: 1 }));\r\n        _AttributeVisualizationEngine_defaultLayer.set(this, {\r\n            color: '#000000',\r\n            opacity: 1,\r\n            enabled: true\r\n        });\r\n        _AttributeVisualizationEngine_layers.set(this, {});\r\n        _AttributeVisualizationEngine_overview.set(this, void 0);\r\n        _AttributeVisualizationEngine_listeners.set(this, {});\r\n        _AttributeVisualizationEngine_visualizedMaterialType.set(this, 'unlit');\r\n        _AttributeVisualizationEngine_layerMaterialType.set(this, 'unlit');\r\n        _AttributeVisualizationEngine_nodesWithAttributeData.set(this, []);\r\n        __classPrivateFieldSet(this, _AttributeVisualizationEngine_viewport, viewport, \"f\");\r\n        __classPrivateFieldSet(this, _AttributeVisualizationEngine_overview, __classPrivateFieldGet(this, _AttributeVisualizationEngine_viewport, \"f\").createSDTFOverview(viewer_1.sceneTree.root), \"f\");\r\n        this.createLayers();\r\n        this.constructAttributeVisualization();\r\n        this.gatherNodesWithAttributeData();\r\n        __classPrivateFieldGet(this, _AttributeVisualizationEngine_nodesWithAttributeData, \"f\").forEach(n => __classPrivateFieldGet(this, _AttributeVisualizationEngine_viewport, \"f\").updateNode(n));\r\n        (0, viewer_1.addListener)(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_CUSTOMIZED, () => {\r\n            __classPrivateFieldSet(this, _AttributeVisualizationEngine_overview, __classPrivateFieldGet(this, _AttributeVisualizationEngine_viewport, \"f\").createSDTFOverview(viewer_1.sceneTree.root), \"f\");\r\n            const layers = __classPrivateFieldGet(this, _AttributeVisualizationEngine_layers, \"f\");\r\n            this.createLayers();\r\n            for (const l in layers) {\r\n                if (__classPrivateFieldGet(this, _AttributeVisualizationEngine_layers, \"f\")[l])\r\n                    __classPrivateFieldGet(this, _AttributeVisualizationEngine_layers, \"f\")[l] = layers[l];\r\n            }\r\n            this.constructAttributeVisualization();\r\n            this.gatherNodesWithAttributeData();\r\n            for (const l in __classPrivateFieldGet(this, _AttributeVisualizationEngine_listeners, \"f\"))\r\n                __classPrivateFieldGet(this, _AttributeVisualizationEngine_listeners, \"f\")[l]();\r\n        });\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (3)\r\n    gatherNodesWithAttributeData() {\r\n        __classPrivateFieldSet(this, _AttributeVisualizationEngine_nodesWithAttributeData, [], \"f\");\r\n        viewer_1.sceneTree.root.traverse((node) => {\r\n            if (node.data.some(d => d instanceof viewer_shared_types_1.SDTFItemData)) {\r\n                __classPrivateFieldGet(this, _AttributeVisualizationEngine_nodesWithAttributeData, \"f\").push(node);\r\n            }\r\n        });\r\n    }\r\n    get defaultMaterial() {\r\n        return __classPrivateFieldGet(this, _AttributeVisualizationEngine_defaultMaterial, \"f\");\r\n    }\r\n    get defaultLayer() {\r\n        return __classPrivateFieldGet(this, _AttributeVisualizationEngine_defaultLayer, \"f\");\r\n    }\r\n    get layers() {\r\n        return __classPrivateFieldGet(this, _AttributeVisualizationEngine_layers, \"f\");\r\n    }\r\n    get layerMaterialType() {\r\n        return __classPrivateFieldGet(this, _AttributeVisualizationEngine_layerMaterialType, \"f\");\r\n    }\r\n    get visualizedMaterialType() {\r\n        return __classPrivateFieldGet(this, _AttributeVisualizationEngine_visualizedMaterialType, \"f\");\r\n    }\r\n    get overview() {\r\n        return __classPrivateFieldGet(this, _AttributeVisualizationEngine_overview, \"f\");\r\n    }\r\n    // #endregion Public Accessors (3)\r\n    // #region Public Methods (3)\r\n    updateAttributes(attributes) {\r\n        __classPrivateFieldSet(this, _AttributeVisualizationEngine_attributes, attributes, \"f\");\r\n        this.constructAttributeVisualization();\r\n    }\r\n    updateDefaultLayer(layer) {\r\n        __classPrivateFieldSet(this, _AttributeVisualizationEngine_defaultLayer, layer, \"f\");\r\n        this.constructAttributeVisualization();\r\n    }\r\n    updateDefaultMaterial(material) {\r\n        __classPrivateFieldSet(this, _AttributeVisualizationEngine_defaultMaterial, material, \"f\");\r\n        this.constructAttributeVisualization();\r\n    }\r\n    updateLayerMaterialType(type) {\r\n        __classPrivateFieldSet(this, _AttributeVisualizationEngine_layerMaterialType, type, \"f\");\r\n        this.createLayers();\r\n        this.constructAttributeVisualization();\r\n    }\r\n    updateVisualizedMaterialType(type) {\r\n        __classPrivateFieldSet(this, _AttributeVisualizationEngine_visualizedMaterialType, type, \"f\");\r\n        this.createLayers();\r\n        this.constructAttributeVisualization();\r\n    }\r\n    updateLayers(layers) {\r\n        __classPrivateFieldSet(this, _AttributeVisualizationEngine_layers, layers, \"f\");\r\n        this.constructAttributeVisualization();\r\n    }\r\n    addListener(cb) {\r\n        const token = __classPrivateFieldGet(this, _AttributeVisualizationEngine_uuidGenerator, \"f\").create();\r\n        __classPrivateFieldGet(this, _AttributeVisualizationEngine_listeners, \"f\")[token] = cb;\r\n        return token;\r\n    }\r\n    removeListener(token) {\r\n        if (!__classPrivateFieldGet(this, _AttributeVisualizationEngine_listeners, \"f\")[token])\r\n            return false;\r\n        delete __classPrivateFieldGet(this, _AttributeVisualizationEngine_listeners, \"f\")[token];\r\n        return true;\r\n    }\r\n    // #endregion Public Methods (3)\r\n    // #region Private Methods (2)\r\n    constructAttributeVisualization() {\r\n        __classPrivateFieldGet(this, _AttributeVisualizationEngine_viewport, \"f\").visualizeAttributes = (overview, itemData) => {\r\n            // early out if there are not attributes in this itemData\r\n            if (!itemData || !itemData.attributes) {\r\n                if (__classPrivateFieldGet(this, _AttributeVisualizationEngine_attributes, \"f\").length === 0) {\r\n                    // return default layer material\r\n                    let material;\r\n                    if (__classPrivateFieldGet(this, _AttributeVisualizationEngine_layerMaterialType, \"f\") === 'unlit') {\r\n                        material = new viewer_shared_types_1.MaterialUnlitData({\r\n                            opacity: __classPrivateFieldGet(this, _AttributeVisualizationEngine_defaultLayer, \"f\").enabled ? __classPrivateFieldGet(this, _AttributeVisualizationEngine_defaultLayer, \"f\").opacity : 0,\r\n                            color: __classPrivateFieldGet(this, _AttributeVisualizationEngine_defaultLayer, \"f\").color\r\n                        });\r\n                    }\r\n                    else {\r\n                        material = new viewer_shared_types_1.MaterialStandardData({\r\n                            opacity: __classPrivateFieldGet(this, _AttributeVisualizationEngine_defaultLayer, \"f\").enabled ? __classPrivateFieldGet(this, _AttributeVisualizationEngine_defaultLayer, \"f\").opacity : 0,\r\n                            color: __classPrivateFieldGet(this, _AttributeVisualizationEngine_defaultLayer, \"f\").color\r\n                        });\r\n                    }\r\n                    return {\r\n                        matrix: gl_matrix_1.mat4.create(),\r\n                        material\r\n                    };\r\n                }\r\n                else {\r\n                    // return default layer material\r\n                    let material;\r\n                    if (__classPrivateFieldGet(this, _AttributeVisualizationEngine_layerMaterialType, \"f\") === 'unlit') {\r\n                        material = new viewer_shared_types_1.MaterialUnlitData({\r\n                            opacity: __classPrivateFieldGet(this, _AttributeVisualizationEngine_defaultLayer, \"f\").enabled ? __classPrivateFieldGet(this, _AttributeVisualizationEngine_defaultLayer, \"f\").opacity * __classPrivateFieldGet(this, _AttributeVisualizationEngine_defaultMaterial, \"f\").opacity : 0,\r\n                            color: __classPrivateFieldGet(this, _AttributeVisualizationEngine_defaultMaterial, \"f\").color\r\n                        });\r\n                    }\r\n                    else {\r\n                        material = new viewer_shared_types_1.MaterialStandardData({\r\n                            opacity: __classPrivateFieldGet(this, _AttributeVisualizationEngine_defaultLayer, \"f\").enabled ? __classPrivateFieldGet(this, _AttributeVisualizationEngine_defaultLayer, \"f\").opacity * __classPrivateFieldGet(this, _AttributeVisualizationEngine_defaultMaterial, \"f\").opacity : 0,\r\n                            color: __classPrivateFieldGet(this, _AttributeVisualizationEngine_defaultMaterial, \"f\").color\r\n                        });\r\n                    }\r\n                    return {\r\n                        matrix: gl_matrix_1.mat4.create(),\r\n                        material\r\n                    };\r\n                }\r\n            }\r\n            // search for the responsible layer property, if none is found, default layer is assigned\r\n            let layer = this.defaultLayer;\r\n            if (itemData.attributes['layer'] && viewer_shared_types_1.SdtfPrimitiveTypeGuard.isStringType(itemData.attributes['layer'].typeHint)) {\r\n                const layerAttributes = itemData.attributes['layer'];\r\n                layer = __classPrivateFieldGet(this, _AttributeVisualizationEngine_layers, \"f\")[layerAttributes.value];\r\n            }\r\n            // early out, layer is not enabled\r\n            if (layer.enabled === false) {\r\n                const mat = this.createMaterialCopy(__classPrivateFieldGet(this, _AttributeVisualizationEngine_defaultMaterial, \"f\"));\r\n                mat.opacity = 0;\r\n                return {\r\n                    matrix: gl_matrix_1.mat4.create(),\r\n                    material: mat\r\n                };\r\n            }\r\n            if (__classPrivateFieldGet(this, _AttributeVisualizationEngine_attributes, \"f\").length === 0) {\r\n                // no attributes are specified, we go into layer visualization mode\r\n                let material;\r\n                if (__classPrivateFieldGet(this, _AttributeVisualizationEngine_layerMaterialType, \"f\") === 'unlit') {\r\n                    material = new viewer_shared_types_1.MaterialUnlitData({\r\n                        opacity: layer.opacity,\r\n                        color: layer.color\r\n                    });\r\n                }\r\n                else {\r\n                    material = new viewer_shared_types_1.MaterialStandardData({\r\n                        opacity: layer.opacity,\r\n                        color: layer.color\r\n                    });\r\n                }\r\n                return {\r\n                    matrix: gl_matrix_1.mat4.create(),\r\n                    material\r\n                };\r\n            }\r\n            else {\r\n                // attributes are specified, we go into attribute visualization mode\r\n                const material = __classPrivateFieldGet(this, _AttributeVisualizationEngine_visualizedMaterialType, \"f\") === 'unlit' ? new viewer_shared_types_1.MaterialUnlitData() : new viewer_shared_types_1.MaterialStandardData();\r\n                for (let i = 0; i < __classPrivateFieldGet(this, _AttributeVisualizationEngine_attributes, \"f\").length; i++) {\r\n                    const a = __classPrivateFieldGet(this, _AttributeVisualizationEngine_attributes, \"f\")[i];\r\n                    if (itemData.attributes[a.key] && itemData.attributes[a.key].typeHint === a.type) {\r\n                        const itemDataAttribute = itemData.attributes[a.key];\r\n                        const itemDataAttributeOverview = overview[a.key].filter(o => o.typeHint === a.type)[0];\r\n                        switch (true) {\r\n                            case viewer_shared_types_1.SdtfPrimitiveTypeGuard.isColorType(a.type):\r\n                                // multiply each color values with 255 to convert them to the range [0, 255]\r\n                                const convertedValue = itemDataAttribute.value.map((v) => v * 255);\r\n                                material.color = convertedValue;\r\n                                material.opacity *= layer.opacity;\r\n                                return {\r\n                                    matrix: gl_matrix_1.mat4.create(),\r\n                                    material\r\n                                };\r\n                            case viewer_shared_types_1.SdtfPrimitiveTypeGuard.isNumberType(a.type):\r\n                                const numberAttribute = a;\r\n                                const numberVisualizationData = AttributeVisualizationUtils_1.AttributeVisualizationUtils.numberVisualization(itemDataAttribute.value, (numberAttribute.min !== undefined ? numberAttribute.min : itemDataAttributeOverview.min), (numberAttribute.max !== undefined ? numberAttribute.max : itemDataAttributeOverview.max), numberAttribute.visualization, __classPrivateFieldGet(this, _AttributeVisualizationEngine_visualizedMaterialType, \"f\"), __classPrivateFieldGet(this, _AttributeVisualizationEngine_defaultMaterial, \"f\"));\r\n                                numberVisualizationData.material.opacity *= layer.opacity;\r\n                                return numberVisualizationData;\r\n                            case viewer_shared_types_1.SdtfPrimitiveTypeGuard.isStringType(a.type):\r\n                                const stringAttribute = a;\r\n                                const stringVisualizationData = AttributeVisualizationUtils_1.AttributeVisualizationUtils.stringVisualization(itemDataAttribute.value, stringAttribute.values || itemDataAttributeOverview.values, stringAttribute.visualization, __classPrivateFieldGet(this, _AttributeVisualizationEngine_visualizedMaterialType, \"f\"), __classPrivateFieldGet(this, _AttributeVisualizationEngine_defaultMaterial, \"f\"));\r\n                                stringVisualizationData.material.opacity *= layer.opacity;\r\n                                return stringVisualizationData;\r\n                            default:\r\n                                const defaultAttribute = a;\r\n                                material.color = defaultAttribute.color;\r\n                                material.opacity *= layer.opacity;\r\n                                return {\r\n                                    matrix: gl_matrix_1.mat4.create(),\r\n                                    material\r\n                                };\r\n                        }\r\n                    }\r\n                }\r\n                // no attributes were found, return the default material adjusted by the layer opacity\r\n                const mat = this.createMaterialCopy(__classPrivateFieldGet(this, _AttributeVisualizationEngine_defaultMaterial, \"f\"));\r\n                mat.opacity *= layer.opacity;\r\n                return {\r\n                    matrix: gl_matrix_1.mat4.create(),\r\n                    material: mat\r\n                };\r\n            }\r\n        };\r\n        __classPrivateFieldGet(this, _AttributeVisualizationEngine_nodesWithAttributeData, \"f\").forEach(n => __classPrivateFieldGet(this, _AttributeVisualizationEngine_viewport, \"f\").updateNode(n));\r\n    }\r\n    createMaterialCopy(material) {\r\n        if (material instanceof viewer_shared_types_1.MaterialGemData) {\r\n            const newMaterial = new viewer_shared_types_1.MaterialGemData();\r\n            newMaterial.copy(material);\r\n            return newMaterial;\r\n        }\r\n        else if (material instanceof viewer_shared_types_1.MaterialShadowData) {\r\n            const newMaterial = new viewer_shared_types_1.MaterialShadowData();\r\n            newMaterial.copy(material);\r\n            return newMaterial;\r\n        }\r\n        else if (material instanceof viewer_shared_types_1.MaterialSpecularGlossinessData) {\r\n            const newMaterial = new viewer_shared_types_1.MaterialSpecularGlossinessData();\r\n            newMaterial.copy(material);\r\n            return newMaterial;\r\n        }\r\n        else if (material instanceof viewer_shared_types_1.MaterialStandardData) {\r\n            const newMaterial = new viewer_shared_types_1.MaterialStandardData();\r\n            newMaterial.copy(material);\r\n            return newMaterial;\r\n        }\r\n        else if (material instanceof viewer_shared_types_1.MaterialUnlitData) {\r\n            const newMaterial = new viewer_shared_types_1.MaterialUnlitData();\r\n            newMaterial.copy(material);\r\n            return newMaterial;\r\n        }\r\n        else {\r\n            return new viewer_shared_types_1.MaterialStandardData();\r\n        }\r\n    }\r\n    createLayers() {\r\n        __classPrivateFieldSet(this, _AttributeVisualizationEngine_layers, {}, \"f\");\r\n        if (__classPrivateFieldGet(this, _AttributeVisualizationEngine_overview, \"f\")['layer']) {\r\n            const layerStringAttributeOverview = __classPrivateFieldGet(this, _AttributeVisualizationEngine_overview, \"f\")['layer'].find(a => a.typeHint === 'string');\r\n            if (layerStringAttributeOverview && layerStringAttributeOverview.values) {\r\n                for (let i = 0; i < layerStringAttributeOverview.values.length; i++) {\r\n                    __classPrivateFieldGet(this, _AttributeVisualizationEngine_layers, \"f\")[layerStringAttributeOverview.values[i]] = {\r\n                        enabled: true,\r\n                        opacity: 1,\r\n                        color: this.defaultMaterial.color\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.AttributeVisualizationEngine = AttributeVisualizationEngine;\r\n_AttributeVisualizationEngine_uuidGenerator = new WeakMap(), _AttributeVisualizationEngine_viewport = new WeakMap(), _AttributeVisualizationEngine_attributes = new WeakMap(), _AttributeVisualizationEngine_defaultMaterial = new WeakMap(), _AttributeVisualizationEngine_defaultLayer = new WeakMap(), _AttributeVisualizationEngine_layers = new WeakMap(), _AttributeVisualizationEngine_overview = new WeakMap(), _AttributeVisualizationEngine_listeners = new WeakMap(), _AttributeVisualizationEngine_visualizedMaterialType = new WeakMap(), _AttributeVisualizationEngine_layerMaterialType = new WeakMap(), _AttributeVisualizationEngine_nodesWithAttributeData = new WeakMap();\r\n//# sourceMappingURL=AttributeVisualizationEngine.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AttributeVisualizationUtils = void 0;\r\nconst viewer_shared_types_1 = require(\"@shapediver/viewer.shared.types\");\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst IAttribute_1 = require(\"../interfaces/IAttribute\");\r\nconst grayscaleVisualization = (factor, materialType) => {\r\n    const color = Math.floor(factor * 255.0);\r\n    return {\r\n        material: materialType === 'unlit' ? new viewer_shared_types_1.MaterialUnlitData({ color: 'rgb(' + color + ', ' + color + ', ' + color + ')', opacity: 1 }) : new viewer_shared_types_1.MaterialStandardData({ color: 'rgb(' + color + ', ' + color + ', ' + color + ')', opacity: 1 }),\r\n        matrix: gl_matrix_1.mat4.create()\r\n    };\r\n};\r\nconst opacityVisualization = (factor, materialType, defaultMaterial) => {\r\n    return {\r\n        material: materialType === 'unlit' ? new viewer_shared_types_1.MaterialUnlitData({ color: defaultMaterial.color, opacity: factor }) : new viewer_shared_types_1.MaterialStandardData({ color: defaultMaterial.color, opacity: factor }),\r\n        matrix: gl_matrix_1.mat4.create()\r\n    };\r\n};\r\nconst blueRedVisualization = (factor, materialType) => {\r\n    const red = factor * 255.0;\r\n    const blue = (1 - factor) * 255.0;\r\n    return {\r\n        material: materialType === 'unlit' ? new viewer_shared_types_1.MaterialUnlitData({ color: 'rgb(' + Math.floor(red) + ', ' + Math.floor(0) + ', ' + Math.floor(blue) + ')', opacity: 1 }) : new viewer_shared_types_1.MaterialStandardData({ color: 'rgb(' + Math.floor(red) + ', ' + Math.floor(0) + ', ' + Math.floor(blue) + ')', opacity: 1 }),\r\n        matrix: gl_matrix_1.mat4.create()\r\n    };\r\n};\r\nconst blueWhiteRedVisualization = (factor, materialType) => {\r\n    let red = 255, green = 255, blue = 255;\r\n    if (factor < 0.5) {\r\n        const remappedFactor = factor / 0.5;\r\n        red = 255.0 * remappedFactor;\r\n        green = 255.0 * remappedFactor;\r\n        blue = 255.0;\r\n    }\r\n    else {\r\n        const remappedFactor = (factor - 0.5) / 0.5;\r\n        red = 255.0;\r\n        green = 255.0 * (1 - remappedFactor);\r\n        blue = 255.0 * (1 - remappedFactor);\r\n    }\r\n    return {\r\n        material: materialType === 'unlit' ? new viewer_shared_types_1.MaterialUnlitData({ color: 'rgb(' + Math.floor(red) + ', ' + Math.floor(green) + ', ' + Math.floor(blue) + ')', opacity: 1 }) : new viewer_shared_types_1.MaterialStandardData({ color: 'rgb(' + Math.floor(red) + ', ' + Math.floor(green) + ', ' + Math.floor(blue) + ')', opacity: 1 }),\r\n        matrix: gl_matrix_1.mat4.create()\r\n    };\r\n};\r\nconst greenRedVisualization = (factor, materialType) => {\r\n    const red = factor * 255.0;\r\n    const green = (1 - factor) * 255.0;\r\n    return {\r\n        material: materialType === 'unlit' ? new viewer_shared_types_1.MaterialUnlitData({ color: 'rgb(' + Math.floor(red) + ', ' + Math.floor(green) + ', ' + Math.floor(0) + ')', opacity: 1 }) : new viewer_shared_types_1.MaterialStandardData({ color: 'rgb(' + Math.floor(red) + ', ' + Math.floor(green) + ', ' + Math.floor(0) + ')', opacity: 1 }),\r\n        matrix: gl_matrix_1.mat4.create()\r\n    };\r\n};\r\nconst greenWhiteRedVisualization = (factor, materialType) => {\r\n    let red = 255, green = 255, blue = 255;\r\n    if (factor < 0.5) {\r\n        const remappedFactor = factor / 0.5;\r\n        red = 255.0 * remappedFactor;\r\n        green = 255.0;\r\n        blue = 255.0 * remappedFactor;\r\n    }\r\n    else {\r\n        const remappedFactor = (factor - 0.5) / 0.5;\r\n        red = 255.0;\r\n        green = 255.0 * (1 - remappedFactor);\r\n        blue = 255.0 * (1 - remappedFactor);\r\n    }\r\n    return {\r\n        material: materialType === 'unlit' ? new viewer_shared_types_1.MaterialUnlitData({ color: 'rgb(' + Math.floor(red) + ', ' + Math.floor(green) + ', ' + Math.floor(blue) + ')', opacity: 1 }) : new viewer_shared_types_1.MaterialStandardData({ color: 'rgb(' + Math.floor(red) + ', ' + Math.floor(green) + ', ' + Math.floor(blue) + ')', opacity: 1 }),\r\n        matrix: gl_matrix_1.mat4.create()\r\n    };\r\n};\r\nconst blueGreenRedVisualization = (factor, materialType) => {\r\n    let red = 255, green = 255, blue = 255;\r\n    if (factor < 0.5) {\r\n        const remappedFactor = factor / 0.5;\r\n        red = 0;\r\n        green = 255.0 * remappedFactor;\r\n        blue = 255.0 * (1 - remappedFactor);\r\n    }\r\n    else {\r\n        const remappedFactor = (factor - 0.5) / 0.5;\r\n        red = 255.0 * remappedFactor;\r\n        green = 255.0 * (1 - remappedFactor);\r\n        blue = 0;\r\n    }\r\n    return {\r\n        material: materialType === 'unlit' ? new viewer_shared_types_1.MaterialUnlitData({ color: 'rgb(' + Math.floor(red) + ', ' + Math.floor(green) + ', ' + Math.floor(blue) + ')', opacity: 1 }) : new viewer_shared_types_1.MaterialStandardData({ color: 'rgb(' + Math.floor(red) + ', ' + Math.floor(green) + ', ' + Math.floor(blue) + ')', opacity: 1 }),\r\n        matrix: gl_matrix_1.mat4.create()\r\n    };\r\n};\r\nconst blueGreenYellowRedPurpleWhiteVisualization = (factor, materialType) => {\r\n    let red = 255, green = 255, blue = 255;\r\n    if (factor < 0.2) {\r\n        const remappedFactor = factor / 0.2;\r\n        red = 0;\r\n        green = 255.0 * remappedFactor;\r\n        blue = 255.0 * (1 - remappedFactor);\r\n    }\r\n    else if (factor < 0.4) {\r\n        const remappedFactor = (factor - 0.2) / 0.2;\r\n        red = 255.0 * remappedFactor;\r\n        green = 255.0;\r\n        blue = 0.0;\r\n    }\r\n    else if (factor < 0.6) {\r\n        const remappedFactor = (factor - 0.4) / 0.2;\r\n        red = 255.0;\r\n        green = 255.0 * (1 - remappedFactor);\r\n        blue = 0.0;\r\n    }\r\n    else if (factor < 0.8) {\r\n        const remappedFactor = (factor - 0.6) / 0.2;\r\n        red = 255.0;\r\n        green = 0.0;\r\n        blue = 255.0 * remappedFactor;\r\n    }\r\n    else {\r\n        const remappedFactor = (factor - 0.8) / 0.2;\r\n        red = 255.0;\r\n        green = 255.0 * remappedFactor;\r\n        blue = 255.0;\r\n    }\r\n    return {\r\n        material: materialType === 'unlit' ? new viewer_shared_types_1.MaterialUnlitData({ color: 'rgb(' + Math.floor(red) + ', ' + Math.floor(green) + ', ' + Math.floor(blue) + ')', opacity: 1 }) : new viewer_shared_types_1.MaterialStandardData({ color: 'rgb(' + Math.floor(red) + ', ' + Math.floor(green) + ', ' + Math.floor(blue) + ')', opacity: 1 }),\r\n        matrix: gl_matrix_1.mat4.create()\r\n    };\r\n};\r\nconst hslVisualization = (factor, materialType) => {\r\n    const hue = factor * 359.99;\r\n    return {\r\n        material: materialType === 'unlit' ? new viewer_shared_types_1.MaterialUnlitData({ color: 'hsl(' + Math.floor(hue) + ', 100%, 50%)', opacity: 1 }) : new viewer_shared_types_1.MaterialStandardData({ color: 'hsl(' + Math.floor(hue) + ', 100%, 50%)', opacity: 1 }),\r\n        matrix: gl_matrix_1.mat4.create()\r\n    };\r\n};\r\nconst numberVisualization = (value, min, max, type, materialType, defaultMaterial) => {\r\n    let factor = (value - min) / (max - min);\r\n    factor = Math.min(1, Math.max(0, factor));\r\n    switch (type) {\r\n        case IAttribute_1.ATTRIBUTE_VISUALIZATION.GRAYSCALE:\r\n            return grayscaleVisualization(factor, materialType);\r\n        case IAttribute_1.ATTRIBUTE_VISUALIZATION.OPACITY:\r\n            return opacityVisualization(factor, materialType, defaultMaterial);\r\n        case IAttribute_1.ATTRIBUTE_VISUALIZATION.BLUE_RED:\r\n            return blueRedVisualization(factor, materialType);\r\n        case IAttribute_1.ATTRIBUTE_VISUALIZATION.BLUE_WHITE_RED:\r\n            return blueWhiteRedVisualization(factor, materialType);\r\n        case IAttribute_1.ATTRIBUTE_VISUALIZATION.GREEN_RED:\r\n            return greenRedVisualization(factor, materialType);\r\n        case IAttribute_1.ATTRIBUTE_VISUALIZATION.GREEN_WHITE_RED:\r\n            return greenWhiteRedVisualization(factor, materialType);\r\n        case IAttribute_1.ATTRIBUTE_VISUALIZATION.BLUE_GREEN_RED:\r\n            return blueGreenRedVisualization(factor, materialType);\r\n        case IAttribute_1.ATTRIBUTE_VISUALIZATION.BLUE_GREEN_YELLOW_RED_PURPLE_WHITE:\r\n            return blueGreenYellowRedPurpleWhiteVisualization(factor, materialType);\r\n        case IAttribute_1.ATTRIBUTE_VISUALIZATION.HSL:\r\n            return hslVisualization(factor, materialType);\r\n    }\r\n};\r\nconst stringVisualization = (value, values, type, materialType, defaultMaterial) => {\r\n    let factor = values.indexOf(value) / (values.length - 1);\r\n    factor = Math.min(1, Math.max(0, factor));\r\n    switch (type) {\r\n        case IAttribute_1.ATTRIBUTE_VISUALIZATION.GRAYSCALE:\r\n            return grayscaleVisualization(factor, materialType);\r\n        case IAttribute_1.ATTRIBUTE_VISUALIZATION.OPACITY:\r\n            return opacityVisualization(factor, materialType, defaultMaterial);\r\n        case IAttribute_1.ATTRIBUTE_VISUALIZATION.BLUE_RED:\r\n            return blueRedVisualization(factor, materialType);\r\n        case IAttribute_1.ATTRIBUTE_VISUALIZATION.BLUE_WHITE_RED:\r\n            return blueWhiteRedVisualization(factor, materialType);\r\n        case IAttribute_1.ATTRIBUTE_VISUALIZATION.GREEN_RED:\r\n            return greenRedVisualization(factor, materialType);\r\n        case IAttribute_1.ATTRIBUTE_VISUALIZATION.GREEN_WHITE_RED:\r\n            return greenWhiteRedVisualization(factor, materialType);\r\n        case IAttribute_1.ATTRIBUTE_VISUALIZATION.BLUE_GREEN_RED:\r\n            return blueGreenRedVisualization(factor, materialType);\r\n        case IAttribute_1.ATTRIBUTE_VISUALIZATION.BLUE_GREEN_YELLOW_RED_PURPLE_WHITE:\r\n            return blueGreenYellowRedPurpleWhiteVisualization(factor, materialType);\r\n        case IAttribute_1.ATTRIBUTE_VISUALIZATION.HSL:\r\n            return hslVisualization(factor, materialType);\r\n    }\r\n};\r\nexports.AttributeVisualizationUtils = {\r\n    numberVisualization,\r\n    stringVisualization\r\n};\r\n//# sourceMappingURL=AttributeVisualizationUtils.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ATTRIBUTE_VISUALIZATION = exports.AttributeVisualizationEngine = void 0;\r\nconst AttributeVisualizationEngine_1 = require(\"./implementation/AttributeVisualizationEngine\");\r\nObject.defineProperty(exports, \"AttributeVisualizationEngine\", { enumerable: true, get: function () { return AttributeVisualizationEngine_1.AttributeVisualizationEngine; } });\r\nconst IAttribute_1 = require(\"./interfaces/IAttribute\");\r\nObject.defineProperty(exports, \"ATTRIBUTE_VISUALIZATION\", { enumerable: true, get: function () { return IAttribute_1.ATTRIBUTE_VISUALIZATION; } });\r\n//# sourceMappingURL=index.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ATTRIBUTE_VISUALIZATION = void 0;\r\nvar ATTRIBUTE_VISUALIZATION;\r\n(function (ATTRIBUTE_VISUALIZATION) {\r\n    ATTRIBUTE_VISUALIZATION[\"GRAYSCALE\"] = \"grayscale\";\r\n    ATTRIBUTE_VISUALIZATION[\"OPACITY\"] = \"opacity\";\r\n    ATTRIBUTE_VISUALIZATION[\"BLUE_RED\"] = \"blue_red\";\r\n    ATTRIBUTE_VISUALIZATION[\"BLUE_WHITE_RED\"] = \"blue_white_red\";\r\n    ATTRIBUTE_VISUALIZATION[\"GREEN_RED\"] = \"green_red\";\r\n    ATTRIBUTE_VISUALIZATION[\"GREEN_WHITE_RED\"] = \"green_white_red\";\r\n    ATTRIBUTE_VISUALIZATION[\"BLUE_GREEN_RED\"] = \"blue_green_red\";\r\n    ATTRIBUTE_VISUALIZATION[\"BLUE_GREEN_YELLOW_RED_PURPLE_WHITE\"] = \"blue_green_yellow_red_purple_white\";\r\n    ATTRIBUTE_VISUALIZATION[\"HSL\"] = \"hsl\";\r\n})(ATTRIBUTE_VISUALIZATION = exports.ATTRIBUTE_VISUALIZATION || (exports.ATTRIBUTE_VISUALIZATION = {}));\r\n;\r\n;\r\n//# sourceMappingURL=IAttribute.js.map"],"names":[],"sourceRoot":""}