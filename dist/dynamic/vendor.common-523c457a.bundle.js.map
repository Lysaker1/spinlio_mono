{"version":3,"file":"vendor.common-523c457a.bundle.js","mappings":";;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB,GAAG,uBAAuB,GAAG,yBAAyB,GAAG,kBAAkB,GAAG,kBAAkB,GAAG,yBAAyB,GAAG,qBAAqB,GAAG,sBAAsB,GAAG,uBAAuB,GAAG,mBAAmB,GAAG,4BAA4B,GAAG,sBAAsB,GAAG,kBAAkB,GAAG,kBAAkB,GAAG,wBAAwB,GAAG,qBAAqB,GAAG,mBAAmB,GAAG,2BAA2B,GAAG,kBAAkB,GAAG,qBAAqB,GAAG,kBAAkB,GAAG,uBAAuB,GAAG,0BAA0B,GAAG,iCAAiC,GAAG,mBAAmB,GAAG,sBAAsB,GAAG,cAAc,GAAG,mCAAmC,GAAG,+BAA+B,GAAG,6BAA6B,GAAG,2BAA2B,GAAG,6BAA6B,GAAG,4BAA4B,GAAG,uBAAuB,GAAG,mBAAmB,GAAG,uBAAuB;AACp6B,2CAA2C,mBAAO,CAAC,KAA+C;AAClG,2DAA0D,EAAE,qCAAqC,sEAAsE,EAAC;AACxK,+DAA8D,EAAE,qCAAqC,0EAA0E,EAAC;AAChL,yBAAyB,mBAAO,CAAC,KAAgB;AACjD,iDAAgD,EAAE,qCAAqC,0CAA0C,EAAC;AAClI,+CAA8C,EAAE,qCAAqC,wCAAwC,EAAC;AAC9H,6DAA4D,EAAE,qCAAqC,sDAAsD,EAAC;AAC1J,sDAAqD,EAAE,qCAAqC,+CAA+C,EAAC;AAC5I,mDAAkD,EAAE,qCAAqC,4CAA4C,EAAC;AACtI,qDAAoD,EAAE,qCAAqC,8CAA8C,EAAC;AAC1I,0CAAyC,EAAE,qCAAqC,mCAAmC,EAAC;AACpH,kDAAiD,EAAE,qCAAqC,2CAA2C,EAAC;AACpI,8CAA6C,EAAE,qCAAqC,uCAAuC,EAAC;AAC5H,iDAAgD,EAAE,qCAAqC,0CAA0C,EAAC;AAClI,8CAA6C,EAAE,qCAAqC,uCAAuC,EAAC;AAC5H,uDAAsD,EAAE,qCAAqC,gDAAgD,EAAC;AAC9I,8CAA6C,EAAE,qCAAqC,uCAAuC,EAAC;AAC5H,+CAA8C,EAAE,qCAAqC,wCAAwC,EAAC;AAC9H,iDAAgD,EAAE,qCAAqC,0CAA0C,EAAC;AAClI,oDAAmD,EAAE,qCAAqC,6CAA6C,EAAC;AACxI,mDAAkD,EAAE,qCAAqC,4CAA4C,EAAC;AACtI,8CAA6C,EAAE,qCAAqC,uCAAuC,EAAC;AAC5H,kDAAiD,EAAE,qCAAqC,2CAA2C,EAAC;AACpI,wDAAuD,EAAE,qCAAqC,iDAAiD,EAAC;AAChJ,+CAA8C,EAAE,qCAAqC,wCAAwC,EAAC;AAC9H,8CAA6C,EAAE,qCAAqC,uCAAuC,EAAC;AAC5H,8CAA6C,EAAE,qCAAqC,uCAAuC,EAAC;AAC5H,8CAA6C,EAAE,qCAAqC,uCAAuC,EAAC;AAC5H,mDAAkD,EAAE,qCAAqC,4CAA4C,EAAC;AACtI,kDAAiD,EAAE,qCAAqC,2CAA2C,EAAC;AACpI,qDAAoD,EAAE,qCAAqC,8CAA8C,EAAC;AAC1I,+BAA+B,mBAAO,CAAC,KAAgC;AACvE,mDAAkD,EAAE,qCAAqC,kDAAkD,EAAC;AAC5I,wDAAuD,EAAE,qCAAqC,uDAAuD,EAAC;AACtJ,yDAAwD,EAAE,qCAAqC,wDAAwD,EAAC;AACxJ,8CAA8C,mBAAO,CAAC,KAAiD;AACvG,8BAA8B,mBAAO,CAAC,IAAiC;AACvE,uDAAsD,EAAE,qCAAqC,qDAAqD,EAAC;AACnJ,gCAAgC,mBAAO,CAAC,KAAkC;AAC1E,yDAAwD,EAAE,qCAAqC,yDAAyD,EAAC;AACzJ,0BAA0B,mBAAO,CAAC,KAAmB;AACrD,mDAAkD,EAAE,qCAAqC,6CAA6C,EAAC;AACvI,wCAAwC,mBAAO,CAAC,KAA2C;AAC3F,iCAAiC,mBAAO,CAAC,KAAoC;AAC7E,sBAAsB,mBAAO,CAAC,KAAqB;AACnD,+CAA8C,EAAE,qCAAqC,qCAAqC,EAAC;AAC3H;AACA;AACA;AACA;AACA;;;;;;;ACrDa;AACb;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qCAAqC;AACrC,2BAA2B,mBAAO,CAAC,KAAO;AAC1C,8BAA8B,mBAAO,CAAC,KAAiC;AACvE,qBAAqB,mBAAO,CAAC,KAA6B;AAC1D,eAAe,mBAAO,CAAC,KAAe;AACtC,kCAAkC,mBAAO,CAAC,KAAqC;AAC/E,iCAAiC,mBAAO,CAAC,IAAoC;AAC7E,uBAAuB,mBAAO,CAAC,IAAkC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,6BAA6B;AAC7D;AACA;AACA;AACA,+EAA+E,qEAAqE;AACpJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+NAA+N,oDAAoD;AACnR;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;;;;;;;AC7Ja;AACb;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,8BAA8B;AAC9B,2BAA2B,mBAAO,CAAC,KAAO;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oDAAoD,oBAAoB;AACjG;AACA,yBAAyB,wDAAwD,oBAAoB;AACrG;AACA,yBAAyB,sDAAsD,oBAAoB;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,qBAAqB;AACrB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,aAAa;AACrC,6BAA6B,cAAc;AAC3C,8BAA8B,YAAY;AAC1C,0BAA0B,aAAa;AACvC,+BAA+B,cAAc;AAC7C,gCAAgC,YAAY;AAC5C,yBAAyB,aAAa;AACtC,8BAA8B,cAAc;AAC5C,+BAA+B,YAAY;AAC3C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;;;;;;;AC3Na;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B,GAAG,mCAAmC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wEAAwE,mCAAmC,KAAK;AACjH;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gEAAgE,+BAA+B,KAAK;AACrG;;;;;;;AC9Ba;AACb;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,4BAA4B,GAAG,4BAA4B,GAAG,6BAA6B,GAAG,uBAAuB,GAAG,4BAA4B;AACpJ;AACA;AACA,2BAA2B,mBAAO,CAAC,KAAO;AAC1C,iCAAiC,mBAAO,CAAC,IAAoC;AAC7E,qBAAqB,mBAAO,CAAC,KAA6B;AAC1D,8BAA8B,mBAAO,CAAC,KAAiC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0DAA0D,4BAA4B,KAAK;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gDAAgD,uBAAuB,KAAK;AAC7E;AACA;AACA;AACA;AACA,CAAC,4DAA4D,6BAA6B,KAAK;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0DAA0D,4BAA4B,KAAK;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,wBAAwB,oFAAoF,aAAa;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0CAA0C;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,0CAA0C;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,wCAAwC;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,wCAAwC;AAC/G;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;;;;;;;AC7Va;AACb;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,2BAA2B,mBAAO,CAAC,KAAO;AAC1C,8BAA8B,mBAAO,CAAC,KAAiC;AACvE,sBAAsB,mBAAO,CAAC,KAA0B;AACxD,iCAAiC,mBAAO,CAAC,IAAoC;AAC7E,mDAAmD,mBAAO,CAAC,KAAsD;AACjH,iBAAiB,mBAAO,CAAC,KAAmB;AAC5C,oBAAoB,mBAAO,CAAC,KAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,0EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,+BAA+B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,+BAA+B;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4FAA4F,wFAAwF;AACpL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4FAA4F,wFAAwF;AACpL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,sBAAsB;AACtB;AACA,sBAAsB;AACtB;AACA,sBAAsB;AACtB;AACA,sBAAsB;AACtB;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0GAA0G;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uIAAuI,cAAc;AACrJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F,YAAY;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,QAAQ;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;;;;;;ACxgBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B;AAC/B,mDAAmD,mBAAO,CAAC,KAAsD;AACjH,oBAAoB,mBAAO,CAAC,KAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kCAAkC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4HAA4H;AACxJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;;;;;;;ACnFa;AACb;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB;AACnB,2BAA2B,mBAAO,CAAC,KAAO;AAC1C,+CAA+C,mBAAO,CAAC,IAAkD;AACzmBAAmB;AACnB;;;;;;;ACvJa;AACb;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB,GAAG,qBAAqB,GAAG,sBAAsB;AACrE,2BAA2B,mBAAO,CAAC,KAAO;AAC1C,iCAAiC,mBAAO,CAAC,IAAoC;AAC7E,eAAe,mBAAO,CAAC,KAAiB;AACxC,+BAA+B,mBAAO,CAAC,KAAwB;AAC/D,sBAAsB,mBAAO,CAAC,KAA0B;AACxD,8BAA8B,mBAAO,CAAC,KAAiC;AACvE,oBAAoB,mBAAO,CAAC,KAAW;AACvC,8BAA8B,mBAAO,CAAC,IAAkC;AACxE,kBAAkB,mBAAO,CAAC,IAAoB;AAC9C,qCAAqC,mBAAO,CAAC,KAAyC;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F,kBAAkB;AAC5G,qFAAqF,oFAAoF;AACzK,uFAAuF,kBAAkB;AACzwBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAugBAAgB,uBAAuB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,sDAAsD;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrqBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,cAAc,GAAG,WAAW,GAAG,UAAU,GAAG,UAAU,GAAG,cAAc,GAAG,cAAc,GAAG,WAAW,GAAG,WAAW,GAAG,aAAa,GAAG,aAAa,GAAG,UAAU,GAAG,UAAU;AACzO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4CAA4C,qBAAqB,KAAK;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0LAA0L;AAC1L,kNAAkN,uJAAuJ;AACzW;AACA;AACA,4MAA4M;AAC5M,6LAA6L;AAC7L;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iNAAiN;AACjN,kMAAkM;AAClM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2MAA2M;AAC3M,4LAA4L;AAC5L;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qIAAqI;AACrI,qKAAqK,kEAAkE;AACvO;AACA;AACA,2KAA2K,wEAAwE;AACnP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;;;;;;;ACjpCa;AACb;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB;AACrB,2BAA2B,mBAAO,CAAC,KAAO;AAC1C,oBAAoB,mBAAO,CAAC,KAAW;AACvC,gDAAgD,mBAAO,CAAC,KAAmD;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;;;;;;AClMa;AACb;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kCAAkC;AAClC,2BAA2B,mBAAO,CAAC,KAAO;AAC1C,8BAA8B,mBAAO,CAAC,KAAiC;AACvE,oBAAoB,mBAAO,CAAC,KAAW;AACvC,6BAA6B,mBAAO,CAAC,KAAgC;AACrE,iCAAiC,mBAAO,CAAC,IAAoC;AAC7E,iBAAiB,mBAAO,CAAC,KAAmB;AAC5C,mBAAmB,mBAAO,CAAC,KAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,WAAW;AACvC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yBAAyB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;;;;;;;ACjNa;AACb;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,6BAA6B;AAC7B,2BAA2B,mBAAO,CAAC,KAAO;AAC1C,yBAAyB,mBAAO,CAAC,KAAgB;AACjD,iCAAiC,mBAAO,CAAC,IAAoC;AAC7E,yBAAyB,mBAAO,CAAC,KAAiC;AAClE,2CAA2C,mBAAO,CAAC,KAAgD;AACnG,yBAAyB,mBAAO,CAAC,KAAiC;AAClE,gCAAgC,mBAAO,CAAC,KAAwC;AAChF,yBAAyB,mBAAO,CAAC,KAAiC;AAClE,qBAAqB,mBAAO,CAAC,KAAqC;AAClE,qBAAqB,mBAAO,CAAC,KAAqC;AAClE,oBAAoB,mBAAO,CAAC,KAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,mBAAmB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kCAAkC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oCAAoC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,qBAAqB;AACnxG;AACA;AACA;AACA,wBAAwB,oCAAoC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG,mDAAmD;AACpJ;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,2CAA2C;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,UAAU,GAAG,YAAY,EAAE,kFAAkF;AACzI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;;;;;;;AClgCa;AACb;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,2BAA2B,mBAAO,CAAC,KAAU;AAC7C,2BAA2B,mBAAO,CAAC,KAAO;AAC1C,mDAAmD,mBAAO,CAAC,KAAsD;AACjH,yDAAyD,mBAAO,CAAC,KAA4D;AAC7H,mDAAmD,mBAAO,CAAC,KAAsD;AACjH,kCAAkC,mBAAO,CAAC,KAAqC;AAC/E,gDAAgD,mBAAO,CAAC,KAAmD;AAC3G,iCAAiC,mBAAO,CAAC,IAAoaAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb,sCAAsC;AACtC,4DAA4D;AAC5D,0EAA0E;AAC1E;AACA,iCAAiC;AACjC,0DAA0D,QAAQ,SAAS,aAAa;AACxF;AACA;AACA,iCAAiC;AACjC,0DAA0D,QAAQ,UAAU,aAAa;AACzF;AACA;AACA,iCAAiC;AACjC,0DAA0D,QAAQ,WAAW,aAAa;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wGAAwG,sCAAsC;AAC9I;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,0BAA0B;AAChH;AACA;AACA;AACA,gBAAgB,+CAA+C;AAC/D;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2GAA2G,sCAAsC;AACjJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gHAAgH,sCAAsC;AACtJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA,4BAA4B,qCAAqC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,sFAAsF,0BAA0B;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sHAAsH,sCAAsC;AAC5J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sHAAsH,sCAAsC;AAC5J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,8BAA8B;AAC1D;AACA;AACA;AACA,4BAA4B,8BAA8B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;;;;;;;ACtjBa;AACb;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,2BAA2B,mBAAO,CAAC,KAAO;AAC1C,gDAAgD,mBAAO,CAAC,KAAmD;AAC3G,iCAAiC,mBAAO,CAAC,IAAoC;AAC7E,oBAAoB,mBAAO,CAAC,KAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,2BAA2B;AAC3B;;;;;;;AChIa;AACb;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,2BAA2B,mBAAO,CAAC,KAAO;AAC1C,gDAAgD,mBAAO,CAAC,KAAmD;AAC3G,+CAA+C,mBAAO,CAAC,IAAkD;AACzG,8BAA8B,mBAAO,CAAC,KAAiC;AACvE,6BAA6B,mBAAO,CAAC,KAAgC;AACrE,mDAAmD,mBAAO,CAAC,KAAsD;AACjH,kCAAkC,mBAAO,CAAC,KAAqC;AAC/E,oBAAoB,mBAAO,CAAC,KAAW;AACvC,iBAAiB,mBAAO,CAAC,KAAmB;AAC5C,iBAAiB,mBAAO,CAAC,KAAmB;AAC5C,mBAAmB,mBAAO,CAAC,KAAqB;AAChD,sBAAsB,mBAAO,CAAC,KAAsB;AACpD;AACA,iCAAiC,mBAAO,CAAC,IAAouBAAuB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,2BAA2B;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA,4BAA4B,8BAA8B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2CAA2C;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE,gDAAgD,SAAS;AACzD;AACA;AACA,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,uEAAuE,+DAA+D;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;;;;;;;AC7gBa;AACb;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,2BAA2B,mBAAO,CAAC,KAAO;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;;;;;;AC/Da;AACb;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,2BAA2B,mBAAO,CAAC,KAAO;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,sBAAsB;AACtB;;;;;;;AClEa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,yBAAyB,mBAAO,CAAC,KAAgB;AACjD,gBAAgB,mBAAO,CAAC,KAAO;AAC/B,qBAAqB,mBAAO,CAAC,KAAoB;AACjD,yBAAyB,mBAAO,CAAC,KAAwB;AACzD,uBAAuB,mBAAO,CAAC,GAAsB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gBAAgeAAe,eAAe;AAC9B,eAAe,mBAAmB;AAClC,eAAe,mBAAmB;AAClC,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA,wBAAwB,0BAA0B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACzOa;AACb;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,6BAA6B;AAC7B,2BAA2B,mBAAO,CAAC,KAAO;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sCAAsC;AAC9D;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,6BAA6B;AAC7B;;;;;;;AClEa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB,yBAAyB,mBAAO,CAAC,KAAgB;AACjD,gBAAgB,mBAAO,CAAC,KAAO;AAC/B,8BAA8B,mBAAO,CAAC,KAAwC;AAC9E,qBAAqB,mBAAO,CAAC,KAAqB;AAClD,qBAAqB,mBAAO,CAAC,KAAwB;AACrD,yCAAyC,4KAA4K;AACrN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0BAA0B;AAC1B;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;;;;;;ACrIa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,cAAc;AACd,yBAAyB,mBAAO,CAAC,KAAgB;AACjD,gBAAgB,mBAAO,CAAC,KAAO;AAC/B,gBAAgB,mBAAO,CAAC,KAAuB;AAC/C,0BAA0B,mBAAO,CAAC,KAAiC;AACnE,8BAA8B,mBAAO,CAAC,KAAwC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C,iCAAiC,aAAa;AAC9C,8BAA8B,UAAU;AACxC,6BAA6B,UAAU;AACvC,8BAA8B,wCAAwC;AACtE,wCAAwC,8BAA8B;AACtE,2CAA2C,6CAA6C;AACxF,qCAAqC,iCAAiC;AACtE,2BAA2B,8BAA8B;AACzD,oCAAoC,aAAa;AACjD,mCAAmC,8BAA8B;AACjE,8BAA8B,UAAU;AACxC,iCAAiC,UAAU;AAC3C,wBAAwB,UAAU;AAClC,6BAA6B,UAAU;AACvC,yBAAyB,UAAU;AACnC,yBAAyB;AACzB,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;;;;;;AC7Ea;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,mBAAmB,mBAAO,CAAC,KAAgB;AAC3C,iBAAiB,mBAAO,CAAC,KAAc;AACvC,eAAe,mBAAO,CAAC,KAAe;AACtC,qBAAqB,mBAAO,CAAC,KAAqB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gHAAgH;AAChH;AACA,0BAA0B;AAC1B;AACA;AACA,kBAAkB;AAClB;;;;;;;ACxBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrGa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClGa;AACb;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,gBAAgB,mBAAO,CAAC,KAAuB;AAC/C,gBAAgB,mBAAO,CAAC,KAAO;AAC/B,iCAAiC,mBAAO,CAAC,IAAoC;AAC7E,yBAAyB,mBAAO,CAAC,KAAgB;AACjD,0BAA0B,mBAAO,CAAC,KAA0B;AAC5D,0BAA0B,mBAAO,CAAC,KAAiC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C,gCAAgC,aAAa;AAC7C,2CAA2C,8BAA8B;AACzE,qCAAqC,8BAA8B;AACnE,2BAA2B,YAAY;AACvC,4BAA4B,YAAY;AACxC,6BAA6B,YAAY;AACzC,4BAA4B,YAAY;AACxC,8BAA8B,8BAA8B;AAC5D,oCAAoC,aAAa;AACjD,yBAAyB,UAAU;AACnC,mCAAmC;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,aAAa;AACrC;AACA,oCAAoC,SAAS,IAAI,SAAS;AAC1D;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA,wBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,cAAc;AAClE;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;;;;;;;AClMa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,aAAa;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClIa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,gBAAgB,mBAAO,CAAC,KAAO;AAC/B,mBAAmB,mBAAO,CAAC,KAAgB;AAC3C,iBAAiB,mBAAO,CAAC,KAAc;AACvC,eAAe,mBAAO,CAAC,KAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA,SAAS;AACT,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,gFAAgF;AAChF,iFAAiF;AACjF;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;;;;;;AC3Ea;AACb,8CAA6C,EAAE,aAAawBAAwB,UAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrIa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,aAAa;AACb,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACXa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACzCa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB,gBAAgB,mBAAO,CAAC,KAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;;;;;;;ACzGa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,kBAAkB;AAClB;AACA;AACA,sBAAsB,aAAa;AACnC,qBAAqB;AACrB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;;;;;;ACnCa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,gBAAgB,mBAAO,CAAC,KAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;;;;;;AC5Ba;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,yBAAyB,mBAAO,CAAC,KAAgB;AACjD,gBAAgB,mBAAO,CAAC,KAAO;AAC/B,qBAAqB,mBAAO,CAAC,KAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,mBAAmB;AAClC,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA,iCAAiC,gLAAgL,IAAI;AACrN;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,mBAAmB;AAClC,eAAe,mBAAmB;AAClC,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;;;;;;AC5Ja;AACb;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,yBAAyB,mBAAO,CAAC,KAAgB;AACjD,gBAAgB,mBAAO,CAAC,KAAO;AAC/B,sBAAsB,mBAAO,CAAC,KAAgC;AAC9D;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,mBAAmB;AAClC,eAAe,mBAAmB;AAClC,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iCAAiC;AACzD;AACA;AACA;AACA,kBAAkB;AAClB;;;;;;;AC1Pa;AACb;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB;AACnB,2BAA2B,mBAAO,CAAC,KAAO;AAC1C,gBAAgB,mBAAO,CAAC,KAAO;AAC/B,cAAc,mBAAO,CAAC,KAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C,2BAA2B,aAAa;AACxC,6BAA6B,YAAY;AACzC,kCAAkC,kCAAkC;AACpE,gCAAgC,kCAAkC;AAClE,sBAAsB,mCAAmC;AACzD,4BAA4B,UAAU;AACtC,sBAAsB,YAAY;AAClC,kCAAkC,aAAa;AAC/C,qBAAqB,YAAY;AACjC,wBAAwB,YAAY;AACpC,0BAA0B,YAAY;AACtC,0BAA0B,YAAY;AACtC,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;;;;;;;AC5Pa;AACb;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,2BAA2B,mBAAO,CAAC,KAAO;AAC1C,uBAAuB,mBAAO,CAAC,KAAyB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,aAAa;AACrD,4CAA4C,aAAa;AACzD,qBAAqB,aAAa;AAClC,uBAAuB,kCAAkC;AACzD,0BAA0B,aAAa;AACvC,sBAAsB,YAAY;AAClC,iCAAiC,cAAc;AAC/C,qBAAqB,aAAa;AAClC,uBAAuB,kCAAkC;AACzD,0BAA0B,aAAa;AACvC,sBAAsB,YAAY;AAClC,iCAAiC,cAAc;AAC/C,qBAAqB,aAAa;AAClC,uBAAuB,kCAAkC;AACzD,0BAA0B,aAAa;AACvC,sBAAsB,YAAY;AAClC,iCAAiC,cAAc;AAC/C,qBAAqB,aAAa;AAClC,uBAAuB,kCAAkC;AACzD,0BAA0B,aAAa;AACvC,sBAAsB,YAAY;AAClC,iCAAiC,cAAc;AAC/C,qBAAqB,aAAa;AAClC,uBAAuB,kCAAkC;AACzD,0BAA0B,aAAa;AACvC,sBAAsB,YAAY;AAClC,iCAAiC,cAAc;AAC/C,qBAAqB,aAAa;AAClC,uBAAuB,kCAAkC;AACzD,0BAA0B,aAAa;AACvC,sBAAsB,YAAY;AAClC,iCAAiC,cAAc;AAC/C,qBAAqB,aAAa;AAClC,uBAAuB,kCAAkC;AACzD,0BAA0B,aAAa;AACvC,sBAAsB,YAAY;AAClC,iCAAiC,cAAc;AAC/C,qBAAqB,aAAa;AAClC,uBAAuB,kCAAkC;AACzD,0BAA0B,aAAa;AACvC,sBAAsB,YAAY;AAClC,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;;;;;;;ACtjBa;AACb;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kCAAkC;AAClC,2BAA2B,mBAAO,CAAC,KAAO;AAC1C,gBAAgB,mBAAO,CAAC,KAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA,4CAA4C;AAC5C;AACA,kEAAkE;AAClE;AACA,kDAAkD;AAClD;AACA;AACA;AACA,iDAAiD;AACjD;AACA,qEAAqE;AACrE;AACA,oDAAoD;AACpD;AACA;AACA;AACA,uCAAuC;AACvC,oIAAoI;AACpI,qGAAqG;AACrG,yEAAyE;AACzE,yEAAyE;AACzE,qDAAqD;AACrD,iEAAiE;AACjE,qDAAqD;AACrD;AACA;AACA,wBAAwB,2CAA2C;AACnE,0BAA0B,UAAU;AACpC,4BAA4B,aAAa;AACzC,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,0BAA0B;AAC5E,kDAAkD,6BAA6B;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC","sources":["webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/index.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/injectors/Tag3dGeometryCreationInjector.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/injectors/TextureUnifierInjector.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/interfaces/IPostProcessingEffectDefinitions.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/loaders/EnvironmentMapLoader.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/loaders/GeometryLoader.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/loaders/HTMLElementAnchorLoader.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/loaders/LightLoader.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/loaders/MaterialLoader.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/CameraManager.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/EnvironmentGeometryManager.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/PostProcessingManager.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/RenderingManager.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/SceneTracingManager.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/SceneTreeManager.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/postprocessing/GodRaysManager.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/postprocessing/OutlineManager.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/postprocessing/SSAARenderPass.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/postprocessing/SelectiveBloomManager.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/postprocessing/ao/ao/AOEffect.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/postprocessing/ao/ao/AOPass.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/postprocessing/ao/ao/shader/ao_compose.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/postprocessing/ao/hbao/HBAOEffect.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/postprocessing/ao/hbao/shader/hbao.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/postprocessing/ao/hbao/shader/hbao_utils.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/postprocessing/ao/poissionDenoise/PoissionDenoisePass.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/postprocessing/ao/poissionDenoise/shader/poissionDenoise.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/postprocessing/ao/ssao/SSAOEffect.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/postprocessing/ao/ssao/shader/ssao.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/postprocessing/ao/utils/shader/basic.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/postprocessing/ao/utils/shader/sampleBlueNoise.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/postprocessing/utils/CopyMaterial.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/postprocessing/utils/CopyShader.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/postprocessing/utils/FullScreenQuad.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/postprocessing/utils/NormalPass.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/managers/postprocessing/utils/RenderPass.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/materials/GemMaterial.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/materials/MultiPointsMaterial.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/materials/SpecularGlossinessMaterial.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Resolution = exports.PredicationMode = exports.EdgeDetectionMode = exports.SMAAPreset = exports.KernelSize = exports.VignetteTechnique = exports.BlendFunction = exports.VignetteEffect = exports.TiltShiftEffect = exports.SepiaEffect = exports.SelectiveBloomEffect = exports.ScanlineEffect = exports.SSAOEffect = exports.SMAAEffect = exports.PixelationEffect = exports.OutlineEffect = exports.NoiseEffect = exports.HueSaturationEffect = exports.GridEffect = exports.GodRaysEffect = exports.FXAAEffect = exports.DotScreenEffect = exports.DepthOfFieldEffect = exports.ChromaticAberrationEffect = exports.BloomEffect = exports.EffectComposer = exports.Effect = exports.POST_PROCESSING_EFFECT_TYPE = exports.ANTI_ALIASING_TECHNIQUE = exports.PostProcessingManager = exports.MultiPointsMaterial = exports.ENVIRONMENT_MAP_EMPTY = exports.ENVIRONMENT_MAP_CUBE = exports.ENVIRONMENT_MAP = exports.ThreejsData = exports.RenderingEngine = void 0;\r\nconst IPostProcessingEffectDefinitions_1 = require(\"./interfaces/IPostProcessingEffectDefinitions\");\r\nObject.defineProperty(exports, \"ANTI_ALIASING_TECHNIQUE\", { enumerable: true, get: function () { return IPostProcessingEffectDefinitions_1.ANTI_ALIASING_TECHNIQUE; } });\r\nObject.defineProperty(exports, \"POST_PROCESSING_EFFECT_TYPE\", { enumerable: true, get: function () { return IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE; } });\r\nconst postprocessing_1 = require(\"postprocessing\");\r\nObject.defineProperty(exports, \"BlendFunction\", { enumerable: true, get: function () { return postprocessing_1.BlendFunction; } });\r\nObject.defineProperty(exports, \"BloomEffect\", { enumerable: true, get: function () { return postprocessing_1.BloomEffect; } });\r\nObject.defineProperty(exports, \"ChromaticAberrationEffect\", { enumerable: true, get: function () { return postprocessing_1.ChromaticAberrationEffect; } });\r\nObject.defineProperty(exports, \"DepthOfFieldEffect\", { enumerable: true, get: function () { return postprocessing_1.DepthOfFieldEffect; } });\r\nObject.defineProperty(exports, \"DotScreenEffect\", { enumerable: true, get: function () { return postprocessing_1.DotScreenEffect; } });\r\nObject.defineProperty(exports, \"EdgeDetectionMode\", { enumerable: true, get: function () { return postprocessing_1.EdgeDetectionMode; } });\r\nObject.defineProperty(exports, \"Effect\", { enumerable: true, get: function () { return postprocessing_1.Effect; } });\r\nObject.defineProperty(exports, \"EffectComposer\", { enumerable: true, get: function () { return postprocessing_1.EffectComposer; } });\r\nObject.defineProperty(exports, \"FXAAEffect\", { enumerable: true, get: function () { return postprocessing_1.FXAAEffect; } });\r\nObject.defineProperty(exports, \"GodRaysEffect\", { enumerable: true, get: function () { return postprocessing_1.GodRaysEffect; } });\r\nObject.defineProperty(exports, \"GridEffect\", { enumerable: true, get: function () { return postprocessing_1.GridEffect; } });\r\nObject.defineProperty(exports, \"HueSaturationEffect\", { enumerable: true, get: function () { return postprocessing_1.HueSaturationEffect; } });\r\nObject.defineProperty(exports, \"KernelSize\", { enumerable: true, get: function () { return postprocessing_1.KernelSize; } });\r\nObject.defineProperty(exports, \"NoiseEffect\", { enumerable: true, get: function () { return postprocessing_1.NoiseEffect; } });\r\nObject.defineProperty(exports, \"OutlineEffect\", { enumerable: true, get: function () { return postprocessing_1.OutlineEffect; } });\r\nObject.defineProperty(exports, \"PixelationEffect\", { enumerable: true, get: function () { return postprocessing_1.PixelationEffect; } });\r\nObject.defineProperty(exports, \"PredicationMode\", { enumerable: true, get: function () { return postprocessing_1.PredicationMode; } });\r\nObject.defineProperty(exports, \"Resolution\", { enumerable: true, get: function () { return postprocessing_1.Resolution; } });\r\nObject.defineProperty(exports, \"ScanlineEffect\", { enumerable: true, get: function () { return postprocessing_1.ScanlineEffect; } });\r\nObject.defineProperty(exports, \"SelectiveBloomEffect\", { enumerable: true, get: function () { return postprocessing_1.SelectiveBloomEffect; } });\r\nObject.defineProperty(exports, \"SepiaEffect\", { enumerable: true, get: function () { return postprocessing_1.SepiaEffect; } });\r\nObject.defineProperty(exports, \"SMAAEffect\", { enumerable: true, get: function () { return postprocessing_1.SMAAEffect; } });\r\nObject.defineProperty(exports, \"SMAAPreset\", { enumerable: true, get: function () { return postprocessing_1.SMAAPreset; } });\r\nObject.defineProperty(exports, \"SSAOEffect\", { enumerable: true, get: function () { return postprocessing_1.SSAOEffect; } });\r\nObject.defineProperty(exports, \"TiltShiftEffect\", { enumerable: true, get: function () { return postprocessing_1.TiltShiftEffect; } });\r\nObject.defineProperty(exports, \"VignetteEffect\", { enumerable: true, get: function () { return postprocessing_1.VignetteEffect; } });\r\nObject.defineProperty(exports, \"VignetteTechnique\", { enumerable: true, get: function () { return postprocessing_1.VignetteTechnique; } });\r\nconst EnvironmentMapLoader_1 = require(\"./loaders/EnvironmentMapLoader\");\r\nObject.defineProperty(exports, \"ENVIRONMENT_MAP\", { enumerable: true, get: function () { return EnvironmentMapLoader_1.ENVIRONMENT_MAP; } });\r\nObject.defineProperty(exports, \"ENVIRONMENT_MAP_CUBE\", { enumerable: true, get: function () { return EnvironmentMapLoader_1.ENVIRONMENT_MAP_CUBE; } });\r\nObject.defineProperty(exports, \"ENVIRONMENT_MAP_EMPTY\", { enumerable: true, get: function () { return EnvironmentMapLoader_1.ENVIRONMENT_MAP_EMPTY; } });\r\nconst viewer_shared_global_access_objects_1 = require(\"@shapediver/viewer.shared.global-access-objects\");\r\nconst MultiPointsMaterial_1 = require(\"./materials/MultiPointsMaterial\");\r\nObject.defineProperty(exports, \"MultiPointsMaterial\", { enumerable: true, get: function () { return MultiPointsMaterial_1.MultiPointsMaterial; } });\r\nconst PostProcessingManager_1 = require(\"./managers/PostProcessingManager\");\r\nObject.defineProperty(exports, \"PostProcessingManager\", { enumerable: true, get: function () { return PostProcessingManager_1.PostProcessingManager; } });\r\nconst RenderingEngine_1 = require(\"./RenderingEngine\");\r\nObject.defineProperty(exports, \"RenderingEngine\", { enumerable: true, get: function () { return RenderingEngine_1.RenderingEngine; } });\r\nconst Tag3dGeometryCreationInjector_1 = require(\"./injectors/Tag3dGeometryCreationInjector\");\r\nconst TextureUnifierInjector_1 = require(\"./injectors/TextureUnifierInjector\");\r\nconst ThreejsData_1 = require(\"./types/ThreejsData\");\r\nObject.defineProperty(exports, \"ThreejsData\", { enumerable: true, get: function () { return ThreejsData_1.ThreejsData; } });\r\nconst tag3dGeometryCreationInjector = new Tag3dGeometryCreationInjector_1.Tag3dGeometryCreationInjector();\r\nviewer_shared_global_access_objects_1.GlobalAccessObjects.instance.loadTag3D = tag3dGeometryCreationInjector.convertTag3dToGeometry.bind(tag3dGeometryCreationInjector);\r\nconst textureUnifierInjector = new TextureUnifierInjector_1.TextureUnifierInjector();\r\nviewer_shared_global_access_objects_1.GlobalAccessObjects.instance.combineTextures = textureUnifierInjector.combineTextures.bind(textureUnifierInjector);\r\n//# sourceMappingURL=index.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _Tag3dGeometryCreationInjector_stateEngine;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Tag3dGeometryCreationInjector = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nconst viewer_shared_types_1 = require(\"@shapediver/viewer.shared.types\");\r\nconst FontLoader_1 = require(\"../three/loaders/FontLoader\");\r\nconst font_1 = require(\"../three/font\");\r\nconst viewer_shared_node_tree_1 = require(\"@shapediver/viewer.shared.node-tree\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst TextGeometry_1 = require(\"../three/geometries/TextGeometry\");\r\nclass Tag3dGeometryCreationInjector {\r\n    // #endregion Properties (2)\r\n    // #region Constructors (1)\r\n    constructor() {\r\n        // #region Properties (2)\r\n        _Tag3dGeometryCreationInjector_stateEngine.set(this, viewer_shared_services_1.StateEngine.instance);\r\n        this._font = new FontLoader_1.Font(font_1.font);\r\n        __classPrivateFieldGet(this, _Tag3dGeometryCreationInjector_stateEngine, \"f\").fontLoaded.resolve(true);\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (1)\r\n    convertTag3dToGeometry(tag3dInfo) {\r\n        const node = new viewer_shared_node_tree_1.TreeNode('tag3d_' + tag3dInfo.version);\r\n        tag3dInfo.size = tag3dInfo.size ? +tag3dInfo.size : 1;\r\n        if (tag3dInfo.text === undefined || tag3dInfo.text === '' || /^[ \\t\\n\\r]*$/.test(tag3dInfo.text))\r\n            return;\r\n        const tagLines = tag3dInfo.text.split(/\\r\\n|\\r|\\n/g);\r\n        const lineArray = [];\r\n        for (let lineIndex = 0; lineIndex < tagLines.length; ++lineIndex) {\r\n            if (tagLines[lineIndex] === '')\r\n                continue;\r\n            // create tag mesh object\r\n            const tag = new TextGeometry_1.TextGeometry(tagLines[lineIndex], { size: tag3dInfo.size, height: tag3dInfo.size / 10, font: this._font });\r\n            lineArray.push(tag);\r\n        }\r\n        // create temporary object\r\n        const parentObject = new THREE.Object3D();\r\n        for (const line of lineArray) {\r\n            parentObject.add(new THREE.Mesh(line, new THREE.MeshPhongMaterial()));\r\n        }\r\n        // align lines\r\n        let bb, tempExtentsY, lineHeight = 0;\r\n        {\r\n            lineHeight = 0;\r\n            for (const child of parentObject.children) {\r\n                bb = new THREE.Box3().setFromObject(child);\r\n                tempExtentsY = bb.max.y - bb.min.y;\r\n                lineHeight = Math.max(lineHeight, tempExtentsY);\r\n            }\r\n        }\r\n        lineHeight *= 1.15;\r\n        lineArray.forEach((line, i) => {\r\n            line.translate(0, (-i - 1) * lineHeight, 0);\r\n        });\r\n        // justification\r\n        bb = new THREE.Box3().setFromObject(parentObject);\r\n        const extentsX = bb.max.x - bb.min.x;\r\n        const extentsY = bb.max.y - bb.min.y;\r\n        const tagJustTranslation = new THREE.Vector3(0, 0, 0);\r\n        switch (tag3dInfo.justification) {\r\n            case 'TL':\r\n                break;\r\n            case 'TC':\r\n                tagJustTranslation.x = -extentsX * 0.5;\r\n                break;\r\n            case 'TR':\r\n                tagJustTranslation.x = -extentsX;\r\n                break;\r\n            case 'ML':\r\n                tagJustTranslation.y = extentsY * 0.5;\r\n                break;\r\n            case 'MC':\r\n                tagJustTranslation.x = -extentsX * 0.5;\r\n                tagJustTranslation.y = extentsY * 0.5;\r\n                break;\r\n            case 'MR':\r\n                tagJustTranslation.x = -extentsX;\r\n                tagJustTranslation.y = extentsY * 0.5;\r\n                break;\r\n            case 'BL':\r\n                tagJustTranslation.y = extentsY;\r\n                break;\r\n            case 'BC':\r\n                tagJustTranslation.x = -extentsX * 0.5;\r\n                tagJustTranslation.y = extentsY;\r\n                break;\r\n            case 'BR':\r\n                tagJustTranslation.x = -extentsX;\r\n                tagJustTranslation.y = extentsY;\r\n                break;\r\n        }\r\n        for (const line of lineArray) {\r\n            line.translate(tagJustTranslation.x, tagJustTranslation.y, tagJustTranslation.z);\r\n        }\r\n        // rotation\r\n        if (tag3dInfo.location.xAxis !== undefined) {\r\n            const rotMatrix = new THREE.Matrix4();\r\n            rotMatrix.set(tag3dInfo.location.xAxis.X, tag3dInfo.location.yAxis.X, tag3dInfo.location.normal.X, 0, tag3dInfo.location.xAxis.Y, tag3dInfo.location.yAxis.Y, tag3dInfo.location.normal.Y, 0, tag3dInfo.location.xAxis.Z, tag3dInfo.location.yAxis.Z, tag3dInfo.location.normal.Z, 0, 0, 0, 0, 1);\r\n            for (const line of lineArray) {\r\n                line.applyMatrix4(rotMatrix);\r\n                line.translate(tag3dInfo.location.origin.X, tag3dInfo.location.origin.Y, tag3dInfo.location.origin.Z);\r\n            }\r\n        }\r\n        for (const line of lineArray) {\r\n            const attributes = {};\r\n            for (const attribute in line.attributes) {\r\n                let attributeName = attribute.toUpperCase();\r\n                if (/\\d/.test(attributeName) && !attributeName.includes('_')) {\r\n                    const index = attributeName.search(/\\d/);\r\n                    attributeName = attributeName.substring(0, index) + '_' + attributeName.substring(index, attributeName.length);\r\n                }\r\n                else if (attributeName === 'TEXCOORD' || attributeName === 'COLOR' || attributeName === 'JOINTS' || attributeName === 'WEIGHTS') {\r\n                    attributeName += '_0';\r\n                }\r\n                else if (attributeName === 'UV') {\r\n                    attributeName = 'TEXCOORD_0';\r\n                }\r\n                attributes[attributeName] = new viewer_shared_types_1.AttributeData(line.attributes[attribute].array, line.attributes[attribute].itemSize, 0, 0, 0, false, line.attributes[attribute].array.length / line.attributes[attribute].itemSize);\r\n            }\r\n            const child = new viewer_shared_node_tree_1.TreeNode('tag3d_' + line);\r\n            child.data.push(new viewer_shared_types_1.GeometryData(new viewer_shared_types_1.PrimitiveData(attributes, null), viewer_shared_types_1.PRIMITIVE_MODE.TRIANGLES, new viewer_shared_types_1.MaterialStandardData({ color: tag3dInfo.color, metalness: 0, roughness: 1 })));\r\n            node.children.push(child);\r\n        }\r\n        return node;\r\n    }\r\n}\r\nexports.Tag3dGeometryCreationInjector = Tag3dGeometryCreationInjector;\r\n_Tag3dGeometryCreationInjector_stateEngine = new WeakMap();\r\n//# sourceMappingURL=Tag3dGeometryCreationInjector.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TextureUnifierInjector = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nclass TextureUnifierInjector {\r\n    // #endregion Properties (5)\r\n    // #region Constructors (1)\r\n    constructor() { }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (1)\r\n    combineTextures(red, green, blue) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!red && !green && !blue)\r\n                throw new Error('No maps supplied.');\r\n            if (red && red instanceof ArrayBuffer)\r\n                return { image: red, blob: new Blob([new Uint8Array(red)], { type: 'image/jpeg' }) };\r\n            if (green && green instanceof ArrayBuffer)\r\n                return { image: green, blob: new Blob([new Uint8Array(green)], { type: 'image/jpeg' }) };\r\n            if (blue && blue instanceof ArrayBuffer)\r\n                return { image: blue, blob: new Blob([new Uint8Array(blue)], { type: 'image/jpeg' }) };\r\n            if (!this._renderer)\r\n                this.createThreeJsUtils();\r\n            let width = 0, height = 0;\r\n            const textures = [red, green, blue];\r\n            for (const t of textures) {\r\n                if (t) {\r\n                    if (width === 0 && height === 0) {\r\n                        width = t.width;\r\n                        height = t.height;\r\n                    }\r\n                    else if (t.width !== width && t.height !== height) {\r\n                        throw new Error('Maps have different sizes. Combining not supported.');\r\n                    }\r\n                }\r\n            }\r\n            if (red) {\r\n                const redTexture = new THREE.Texture(red);\r\n                redTexture.needsUpdate = true;\r\n                this._mergeShader.uniforms.tRed.value = redTexture;\r\n                this._mergeShader.uniforms.activeRed.value = true;\r\n            }\r\n            else {\r\n                this._mergeShader.uniforms.activeRed.value = false;\r\n            }\r\n            if (green) {\r\n                const greenTexture = new THREE.Texture(green);\r\n                greenTexture.needsUpdate = true;\r\n                this._mergeShader.uniforms.tGreen.value = greenTexture;\r\n                this._mergeShader.uniforms.activeGreen.value = true;\r\n            }\r\n            else {\r\n                this._mergeShader.uniforms.activeGreen.value = false;\r\n            }\r\n            if (blue) {\r\n                const blueTexture = new THREE.Texture(blue);\r\n                blueTexture.needsUpdate = true;\r\n                this._mergeShader.uniforms.tBlue.value = blueTexture;\r\n                this._mergeShader.uniforms.activeBlue.value = true;\r\n            }\r\n            else {\r\n                this._mergeShader.uniforms.activeBlue.value = false;\r\n            }\r\n            // The different render targets that are used by the passes\r\n            const renderTarget = new THREE.WebGLRenderTarget(width, height, {\r\n                minFilter: THREE.LinearFilter,\r\n                magFilter: THREE.LinearFilter,\r\n                format: THREE.RGBAFormat\r\n            });\r\n            renderTarget.texture.name = 'target.rt';\r\n            this._renderer.setRenderTarget(renderTarget);\r\n            this._renderer.render(this._quadScene, this._quadCamera);\r\n            const buffer = new Uint8ClampedArray(4 * width * height);\r\n            this._renderer.readRenderTargetPixels(renderTarget, 0, 0, width, height, buffer);\r\n            const imageData = new ImageData(buffer, width, height);\r\n            const canvas = document.createElement('canvas');\r\n            const ctx = canvas.getContext('2d');\r\n            canvas.width = imageData.width;\r\n            canvas.height = imageData.height;\r\n            ctx.putImageData(imageData, 0, 0);\r\n            const imageOut = new Image();\r\n            const promises = [];\r\n            promises.push(new Promise((resolve, reject) => {\r\n                imageOut.onload = () => resolve();\r\n                imageOut.onerror = reject;\r\n            }));\r\n            imageOut.crossOrigin = 'anonymous';\r\n            const mimeType = 'image/jpeg';\r\n            imageOut.src = canvas.toDataURL(mimeType, 1.0);\r\n            let blob;\r\n            promises.push(new Promise((resolve, reject) => {\r\n                canvas.toBlob((b) => {\r\n                    if (!b) {\r\n                        reject('Could not create blob.');\r\n                    }\r\n                    else {\r\n                        blob = b;\r\n                    }\r\n                    resolve();\r\n                }, mimeType, 1.0);\r\n            }));\r\n            yield Promise.all(promises);\r\n            return { image: imageOut, blob };\r\n        });\r\n    }\r\n    // #endregion Public Methods (1)\r\n    // #region Private Methods (1)\r\n    createThreeJsUtils() {\r\n        this._mergeShader = new THREE.ShaderMaterial({\r\n            uniforms: {\r\n                tRed: { value: null },\r\n                activeRed: { value: false },\r\n                defaultRed: { value: 1.0 },\r\n                tGreen: { value: null },\r\n                activeGreen: { value: false },\r\n                defaultGreen: { value: 1.0 },\r\n                tBlue: { value: null },\r\n                activeBlue: { value: false },\r\n                defaultBlue: { value: 1.0 },\r\n            },\r\n            vertexShader: `// @author Michael Oppitz \r\n        \r\n            uniform sampler2D tRed;\r\n            uniform bool activeRed;\r\n            uniform float defaultRed;\r\n            \r\n            uniform sampler2D tGreen;\t\t\r\n            uniform bool activeGreen;\r\n            uniform float defaultGreen;\r\n            \r\n            uniform sampler2D tBlue;\t\t\r\n            uniform bool activeBlue;\r\n            uniform float defaultBlue;\r\n        \r\n            varying vec2 vUv;\r\n            \r\n            void main() {\r\n                vUv = uv;\r\n                gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n            }`,\r\n            fragmentShader: `// @author Michael Oppitz \r\n        \r\n            uniform sampler2D tRed;\r\n            uniform bool activeRed;\r\n            uniform float defaultRed;\r\n            \r\n            uniform sampler2D tGreen;\t\t\r\n            uniform bool activeGreen;\r\n            uniform float defaultGreen;\r\n            \r\n            uniform sampler2D tBlue;\t\t\r\n            uniform bool activeBlue;\r\n            uniform float defaultBlue;\r\n            \r\n            varying vec2 vUv;\r\n            \r\n            void main() {\r\n                vec4 outColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n        \r\n                if(activeRed == true) {\r\n                    outColor.r = texture2D(tRed, vUv).r;\r\n                } else {\r\n                    outColor.r = defaultRed;\r\n                }\r\n            \r\n                if(activeGreen == true) {\r\n                    outColor.g = texture2D(tGreen, vUv).g;\r\n                } else {\r\n                    outColor.g = defaultGreen;\r\n                }\r\n            \r\n                if(activeBlue == true) {\r\n                    outColor.b = texture2D(tBlue, vUv).b;\r\n                } else {\r\n                    outColor.b = defaultBlue;\r\n                }\r\n            \r\n                gl_FragColor = outColor;\r\n            }`\r\n        });\r\n        this._quadCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\r\n        this._quadScene = new THREE.Scene();\r\n        this._quad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), this._mergeShader);\r\n        this._quadScene.add(this._quad);\r\n        this._renderer = new THREE.WebGLRenderer();\r\n    }\r\n}\r\nexports.TextureUnifierInjector = TextureUnifierInjector;\r\n//# sourceMappingURL=TextureUnifierInjector.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ANTI_ALIASING_TECHNIQUE = exports.POST_PROCESSING_EFFECT_TYPE = void 0;\r\nvar POST_PROCESSING_EFFECT_TYPE;\r\n(function (POST_PROCESSING_EFFECT_TYPE) {\r\n    POST_PROCESSING_EFFECT_TYPE[\"BLOOM\"] = \"bloom\";\r\n    POST_PROCESSING_EFFECT_TYPE[\"CHROMATIC_ABERRATION\"] = \"chromatic_aberration\";\r\n    POST_PROCESSING_EFFECT_TYPE[\"DEPTH_OF_FIELD\"] = \"depth_of_field\";\r\n    POST_PROCESSING_EFFECT_TYPE[\"DOT_SCREEN\"] = \"dot_screen\";\r\n    POST_PROCESSING_EFFECT_TYPE[\"GOD_RAYS\"] = \"god_rays\";\r\n    POST_PROCESSING_EFFECT_TYPE[\"GRID\"] = \"grid\";\r\n    POST_PROCESSING_EFFECT_TYPE[\"HBAO\"] = \"hbao\";\r\n    POST_PROCESSING_EFFECT_TYPE[\"HUE_SATURATION\"] = \"hue_saturation\";\r\n    POST_PROCESSING_EFFECT_TYPE[\"NOISE\"] = \"noise\";\r\n    POST_PROCESSING_EFFECT_TYPE[\"OUTLINE\"] = \"outline\";\r\n    POST_PROCESSING_EFFECT_TYPE[\"PIXELATION\"] = \"pixelation\";\r\n    POST_PROCESSING_EFFECT_TYPE[\"SSAO\"] = \"ssao\";\r\n    POST_PROCESSING_EFFECT_TYPE[\"SCANLINE\"] = \"scanline\";\r\n    POST_PROCESSING_EFFECT_TYPE[\"SELECTIVE_BLOOM\"] = \"selective_bloom\";\r\n    POST_PROCESSING_EFFECT_TYPE[\"SEPIA\"] = \"sepia\";\r\n    POST_PROCESSING_EFFECT_TYPE[\"TILT_SHIFT\"] = \"tilt_shift\";\r\n    POST_PROCESSING_EFFECT_TYPE[\"VIGNETTE\"] = \"vignette\";\r\n})(POST_PROCESSING_EFFECT_TYPE = exports.POST_PROCESSING_EFFECT_TYPE || (exports.POST_PROCESSING_EFFECT_TYPE = {}));\r\nvar ANTI_ALIASING_TECHNIQUE;\r\n(function (ANTI_ALIASING_TECHNIQUE) {\r\n    ANTI_ALIASING_TECHNIQUE[\"FXAA\"] = \"fxaa\";\r\n    ANTI_ALIASING_TECHNIQUE[\"NONE\"] = \"none\";\r\n    ANTI_ALIASING_TECHNIQUE[\"SMAA\"] = \"smaa\";\r\n    ANTI_ALIASING_TECHNIQUE[\"SSAA\"] = \"ssaa\";\r\n})(ANTI_ALIASING_TECHNIQUE = exports.ANTI_ALIASING_TECHNIQUE || (exports.ANTI_ALIASING_TECHNIQUE = {}));\r\n//# sourceMappingURL=IPostProcessingEffectDefinitions.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EnvironmentMapLoader = exports.ENVIRONMENT_MAP_TYPE = exports.ENVIRONMENT_MAP_EMPTY = exports.ENVIRONMENT_MAP = exports.ENVIRONMENT_MAP_CUBE = void 0;\r\n/* eslint-disable @typescript-eslint/no-empty-function */\r\n/* eslint-disable no-async-promise-executor */\r\nconst THREE = __importStar(require(\"three\"));\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst RGBELoader_1 = require(\"../three/loaders/RGBELoader\");\r\nconst viewer_shared_types_1 = require(\"@shapediver/viewer.shared.types\");\r\nvar ENVIRONMENT_MAP_CUBE;\r\n(function (ENVIRONMENT_MAP_CUBE) {\r\n    ENVIRONMENT_MAP_CUBE[\"DEFAULT\"] = \"default\";\r\n    ENVIRONMENT_MAP_CUBE[\"DEFAULT_BW\"] = \"default_bw\";\r\n    ENVIRONMENT_MAP_CUBE[\"BLURRED_LIGHTS\"] = \"blurred_lights\";\r\n    ENVIRONMENT_MAP_CUBE[\"GEORGENTOR\"] = \"georgentor\";\r\n    ENVIRONMENT_MAP_CUBE[\"GEORGENTOR_BLUR\"] = \"georgentor_blur\";\r\n    ENVIRONMENT_MAP_CUBE[\"GEORGENTOR_BLUE_BLUR\"] = \"georgentor_blue_blur\";\r\n    ENVIRONMENT_MAP_CUBE[\"GEORGENTOR_BW_BLUR\"] = \"georgentor_bw_blur\";\r\n    ENVIRONMENT_MAP_CUBE[\"LEVELSETS\"] = \"levelsets\";\r\n    ENVIRONMENT_MAP_CUBE[\"LYTHWOOD_FIELD\"] = \"lythwood_field\";\r\n    ENVIRONMENT_MAP_CUBE[\"MOUNTAINS\"] = \"mountains\";\r\n    ENVIRONMENT_MAP_CUBE[\"OCEAN\"] = \"ocean\";\r\n    ENVIRONMENT_MAP_CUBE[\"PIAZZA_SAN_MARCO\"] = \"piazza_san_marco\";\r\n    ENVIRONMENT_MAP_CUBE[\"RESIDENTIAL_GARDEN\"] = \"residential_garden\";\r\n    ENVIRONMENT_MAP_CUBE[\"ROOM_ABSTRACT_1\"] = \"room_abstract_1\";\r\n    ENVIRONMENT_MAP_CUBE[\"SKY\"] = \"sky\";\r\n    ENVIRONMENT_MAP_CUBE[\"STORAGE_ROOM\"] = \"storage_room\";\r\n    ENVIRONMENT_MAP_CUBE[\"STORM\"] = \"storm\";\r\n    ENVIRONMENT_MAP_CUBE[\"SUBWAY_ENTRANCE\"] = \"subway_entrance\";\r\n    ENVIRONMENT_MAP_CUBE[\"SUBWAY_ENTRANCE_BW_BLUR\"] = \"subway_entrance_bw_blur\";\r\n    ENVIRONMENT_MAP_CUBE[\"WHITE\"] = \"white\";\r\n    ENVIRONMENT_MAP_CUBE[\"YOKOHAMA\"] = \"yokohama\";\r\n})(ENVIRONMENT_MAP_CUBE = exports.ENVIRONMENT_MAP_CUBE || (exports.ENVIRONMENT_MAP_CUBE = {}));\r\nvar ENVIRONMENT_MAP;\r\n(function (ENVIRONMENT_MAP) {\r\n    ENVIRONMENT_MAP[\"ANNIVERSARY_LOUNGE\"] = \"anniversary_lounge\";\r\n    ENVIRONMENT_MAP[\"BALLROOM\"] = \"ballroom\";\r\n    ENVIRONMENT_MAP[\"CANNON_EXTERIOR\"] = \"cannon_exterior\";\r\n    ENVIRONMENT_MAP[\"CAPE_HILL\"] = \"cape_hill\";\r\n    ENVIRONMENT_MAP[\"CHRISTMAS_PHOTO_STUDIO\"] = \"christmas_photo_studio\";\r\n    ENVIRONMENT_MAP[\"CIRCUS_MAXIMUS\"] = \"circus_maximus\";\r\n    ENVIRONMENT_MAP[\"COLORFUL_STUDIO\"] = \"colorful_studio\";\r\n    ENVIRONMENT_MAP[\"COMBINATION_ROOM\"] = \"combination_room\";\r\n    ENVIRONMENT_MAP[\"GREEN_POINT_PARK\"] = \"green_point_park\";\r\n    ENVIRONMENT_MAP[\"HILLTOP_CONSTRUCTION\"] = \"hilltop_construction\";\r\n    ENVIRONMENT_MAP[\"LARGE_CORRIDOR\"] = \"large_corridor\";\r\n    ENVIRONMENT_MAP[\"LYTHWOOD_LOUNGE\"] = \"lythwood_lounge\";\r\n    ENVIRONMENT_MAP[\"NEUTRAL\"] = \"neutral\";\r\n    ENVIRONMENT_MAP[\"OBERER_KUHBERG\"] = \"oberer_kuhberg\";\r\n    ENVIRONMENT_MAP[\"OLD_HALL\"] = \"old_hall\";\r\n    ENVIRONMENT_MAP[\"PAUL_LOBE_HAUS\"] = \"paul_lobe_haus\";\r\n    ENVIRONMENT_MAP[\"PHOTO_STUDIO\"] = \"photo_studio\";\r\n    ENVIRONMENT_MAP[\"PHOTO_STUDIO_BROADWAY_HALL\"] = \"photo_studio_broadway_hall\";\r\n    ENVIRONMENT_MAP[\"SNOWY_FIELD\"] = \"snowy_field\";\r\n    ENVIRONMENT_MAP[\"STUDIO_SMALL\"] = \"studio_small\";\r\n    ENVIRONMENT_MAP[\"SUNFLOWERS\"] = \"sunflowers\";\r\n    ENVIRONMENT_MAP[\"TABLE_MOUNTAIN\"] = \"table_mountain\";\r\n    ENVIRONMENT_MAP[\"VENICE_SUNSET\"] = \"venice_sunset\";\r\n    ENVIRONMENT_MAP[\"WIDE_STREET\"] = \"wide_street\";\r\n})(ENVIRONMENT_MAP = exports.ENVIRONMENT_MAP || (exports.ENVIRONMENT_MAP = {}));\r\nvar ENVIRONMENT_MAP_EMPTY;\r\n(function (ENVIRONMENT_MAP_EMPTY) {\r\n    ENVIRONMENT_MAP_EMPTY[\"NONE\"] = \"none\";\r\n    ENVIRONMENT_MAP_EMPTY[\"NULL\"] = \"null\";\r\n})(ENVIRONMENT_MAP_EMPTY = exports.ENVIRONMENT_MAP_EMPTY || (exports.ENVIRONMENT_MAP_EMPTY = {}));\r\nvar ENVIRONMENT_MAP_TYPE;\r\n(function (ENVIRONMENT_MAP_TYPE) {\r\n    ENVIRONMENT_MAP_TYPE[\"LDR\"] = \"ldr\";\r\n    ENVIRONMENT_MAP_TYPE[\"HDR\"] = \"hdr\";\r\n    ENVIRONMENT_MAP_TYPE[\"NONE\"] = \"none\";\r\n    ENVIRONMENT_MAP_TYPE[\"NULL\"] = \"null\";\r\n})(ENVIRONMENT_MAP_TYPE = exports.ENVIRONMENT_MAP_TYPE || (exports.ENVIRONMENT_MAP_TYPE = {}));\r\nclass EnvironmentMapLoader {\r\n    // #endregion Properties (15)\r\n    // #region Constructors (1)\r\n    constructor(_renderingEngine) {\r\n        this._renderingEngine = _renderingEngine;\r\n        // #region Properties (15)\r\n        this._environmentMapFilenames = ['px', 'nx', 'pz', 'nz', 'py', 'ny'];\r\n        this._environmentMapHDR = [];\r\n        this._environmentMapNamesHDR = Object.values(ENVIRONMENT_MAP).filter(value => typeof value === 'string');\r\n        this._environmentMapNamesHDRKhronos = ['cannon_exterior', 'colorful_studio', 'neutral', 'wide_street'];\r\n        this._environmentMapNamesJPG = ['default', 'default_bw', 'blurred_lights', 'georgentor', 'georgentor_blur', 'georgentor_blue_blur', 'georgentor_bw_blur', 'levelsets', 'lythwood_field', 'mountains', 'ocean', 'piazza_san_marco', 'residential_garden', 'room_abstract_1', 'sky', 'storage_room', 'storm', 'subway_entrance', 'subway_entrance_bw_blur', 'white', 'yokohama'];\r\n        this._environmentMaps = {};\r\n        this._eventEngine = viewer_shared_services_1.EventEngine.instance;\r\n        this._httpClient = viewer_shared_services_1.HttpClient.instance;\r\n        this._stateEngine = viewer_shared_services_1.StateEngine.instance;\r\n        this._uuidGenerator = viewer_shared_services_1.UuidGenerator.instance;\r\n        this._envMap = null;\r\n        this._isHDRMap = false;\r\n        this._textureEncoding = THREE.SRGBColorSpace;\r\n        this._type = ENVIRONMENT_MAP_TYPE.NULL;\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (4)\r\n    get environmentMap() {\r\n        return this._envMap;\r\n    }\r\n    get isHDRMap() {\r\n        return this._isHDRMap;\r\n    }\r\n    get textureEncoding() {\r\n        return this._textureEncoding;\r\n    }\r\n    set textureEncoding(value) {\r\n        this._textureEncoding = value;\r\n        this.assignTextureEncoding();\r\n    }\r\n    // #endregion Public Accessors (4)\r\n    // #region Public Methods (4)\r\n    getEnvironmentMapImageUrl(name) {\r\n        if (Array.isArray(name))\r\n            return '';\r\n        if (this._environmentMapNamesHDR.indexOf(name) >= 0) {\r\n            let url_hdr = 'https://viewer.shapediver.com/v3/envmaps/1k/' + name + '_1k.hdr';\r\n            if (this._environmentMapNamesHDRKhronos.indexOf(name) >= 0)\r\n                url_hdr = 'https://viewer.shapediver.com/v3/envmaps/khronos/' + name + '.hdr';\r\n            return url_hdr;\r\n        }\r\n        else if (name.startsWith('https://') || name.startsWith('http://')) {\r\n            if (name.endsWith('.hdr') || name.endsWith('.jpg') || name.endsWith('.png')) {\r\n                return name;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n    init() {\r\n        this._environmentMaps['null'] = {\r\n            name: 'null',\r\n            map: Promise.resolve(null),\r\n            type: ENVIRONMENT_MAP_TYPE.NULL\r\n        };\r\n        this._environmentMaps['none'] = {\r\n            name: 'none',\r\n            map: Promise.resolve(null),\r\n            type: ENVIRONMENT_MAP_TYPE.NONE\r\n        };\r\n        this._pmremGenerator = new THREE.PMREMGenerator(this._renderingEngine.renderer);\r\n        this._pmremGenerator.compileEquirectangularShader();\r\n    }\r\n    load(name) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const eventId = this._uuidGenerator.create();\r\n            const res = this.loadEnvMap(name, eventId);\r\n            yield this.assignEnvironmentMap(res.name, res.type, eventId);\r\n            return Promise.resolve(true);\r\n        });\r\n    }\r\n    loadEnvMap(name, eId) {\r\n        const eventId = eId || this._uuidGenerator.create();\r\n        const event = { type: viewer_shared_types_1.TASK_TYPE.ENVIRONMENT_MAP_LOADING, id: eventId, data: { input: name }, progress: 0, status: 'Loading EnvironmentMap' };\r\n        this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_START, event);\r\n        if (name === 'none' || name === 'null')\r\n            return this._environmentMaps[name];\r\n        let name_internal, name_caching, url;\r\n        // check if name is a JSON.stringified version of an array of urls\r\n        if (!Array.isArray(name) && (name.startsWith('[\"https') && name.endsWith('\"]')))\r\n            try {\r\n                name = JSON.parse(name);\r\n            }\r\n            catch (e) {\r\n                this.notify(eventId, true);\r\n                throw new viewer_shared_services_1.ShapeDiverViewerEnvironmentMapError('EnvironmentMapLoader.load: Was not able to load environment map.', name);\r\n            }\r\n        // deal with string or array, define names for loading and caching\r\n        if (!Array.isArray(name)) {\r\n            name_internal = name.toLowerCase().replace(/ /g, '_');\r\n            name_caching = name_internal + this._renderingEngine.environmentMapResolution;\r\n        }\r\n        else {\r\n            if (name.length !== 6) {\r\n                this.notify(eventId, true);\r\n                throw new viewer_shared_services_1.ShapeDiverViewerEnvironmentMapError('EnvironmentMapLoader.load: Was not able to load environment map, exactly 6 files are needed in the array.', name);\r\n            }\r\n            name_internal = JSON.stringify(name, null, 0);\r\n            name_caching = name_internal;\r\n        }\r\n        // check if environment map is already cached\r\n        for (const environmentMap in this._environmentMaps)\r\n            if (environmentMap === name_caching)\r\n                return this._environmentMaps[environmentMap];\r\n        try {\r\n            // define urls for 6 cube images ourselves\r\n            if (!Array.isArray(name)) {\r\n                url = [];\r\n                let i;\r\n                if (this._environmentMapNamesHDR.indexOf(name_internal) >= 0) {\r\n                    let url_hdr = 'https://viewer.shapediver.com/v3/envmaps/1k/' + name_internal + '_1k.hdr';\r\n                    if (this._environmentMapNamesHDRKhronos.indexOf(name_internal) >= 0)\r\n                        url_hdr = 'https://viewer.shapediver.com/v3/envmaps/khronos/' + name_internal + '.hdr';\r\n                    this._environmentMapHDR.push(url_hdr);\r\n                    return this.loadEnvironmentMap(name_caching, url_hdr, eventId);\r\n                }\r\n                else if (this._environmentMapNamesJPG.indexOf(name_internal) >= 0) {\r\n                    // found in list of available environment maps with file type jpg\r\n                    for (i = 0; i < this._environmentMapFilenames.length; i++)\r\n                        url.push('https://viewer.shapediver.com/v2/envmaps/' + this._renderingEngine.environmentMapResolution + '/' + name_internal + '/' + this._environmentMapFilenames[i] + '.jpg');\r\n                }\r\n                else if (name.startsWith('https://') || name.startsWith('http://')) {\r\n                    if (name.endsWith('.hdr')) {\r\n                        this._environmentMapHDR.push(name);\r\n                        return this.loadEnvironmentMap(name_caching, name, eventId);\r\n                    }\r\n                    else {\r\n                        if (!name.endsWith('/'))\r\n                            name += '/';\r\n                        for (i = 0; i < this._environmentMapFilenames.length; i++)\r\n                            url.push(name + this._environmentMapFilenames[i] + '.jpg');\r\n                    }\r\n                }\r\n                else {\r\n                    this.notify(eventId, true);\r\n                    throw new viewer_shared_services_1.ShapeDiverViewerEnvironmentMapError('EnvironmentMapLoader.load: Was not able to load environment map, format not supported.', name);\r\n                }\r\n            }\r\n            else {\r\n                url = name;\r\n            }\r\n            return this.loadEnvironmentMap(name_caching, url, eventId);\r\n        }\r\n        catch (e) {\r\n            this.notify(eventId, true);\r\n            throw e;\r\n        }\r\n    }\r\n    // #endregion Public Methods (4)\r\n    // #region Private Methods (4)\r\n    assignEnvironmentMap(name, type, eventId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (name in this._environmentMaps === false)\r\n                return;\r\n            this._type = type;\r\n            const map = yield this._environmentMaps[name].map;\r\n            this._renderingEngine.materialLoader.assignEnvironmentMap(map, type);\r\n            this._envMap = map;\r\n            this.notify(eventId);\r\n        });\r\n    }\r\n    assignTextureEncoding() {\r\n        for (const e in this._environmentMaps) {\r\n            if (this._environmentMaps[e]) {\r\n                if (this._environmentMaps[e].resolved === true) {\r\n                    this._environmentMaps[e].map.then(m => {\r\n                        if (m instanceof THREE.Texture) {\r\n                            m.dispose();\r\n                            m.colorSpace = this._textureEncoding;\r\n                            m.needsUpdate = true;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    loadEnvironmentMap(name, url, eventId) {\r\n        this._environmentMaps[name] = {\r\n            name,\r\n            type: !Array.isArray(url) ? ENVIRONMENT_MAP_TYPE.HDR : ENVIRONMENT_MAP_TYPE.LDR,\r\n            map: new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                try {\r\n                    if (!Array.isArray(url)) {\r\n                        const response = yield this._httpClient.get(url, undefined, true);\r\n                        const arrayBufferView = new Uint8Array(response.data);\r\n                        const blob = new Blob([arrayBufferView], { type: response.headers['content-type'] });\r\n                        const blobUrl = URL.createObjectURL(blob);\r\n                        new RGBELoader_1.RGBELoader().load(blobUrl, (texture) => {\r\n                            const map = this._pmremGenerator.fromEquirectangular(texture).texture;\r\n                            this._pmremGenerator.dispose();\r\n                            map;\r\n                            URL.revokeObjectURL(blobUrl);\r\n                            this._environmentMaps[name].resolved = true;\r\n                            resolve(map);\r\n                        }, () => { }, (error) => reject(error));\r\n                    }\r\n                    else {\r\n                        const promises = [];\r\n                        url.forEach(u => promises.push(this._httpClient.get(u, undefined, true)));\r\n                        const responses = yield Promise.all(promises);\r\n                        const urls = responses.map(response => {\r\n                            const arrayBufferView = new Uint8Array(response.data);\r\n                            const blob = new Blob([arrayBufferView], { type: response.headers['content-type'] });\r\n                            return URL.createObjectURL(blob);\r\n                        });\r\n                        new THREE.CubeTextureLoader().load(urls, (map) => {\r\n                            map.colorSpace = THREE.SRGBColorSpace;\r\n                            map.format = THREE.RGBAFormat;\r\n                            map.mapping = THREE.CubeReflectionMapping;\r\n                            urls.forEach(u => URL.revokeObjectURL(u));\r\n                            this._environmentMaps[name].resolved = true;\r\n                            resolve(map);\r\n                        }, () => { }, (error) => reject(error));\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    this.notify(eventId, true);\r\n                    throw e;\r\n                }\r\n            }))\r\n        };\r\n        return this._environmentMaps[name];\r\n    }\r\n    notify(eventId, failed = false) {\r\n        let event;\r\n        if (failed) {\r\n            event = { type: viewer_shared_types_1.TASK_TYPE.ENVIRONMENT_MAP_LOADING, id: eventId, progress: 1, status: 'Loading of EnvironmentMap failed' };\r\n            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, event);\r\n        }\r\n        else {\r\n            event = { type: viewer_shared_types_1.TASK_TYPE.ENVIRONMENT_MAP_LOADING, id: eventId, progress: 1, status: 'Loaded EnvironmentMap' };\r\n            if (this._stateEngine.viewportEngines[this._renderingEngine.id]) {\r\n                this._stateEngine.viewportEngines[this._renderingEngine.id].environmentMapLoaded.resolve(true);\r\n                this._stateEngine.viewportEngines[this._renderingEngine.id].environmentMapLoaded = new viewer_shared_services_1.StatePromise();\r\n            }\r\n            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, event);\r\n        }\r\n    }\r\n}\r\nexports.EnvironmentMapLoader = EnvironmentMapLoader;\r\n//# sourceMappingURL=EnvironmentMapLoader.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GeometryLoader = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nconst viewer_shared_types_1 = require(\"@shapediver/viewer.shared.types\");\r\nconst GemMaterial_1 = require(\"../materials/GemMaterial\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst viewer_rendering_engine_rendering_engine_1 = require(\"@shapediver/viewer.rendering-engine.rendering-engine\");\r\nconst SDData_1 = require(\"../objects/SDData\");\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nclass GeometryLoader {\r\n    // #endregion Properties (8)\r\n    // #region Constructors (1)\r\n    constructor(_renderingEngine) {\r\n        this._renderingEngine = _renderingEngine;\r\n        this._gemSphericalMapsCache = {};\r\n        this._geometryCache = {};\r\n        this._logger = viewer_shared_services_1.Logger.instance;\r\n        this._primitiveCache = {};\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (6)\r\n    emptyGeometryCache() {\r\n        for (const key in this._geometryCache)\r\n            this.removeFromGeometryCache(key);\r\n        this._geometryCache = {};\r\n        for (const key in this._primitiveCache)\r\n            this.removeFromPrimitiveCache(key);\r\n        this._primitiveCache = {};\r\n    }\r\n    init() { }\r\n    /**\r\n     * Create a geometry object with the provided geometry data.\r\n     *\r\n     * @param geometry the geometry data\r\n     * @returns the geometry object\r\n     */\r\n    load(geometry, parent, newChild, skeleton) {\r\n        const threeGeometry = (() => {\r\n            if (!this._primitiveCache[geometry.primitive.id + '_' + geometry.primitive.version]) {\r\n                return this.loadPrimitive(geometry.primitive);\r\n            }\r\n            else {\r\n                this._primitiveCache[geometry.primitive.id + '_' + geometry.primitive.version].counter++;\r\n                const clone = this._primitiveCache[geometry.primitive.id + '_' + geometry.primitive.version].threeGeometry.clone();\r\n                this._primitiveCache[geometry.primitive.id + '_' + geometry.primitive.version].clones.push(clone);\r\n                return clone;\r\n            }\r\n        })();\r\n        let incomingMaterialData;\r\n        if (geometry.effectMaterials.length > 0) {\r\n            incomingMaterialData = geometry.effectMaterials[geometry.effectMaterials.length - 1].material;\r\n        }\r\n        else if (this._renderingEngine.type === viewer_rendering_engine_rendering_engine_1.RENDERER_TYPE.ATTRIBUTES) {\r\n            incomingMaterialData = geometry.attributeMaterial;\r\n        }\r\n        else {\r\n            incomingMaterialData = geometry.material;\r\n        }\r\n        const materialSettings = {\r\n            mode: geometry.mode,\r\n            useVertexTangents: threeGeometry.attributes.tangent !== undefined,\r\n            useVertexColors: threeGeometry.attributes.color !== undefined && this._renderingEngine.type !== viewer_rendering_engine_rendering_engine_1.RENDERER_TYPE.ATTRIBUTES,\r\n            useFlatShading: threeGeometry.attributes.normal === undefined,\r\n            useMorphTargets: Object.keys(threeGeometry.morphAttributes).length > 0,\r\n            useMorphNormals: Object.keys(threeGeometry.morphAttributes).length > 0 && threeGeometry.morphAttributes.normal !== undefined\r\n        };\r\n        if (incomingMaterialData instanceof viewer_shared_types_1.MaterialGemData) {\r\n            const gemMaterialData = incomingMaterialData;\r\n            threeGeometry.computeBoundingSphere();\r\n            const sphericalNormalMap = this.createCubeNormalMap(geometry, threeGeometry);\r\n            const center = threeGeometry.boundingSphere.center, radius = threeGeometry.boundingSphere.radius;\r\n            gemMaterialData.side = viewer_shared_types_1.MATERIAL_SIDE.FRONT;\r\n            gemMaterialData.center = gl_matrix_1.vec3.fromValues(center.x, center.y, center.z);\r\n            gemMaterialData.radius = radius;\r\n            gemMaterialData.sphericalNormalMap = sphericalNormalMap;\r\n        }\r\n        while (parent.children.length !== 0)\r\n            parent.remove(parent.children[0]);\r\n        const material = this._renderingEngine.materialLoader.load(incomingMaterialData || geometry, materialSettings);\r\n        let obj;\r\n        if (this._geometryCache[geometry.id + '_' + geometry.version] && !skeleton) {\r\n            this._geometryCache[geometry.id + '_' + geometry.version].counter++;\r\n            obj = this._geometryCache[geometry.id + '_' + geometry.version].obj;\r\n            // case 1: in case the geometry data was cloned and this is a different object\r\n            // case 2: it is a new child\r\n            if (newChild === false && obj.parent !== parent || newChild === true) {\r\n                obj = obj.cloneObject();\r\n                this._geometryCache[geometry.id + '_' + geometry.version].clones.push(obj);\r\n                parent.add(obj);\r\n            }\r\n            obj.traverse(o => {\r\n                if (o instanceof THREE.Points ||\r\n                    o instanceof THREE.LineSegments ||\r\n                    o instanceof THREE.LineLoop ||\r\n                    o instanceof THREE.Line ||\r\n                    o instanceof THREE.Mesh)\r\n                    o.material = material;\r\n            });\r\n        }\r\n        else {\r\n            obj = new SDData_1.SDData(geometry.id, geometry.version);\r\n            this.createMesh(obj, geometry, threeGeometry, material, skeleton);\r\n            this._geometryCache[geometry.id + '_' + geometry.version] = { obj, counter: 1, clones: [], primitiveCacheId: geometry.primitive.id + '_' + geometry.primitive.version };\r\n            parent.add(obj);\r\n        }\r\n        obj.children.forEach(m => m.castShadow = true);\r\n        if (material instanceof GemMaterial_1.GemMaterial) {\r\n            obj.children.forEach(m => m.receiveShadow = false);\r\n        }\r\n        else {\r\n            obj.children.forEach(m => m.receiveShadow = true);\r\n        }\r\n        return geometry.boundingBox.clone();\r\n    }\r\n    loadPrimitive(primitive) {\r\n        const geometry = new THREE.BufferGeometry();\r\n        if (primitive.indices)\r\n            geometry.setIndex(new THREE.BufferAttribute(primitive.indices.array, primitive.indices.itemSize));\r\n        for (const attributeId in primitive.attributes) {\r\n            const buffer = this.loadAttribute(primitive.attributes[attributeId], attributeId);\r\n            const attributeName = this.getAttributeName(attributeId);\r\n            if (attributeId === 'NORMAL')\r\n                if (this.checkNormals(primitive, attributeId, buffer, geometry))\r\n                    continue;\r\n            geometry.setAttribute(attributeName, buffer);\r\n            const morphAttributeData = primitive.attributes[attributeId].morphAttributeData;\r\n            if (morphAttributeData.length > 0) {\r\n                geometry.morphTargetsRelative = true;\r\n                const buffers = [];\r\n                for (let i = 0; i < morphAttributeData.length; i++)\r\n                    buffers.push(this.loadAttribute(morphAttributeData[i], attributeId));\r\n                geometry.morphAttributes[attributeName] = buffers;\r\n            }\r\n            // we copy the uv coordinates into the second set of uv coordinates if there are none\r\n            // this allows for the usage of AO and light maps that share this coordinate set\r\n            const attributeIdUV2 = 'TEXCOORD_1', attributeNameUV2 = 'uv1';\r\n            if (attributeName === 'uv' && !primitive.attributes[attributeIdUV2]) {\r\n                geometry.setAttribute(attributeNameUV2, buffer);\r\n                const morphAttributeData = primitive.attributes[attributeId].morphAttributeData;\r\n                if (morphAttributeData.length > 0) {\r\n                    geometry.morphTargetsRelative = true;\r\n                    const buffers = [];\r\n                    for (let i = 0; i < morphAttributeData.length; i++)\r\n                        buffers.push(this.loadAttribute(morphAttributeData[i], attributeId));\r\n                    geometry.morphAttributes[attributeNameUV2] = buffers;\r\n                }\r\n            }\r\n        }\r\n        primitive.convertedObject[this._renderingEngine.id] = geometry;\r\n        this._primitiveCache[primitive.id + '_' + primitive.version] = { threeGeometry: geometry, counter: 1, clones: [] };\r\n        return geometry;\r\n    }\r\n    removeFromGemSphericalMapsCache(id) {\r\n        if (this._gemSphericalMapsCache[id]) {\r\n            if (this._gemSphericalMapsCache[id].counter === 1) {\r\n                this._gemSphericalMapsCache[id].renderTarget.dispose();\r\n                this._gemSphericalMapsCache[id].texture.dispose();\r\n                delete this._gemSphericalMapsCache[id];\r\n            }\r\n            else {\r\n                this._gemSphericalMapsCache[id].counter--;\r\n            }\r\n        }\r\n    }\r\n    removeFromGeometryCache(id) {\r\n        if (this._geometryCache[id]) {\r\n            if (this._geometryCache[id].counter === 1) {\r\n                this.removeFromPrimitiveCache(this._geometryCache[id].primitiveCacheId);\r\n                this._geometryCache[id].clones.forEach(c => {\r\n                    this.removeFromPrimitiveCache(this._geometryCache[id].primitiveCacheId);\r\n                });\r\n                delete this._geometryCache[id];\r\n            }\r\n            else {\r\n                this._geometryCache[id].counter--;\r\n            }\r\n        }\r\n    }\r\n    // #endregion Public Methods (6)\r\n    // #region Private Methods (7)\r\n    checkNormals(primitive, attributeId, buffer, geometry) {\r\n        let blnNormalsOk = false;\r\n        for (let index = 0; index < 10; ++index) {\r\n            if (Math.abs(buffer.array[index * 3]) > 0.001) {\r\n                blnNormalsOk = true;\r\n                break;\r\n            }\r\n            if (Math.abs(buffer.array[index * 3 + 1]) > 0.001) {\r\n                blnNormalsOk = true;\r\n                break;\r\n            }\r\n            if (Math.abs(buffer.array[index * 3 + 2]) > 0.001) {\r\n                blnNormalsOk = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!blnNormalsOk) {\r\n            geometry.computeVertexNormals();\r\n            const computedNormalAttribute = geometry.getAttribute('normal');\r\n            // store the computed normals in the attribute data\r\n            primitive.attributes[attributeId] = new viewer_shared_types_1.AttributeData(new Float32Array(computedNormalAttribute.array), computedNormalAttribute.itemSize, 0, 0, 3, computedNormalAttribute.normalized, computedNormalAttribute.array.length / 3);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    convertToTriangleMode(geometry, drawMode) {\r\n        let index = geometry.getIndex();\r\n        // generate index if not present\r\n        if (index === null) {\r\n            const indices = [];\r\n            const position = geometry.getAttribute('position');\r\n            if (position !== undefined) {\r\n                for (let i = 0; i < position.count; i++)\r\n                    indices.push(i);\r\n                geometry.setIndex(indices);\r\n                index = geometry.getIndex();\r\n            }\r\n            else {\r\n                throw new viewer_shared_services_1.ShapeDiverViewerDataProcessingError('GeometryLoader.convertToTriangleMode: Undefined position attribute. Processing not possible.');\r\n            }\r\n        }\r\n        if (index === null)\r\n            throw new viewer_shared_services_1.ShapeDiverViewerDataProcessingError('GeometryLoader.convertToTriangleMode: Undefined index. Processing not possible.');\r\n        const numberOfTriangles = index.count - 2;\r\n        const newIndices = [];\r\n        if (drawMode === viewer_shared_types_1.PRIMITIVE_MODE.TRIANGLE_FAN) {\r\n            for (let i = 1; i <= numberOfTriangles; i++) {\r\n                newIndices.push(index.getX(0));\r\n                newIndices.push(index.getX(i));\r\n                newIndices.push(index.getX(i + 1));\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < numberOfTriangles; i++) {\r\n                if (i % 2 === 0) {\r\n                    newIndices.push(index.getX(i));\r\n                    newIndices.push(index.getX(i + 1));\r\n                    newIndices.push(index.getX(i + 2));\r\n                }\r\n                else {\r\n                    newIndices.push(index.getX(i + 2));\r\n                    newIndices.push(index.getX(i + 1));\r\n                    newIndices.push(index.getX(i));\r\n                }\r\n            }\r\n        }\r\n        if ((newIndices.length / 3) !== numberOfTriangles)\r\n            throw new viewer_shared_services_1.ShapeDiverViewerDataProcessingError('GeometryLoader.convertToTriangleMode: Unable to generate correct amount of triangle.');\r\n        geometry.setIndex(newIndices);\r\n    }\r\n    createCubeNormalMap(geometryData, geometry, resolution = 1024) {\r\n        if (this._gemSphericalMapsCache[geometryData.primitive.id + '_' + geometryData.primitive.version]) {\r\n            this._gemSphericalMapsCache[geometryData.primitive.id + '_' + geometryData.primitive.version].counter++;\r\n            return this._gemSphericalMapsCache[geometryData.primitive.id + '_' + geometryData.primitive.version].texture;\r\n        }\r\n        if (!this._gemScene) {\r\n            this._gemScene = new THREE.Scene();\r\n            this._gemCubeCameraRenderTarget = new THREE.WebGLCubeRenderTarget(resolution, { format: THREE.RGBAFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter });\r\n            this._gemCubeCameraRenderTarget.texture.generateMipmaps = false;\r\n            this._gemCubeCameraRenderTarget.texture.minFilter = THREE.NearestFilter;\r\n            this._gemCubeCameraRenderTarget.texture.magFilter = THREE.NearestFilter;\r\n            this._gemCubeCameraRenderTarget.texture.format = THREE.RGBAFormat;\r\n            this._gemCubeCamera = new THREE.CubeCamera(0.001, 10000, this._gemCubeCameraRenderTarget);\r\n            this._gemScene.add(this._gemCubeCamera);\r\n        }\r\n        else {\r\n            this._gemCubeCameraRenderTarget = new THREE.WebGLCubeRenderTarget(resolution, { format: THREE.RGBAFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter });\r\n            this._gemCubeCameraRenderTarget.texture.generateMipmaps = false;\r\n            this._gemCubeCameraRenderTarget.texture.minFilter = THREE.NearestFilter;\r\n            this._gemCubeCameraRenderTarget.texture.magFilter = THREE.NearestFilter;\r\n            this._gemCubeCameraRenderTarget.texture.format = THREE.RGBAFormat;\r\n            this._gemCubeCamera.renderTarget = this._gemCubeCameraRenderTarget;\r\n        }\r\n        if (!this._gemNormalMaterial) {\r\n            const _normalShader = {\r\n                defines: {},\r\n                uniforms: THREE.UniformsUtils.merge([\r\n                    THREE.UniformsLib.common\r\n                ]),\r\n                vertexShader: `\r\n                varying vec3 vNormal;\r\n\r\n                void main() {\r\n                  vNormal = normal;\r\n                  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n                }\r\n                `,\r\n                fragmentShader: `\r\n                varying highp vec3 vNormal;\r\n\r\n                float decodeFloat(float f) {\r\n                    float r = mod(f, 1.0/255.0);\r\n                    return /*r > 0.5/256.0 ? f + (1.0/256.0) - r : */f - r;\r\n                }\r\n                \r\n                vec3 decodeVec3(vec3 v) {\r\n                    return vec3(decodeFloat(v.x), decodeFloat(v.y), decodeFloat(v.z));\r\n                }\r\n                \r\n                float signEncoding(vec3 v) {\r\n                    float code = 1.0;\r\n                     if(v.x < 0.0 && v.y < 0.0 && v.z < 0.0) {\r\n                        code = 0.0;\r\n                    } else if (v.x < 0.0 && v.y < 0.0) {\r\n                        code = 2.0/256.0;\r\n                    } else if (v.x < 0.0 && v.z < 0.0) {\r\n                        code = 4.0/256.0;\r\n                    } else if (v.y < 0.0 && v.z < 0.0) {\r\n                        code = 6.0/256.0;\r\n                    } else if (v.x < 0.0) {\r\n                        code = 8.0/256.0;\r\n                    } else if (v.y < 0.0) {\r\n                        code = 10.0/256.0;\r\n                    } else if (v.z < 0.0) {\r\n                        code = 12.0/256.0;\r\n                    }\r\n                    return code;\r\n                }\r\n                \r\n                void main() {\r\n                    vec3 n = normalize(vNormal);\r\n                    gl_FragColor = vec4(decodeVec3(abs(n)), signEncoding(n));\r\n                }\r\n                `\r\n            };\r\n            this._gemNormalMaterial = new THREE.ShaderMaterial({\r\n                uniforms: THREE.UniformsUtils.clone(_normalShader.uniforms),\r\n                defines: _normalShader.defines,\r\n                vertexShader: _normalShader.vertexShader,\r\n                fragmentShader: _normalShader.fragmentShader\r\n            });\r\n            this._gemNormalMaterial.blending = THREE.NoBlending;\r\n            this._gemNormalMaterial.side = THREE.DoubleSide;\r\n            this._gemScene.overrideMaterial = this._gemNormalMaterial;\r\n        }\r\n        const mesh = new THREE.Mesh(geometry.clone(), this._gemNormalMaterial);\r\n        mesh.geometry.center();\r\n        this._gemScene.add(mesh);\r\n        this._gemCubeCamera.update(this._renderingEngine.renderer, this._gemScene);\r\n        this._gemScene.remove(mesh);\r\n        mesh.geometry.dispose();\r\n        mesh.material.dispose();\r\n        this._gemCubeCamera.renderTarget.texture.userData = {\r\n            SDid: geometryData.primitive.id,\r\n            SDversion: geometryData.primitive.version\r\n        };\r\n        this._gemSphericalMapsCache[geometryData.primitive.id + '_' + geometryData.primitive.version] = { texture: this._gemCubeCameraRenderTarget.texture, renderTarget: this._gemCubeCameraRenderTarget, counter: 1 };\r\n        return this._gemSphericalMapsCache[geometryData.primitive.id + '_' + geometryData.primitive.version].texture;\r\n    }\r\n    createMesh(obj, geometry, threeGeometry, material, skeleton) {\r\n        if (geometry.mode === viewer_shared_types_1.PRIMITIVE_MODE.POINTS) {\r\n            const points = new THREE.Points(threeGeometry, material);\r\n            geometry.convertedObject[this._renderingEngine.id] = points;\r\n            obj.add(points);\r\n        }\r\n        else if (geometry.mode === viewer_shared_types_1.PRIMITIVE_MODE.LINES) {\r\n            const lineSegments = new THREE.LineSegments(threeGeometry, material);\r\n            geometry.convertedObject[this._renderingEngine.id] = lineSegments;\r\n            obj.add(lineSegments);\r\n        }\r\n        else if (geometry.mode === viewer_shared_types_1.PRIMITIVE_MODE.LINE_LOOP) {\r\n            const lineLoop = new THREE.LineLoop(threeGeometry, material);\r\n            geometry.convertedObject[this._renderingEngine.id] = lineLoop;\r\n            obj.add(lineLoop);\r\n        }\r\n        else if (geometry.mode === viewer_shared_types_1.PRIMITIVE_MODE.LINE_STRIP) {\r\n            const line = new THREE.Line(threeGeometry, material);\r\n            geometry.convertedObject[this._renderingEngine.id] = line;\r\n            obj.add(line);\r\n        }\r\n        else if (geometry.mode === viewer_shared_types_1.PRIMITIVE_MODE.TRIANGLES || geometry.mode === viewer_shared_types_1.PRIMITIVE_MODE.TRIANGLE_STRIP || geometry.mode === viewer_shared_types_1.PRIMITIVE_MODE.TRIANGLE_FAN) {\r\n            const bufferGeometry = threeGeometry;\r\n            if (geometry.mode === viewer_shared_types_1.PRIMITIVE_MODE.TRIANGLE_STRIP || geometry.mode === viewer_shared_types_1.PRIMITIVE_MODE.TRIANGLE_FAN)\r\n                this.convertToTriangleMode(bufferGeometry, geometry.mode);\r\n            if (skeleton) {\r\n                const skinnedMesh = new THREE.SkinnedMesh(bufferGeometry, material);\r\n                geometry.convertedObject[this._renderingEngine.id] = skinnedMesh;\r\n                skinnedMesh.bind(skeleton, skinnedMesh.matrixWorld);\r\n                if (bufferGeometry.attributes.skinWeight.normalized)\r\n                    skinnedMesh.normalizeSkinWeights();\r\n                obj.add(skinnedMesh);\r\n            }\r\n            else {\r\n                const mesh = new THREE.Mesh(bufferGeometry, material);\r\n                geometry.convertedObject[this._renderingEngine.id] = mesh;\r\n                obj.add(mesh);\r\n            }\r\n        }\r\n        else {\r\n            throw new viewer_shared_services_1.ShapeDiverViewerDataProcessingError(`GeometryLoader.load: Unrecognized primitive mode ${geometry.mode}.`);\r\n        }\r\n        obj.traverse(m => {\r\n            if (m instanceof THREE.Mesh || m instanceof THREE.Points || m instanceof THREE.LineSegments || m instanceof THREE.LineLoop || m instanceof THREE.Line) {\r\n                m.geometry.userData = {\r\n                    SDid: geometry.id,\r\n                    SDversion: geometry.version,\r\n                    primitiveSDid: geometry.primitive.id,\r\n                    primitiveSDversion: geometry.primitive.version\r\n                };\r\n                m.renderOrder = geometry.renderOrder;\r\n            }\r\n            if (m instanceof THREE.Mesh && m.userData.transparencyPlaceholder !== true) {\r\n                m.geometry.boundingBox = new THREE.Box3(new THREE.Vector3(geometry.boundingBox.min[0], geometry.boundingBox.min[1], geometry.boundingBox.min[2]), new THREE.Vector3(geometry.boundingBox.max[0], geometry.boundingBox.max[1], geometry.boundingBox.max[2]));\r\n                m.geometry.boundingSphere = new THREE.Sphere(new THREE.Vector3(geometry.boundingBox.boundingSphere.center[0], geometry.boundingBox.boundingSphere.center[1], geometry.boundingBox.boundingSphere.center[2]), geometry.boundingBox.boundingSphere.radius);\r\n                m.morphTargetInfluences = geometry.morphWeights;\r\n            }\r\n        });\r\n    }\r\n    getAttributeName(attributeId) {\r\n        switch (attributeId) {\r\n            case 'POSITION':\r\n                return 'position';\r\n            case 'NORMAL':\r\n                return 'normal';\r\n            case 'TEXCOORD_0':\r\n            case 'TEXCOORD0':\r\n            case 'TEXCOORD':\r\n            case 'UV':\r\n                return 'uv';\r\n            case 'TEXCOORD_1':\r\n                return 'uv1';\r\n            case 'TEXCOORD_2':\r\n                return 'uv2';\r\n            case 'TEXCOORD_3':\r\n                return 'uv3';\r\n            case 'COLOR_0':\r\n            case 'COLOR0':\r\n            case 'COLOR':\r\n                return 'color';\r\n            case 'WEIGHT':\r\n            case 'WEIGHTS_0':\r\n                return 'skinWeight';\r\n            case 'JOINT':\r\n            case 'JOINTS_0':\r\n                return 'skinIndex';\r\n            case 'TANGENT':\r\n                return 'tangent';\r\n            case 'POSITION_INDEX':\r\n                return 'positionIndex';\r\n            default:\r\n                this._logger.warn(`GeometryLoader.loadPrimitive: Unrecognized attribute id ${attributeId}.`);\r\n        }\r\n        return '';\r\n    }\r\n    loadAttribute(bufferAttribute, attributeId) {\r\n        let buffer;\r\n        if (bufferAttribute.byteStride && bufferAttribute.byteStride !== bufferAttribute.itemBytes) {\r\n            // Integer parameters to IB/IBA are in array elements, not bytes.\r\n            const ib = new THREE.InterleavedBuffer(bufferAttribute.array, bufferAttribute.byteStride / bufferAttribute.elementBytes);\r\n            buffer = new THREE.InterleavedBufferAttribute(ib, bufferAttribute.itemSize, (bufferAttribute.byteOffset % bufferAttribute.byteStride) / bufferAttribute.elementBytes, bufferAttribute.normalized);\r\n        }\r\n        else {\r\n            buffer = new THREE.BufferAttribute(bufferAttribute.array, bufferAttribute.itemSize, (attributeId === 'COLOR_0' || attributeId === 'COLOR0' || attributeId === 'COLOR') ? true : bufferAttribute.normalized);\r\n        }\r\n        if (bufferAttribute.sparse) {\r\n            if (bufferAttribute.array !== null) {\r\n                // Avoid modifying the original ArrayBuffer, if the bufferView wasn't initialized with zeroes.\r\n                buffer = new THREE.BufferAttribute(bufferAttribute.array.slice(), bufferAttribute.itemSize, bufferAttribute.normalized);\r\n            }\r\n            for (let i = 0, il = bufferAttribute.sparseIndices.length; i < il; i++) {\r\n                const index = bufferAttribute.sparseIndices[i];\r\n                buffer.setX(index, bufferAttribute.sparseValues[i * bufferAttribute.itemSize]);\r\n                if (bufferAttribute.itemSize >= 2)\r\n                    buffer.setY(index, bufferAttribute.sparseValues[i * bufferAttribute.itemSize + 1]);\r\n                if (bufferAttribute.itemSize >= 3)\r\n                    buffer.setZ(index, bufferAttribute.sparseValues[i * bufferAttribute.itemSize + 2]);\r\n                if (bufferAttribute.itemSize >= 4)\r\n                    buffer.setW(index, bufferAttribute.sparseValues[i * bufferAttribute.itemSize + 3]);\r\n                if (bufferAttribute.itemSize >= 5)\r\n                    throw new viewer_shared_services_1.ShapeDiverViewerDataProcessingError('GeometryLoader.loadPrimitive: Unsupported itemSize in sparse BufferAttribute.');\r\n            }\r\n        }\r\n        return buffer;\r\n    }\r\n    removeFromPrimitiveCache(id) {\r\n        if (this._primitiveCache[id]) {\r\n            if (this._primitiveCache[id].counter === 1) {\r\n                this._primitiveCache[id].threeGeometry.dispose();\r\n                for (const key in this._primitiveCache[id].threeGeometry.attributes)\r\n                    this._primitiveCache[id].threeGeometry.deleteAttribute(key);\r\n                this._primitiveCache[id].threeGeometry.setIndex(null);\r\n                this._primitiveCache[id].clones.forEach(c => {\r\n                    c.dispose();\r\n                    for (const key in c.attributes)\r\n                        c.deleteAttribute(key);\r\n                    c.setIndex(null);\r\n                });\r\n                delete this._primitiveCache[id];\r\n            }\r\n            else {\r\n                this._primitiveCache[id].counter--;\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.GeometryLoader = GeometryLoader;\r\n//# sourceMappingURL=GeometryLoader.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.HTMLElementAnchorLoader = void 0;\r\nconst viewer_rendering_engine_rendering_engine_1 = require(\"@shapediver/viewer.rendering-engine.rendering-engine\");\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nclass HTMLElementAnchorLoader {\r\n    // #endregion Properties (2)\r\n    // #region Constructors (1)\r\n    constructor(_renderingEngine) {\r\n        this._renderingEngine = _renderingEngine;\r\n        // #region Properties (2)\r\n        this._htmlElements = {};\r\n        this._parentDiv = document.createElement('div');\r\n        this._parentDiv.classList.add('sdv-anchor-container');\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Getters And Setters (1)\r\n    get parentDiv() {\r\n        return this._parentDiv;\r\n    }\r\n    // #endregion Public Getters And Setters (1)\r\n    // #region Public Methods (5)\r\n    adjustPositions(scaleWidth, scaleHeight) {\r\n        for (const anchorId in this._htmlElements) {\r\n            const anchor = this._htmlElements[anchorId].anchor;\r\n            const { page, container, client, hidden } = this._renderingEngine.sceneTracingManager.convert3Dto2D(gl_matrix_1.vec3.clone(anchor.location));\r\n            const htmlElement = anchor.createViewerHtmlElement(this._renderingEngine.id);\r\n            if (!htmlElement)\r\n                continue;\r\n            let node = this._htmlElements[anchorId].node;\r\n            let visible = node.visible;\r\n            while (node.parent) {\r\n                node = node.parent;\r\n                visible = node.visible && visible;\r\n            }\r\n            if (this._renderingEngine.show === false)\r\n                visible = false;\r\n            anchor.update({ anchor, htmlElement, page, container, client, scale: gl_matrix_1.vec2.fromValues(scaleWidth, scaleHeight), hidden, visible });\r\n        }\r\n    }\r\n    init() {\r\n        var _a;\r\n        (_a = this._renderingEngine.canvas.parentNode) === null || _a === void 0 ? void 0 : _a.appendChild(this._parentDiv);\r\n    }\r\n    load(node, anchor, isVisibleInHierarchy) {\r\n        const htmlElement = anchor.createViewerHtmlElement(this._renderingEngine.id);\r\n        if (!htmlElement)\r\n            return;\r\n        // set the display property to \"none\" if the viewport is not shown or the node is not visible\r\n        if (this._renderingEngine.show === false || isVisibleInHierarchy === false)\r\n            htmlElement.style.display = 'none';\r\n        // if the node is not visible return\r\n        if (isVisibleInHierarchy === false)\r\n            return;\r\n        this._parentDiv.appendChild(htmlElement);\r\n        this._htmlElements[anchor.id + '_' + anchor.version] = {\r\n            node,\r\n            anchor\r\n        };\r\n    }\r\n    removeData(id, version) {\r\n        // since the data object might be there, but no data is loaded for this viewport\r\n        // this check is needed\r\n        if (!this._htmlElements[id + '_' + version])\r\n            return;\r\n        const anchor = this._htmlElements[id + '_' + version].anchor;\r\n        if (anchor && anchor.getViewerHtmlElement(this._renderingEngine.id)) {\r\n            this._parentDiv.removeChild(anchor.getViewerHtmlElement(this._renderingEngine.id));\r\n            delete this._htmlElements[id + '_' + version];\r\n        }\r\n    }\r\n    toggleBusyMode(toggle) {\r\n        if (toggle && this._renderingEngine.busyModeDisplay === viewer_rendering_engine_rendering_engine_1.BUSY_MODE_DISPLAY.BLUR) {\r\n            if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1 && navigator.userAgent.toLowerCase().indexOf('android') > -1)\r\n                return;\r\n            this._parentDiv.style.filter = 'blur(3px)';\r\n        }\r\n        else {\r\n            this._parentDiv.style.filter = '';\r\n        }\r\n    }\r\n}\r\nexports.HTMLElementAnchorLoader = HTMLElementAnchorLoader;\r\n//# sourceMappingURL=HTMLElementAnchorLoader.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LightLoader = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nconst viewer_rendering_engine_light_engine_1 = require(\"@shapediver/viewer.rendering-engine.light-engine\");\r\nclass LightLoader {\r\n    // #endregion Properties (3)\r\n    // #region Constructors (1)\r\n    constructor(_renderingEngine) {\r\n        this._renderingEngine = _renderingEngine;\r\n        // #region Properties (3)\r\n        this._forceDisabledShadows = false;\r\n        this._shadowMapCount = 0;\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Getters And Setters (4)\r\n    get forceDisabledShadows() {\r\n        return this._forceDisabledShadows;\r\n    }\r\n    set forceDisabledShadows(value) {\r\n        this._forceDisabledShadows = value;\r\n    }\r\n    get shadowMapCount() {\r\n        return this._shadowMapCount;\r\n    }\r\n    set shadowMapCount(value) {\r\n        this._shadowMapCount = value;\r\n    }\r\n    // #endregion Public Getters And Setters (4)\r\n    // #region Public Methods (3)\r\n    adjustToBoundingBox(light, dataChild, boundingBox) {\r\n        const threeLight = dataChild.children[0];\r\n        if (light instanceof viewer_rendering_engine_light_engine_1.DirectionalLight) {\r\n            const threeDirectionalLight = threeLight;\r\n            const bs = boundingBox.boundingSphere;\r\n            threeDirectionalLight.position.set(bs.center[0] + light.direction[0] * bs.radius * 2.35, bs.center[1] + light.direction[1] * bs.radius * 2.35, bs.center[2] + light.direction[2] * bs.radius * 2.35);\r\n            threeDirectionalLight.target.position.set(bs.center[0], bs.center[1], bs.center[2]);\r\n            if (light.castShadow === true && this.forceDisabledShadows === false) {\r\n                threeDirectionalLight.castShadow = true;\r\n                threeDirectionalLight.shadow.camera.up.set(0, 0, 1);\r\n                threeDirectionalLight.shadow.camera.far = 8 * bs.radius;\r\n                threeDirectionalLight.shadow.camera.right = 1.5 * bs.radius;\r\n                threeDirectionalLight.shadow.camera.left = -1.5 * bs.radius;\r\n                threeDirectionalLight.shadow.camera.top = 1.5 * bs.radius;\r\n                threeDirectionalLight.shadow.camera.bottom = -1.5 * bs.radius;\r\n                threeDirectionalLight.shadow.mapSize.width = light.shadowMapResolution;\r\n                threeDirectionalLight.shadow.mapSize.height = light.shadowMapResolution;\r\n                threeDirectionalLight.shadow.bias = light.shadowMapBias;\r\n                threeDirectionalLight.shadow.camera.updateProjectionMatrix();\r\n                this._shadowMapCount++;\r\n            }\r\n            else {\r\n                threeDirectionalLight.castShadow = false;\r\n            }\r\n        }\r\n    }\r\n    init() { }\r\n    load(light, dataChild) {\r\n        let threeLight = dataChild.children[0] instanceof THREE.Light ? dataChild.children[0] : null;\r\n        if (light instanceof viewer_rendering_engine_light_engine_1.AmbientLight) {\r\n            if (!threeLight) {\r\n                threeLight = new THREE.AmbientLight();\r\n                light.convertedObject[this._renderingEngine.id] = threeLight;\r\n                dataChild.add(threeLight);\r\n            }\r\n            const threeAmbientLight = threeLight;\r\n            threeAmbientLight.color = this._renderingEngine.createThreeJsColor(light.color);\r\n            threeAmbientLight.intensity = light.intensity;\r\n        }\r\n        if (light instanceof viewer_rendering_engine_light_engine_1.DirectionalLight) {\r\n            if (!threeLight) {\r\n                threeLight = new THREE.DirectionalLight();\r\n                dataChild.add(threeLight);\r\n                dataChild.add(threeLight.target);\r\n                light.convertedObject[this._renderingEngine.id] = threeLight;\r\n            }\r\n            const threeDirectionalLight = threeLight;\r\n            threeDirectionalLight.color = this._renderingEngine.createThreeJsColor(light.color);\r\n            threeDirectionalLight.intensity = light.intensity;\r\n            if (light.useNodeData) {\r\n                threeDirectionalLight.position.set(0, 0, 0);\r\n                threeDirectionalLight.target.position.set(0, 0, -1);\r\n            }\r\n        }\r\n        if (light instanceof viewer_rendering_engine_light_engine_1.HemisphereLight) {\r\n            if (!threeLight) {\r\n                threeLight = new THREE.HemisphereLight();\r\n                dataChild.add(threeLight);\r\n                light.convertedObject[this._renderingEngine.id] = threeLight;\r\n            }\r\n            const threeHemisphereLight = threeLight;\r\n            threeHemisphereLight.color = this._renderingEngine.createThreeJsColor(light.color);\r\n            threeHemisphereLight.intensity = light.intensity;\r\n            threeHemisphereLight.groundColor = this._renderingEngine.createThreeJsColor(light.groundColor);\r\n        }\r\n        if (light instanceof viewer_rendering_engine_light_engine_1.PointLight) {\r\n            if (!threeLight) {\r\n                threeLight = new THREE.PointLight();\r\n                dataChild.add(threeLight);\r\n                light.convertedObject[this._renderingEngine.id] = threeLight;\r\n            }\r\n            const threePointLight = threeLight;\r\n            threePointLight.color = this._renderingEngine.createThreeJsColor(light.color);\r\n            threePointLight.intensity = light.intensity;\r\n            threePointLight.distance = light.distance;\r\n            threePointLight.decay = light.decay;\r\n            threePointLight.position.set(light.position[0], light.position[1], light.position[2]);\r\n        }\r\n        if (light instanceof viewer_rendering_engine_light_engine_1.SpotLight) {\r\n            if (!threeLight) {\r\n                threeLight = new THREE.SpotLight(this._renderingEngine.createThreeJsColor(light.color), light.intensity, light.distance, light.angle, light.penumbra, light.decay);\r\n                dataChild.add(threeLight);\r\n                dataChild.add(threeLight.target);\r\n                light.convertedObject[this._renderingEngine.id] = threeLight;\r\n            }\r\n            const threeSpotLight = threeLight;\r\n            threeSpotLight.color = this._renderingEngine.createThreeJsColor(light.color);\r\n            threeSpotLight.intensity = light.intensity;\r\n            threeSpotLight.distance = light.distance;\r\n            threeSpotLight.angle = light.angle;\r\n            threeSpotLight.penumbra = light.penumbra;\r\n            threeSpotLight.decay = light.decay;\r\n            threeSpotLight.position.set(light.position[0], light.position[1], light.position[2]);\r\n            threeSpotLight.target.position.set(light.target[0], light.target[1], light.target[2]);\r\n        }\r\n    }\r\n}\r\nexports.LightLoader = LightLoader;\r\n//# sourceMappingURL=LightLoader.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.adaptShaders = exports.MATERIAL_TYPE = exports.MaterialLoader = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst PCSS_1 = require(\"../shaders/PCSS\");\r\nconst EnvironmentMapLoader_1 = require(\"./EnvironmentMapLoader\");\r\nconst GemMaterial_1 = require(\"../materials/GemMaterial\");\r\nconst viewer_shared_types_1 = require(\"@shapediver/viewer.shared.types\");\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst MultiPointsMaterial_1 = require(\"../materials/MultiPointsMaterial\");\r\nconst SDColor_1 = require(\"../objects/SDColor\");\r\nconst SpecularGlossinessMaterial_1 = require(\"../materials/SpecularGlossinessMaterial\");\r\n// #endregion Type aliases (6)\r\n// #region Classes (1)\r\nclass MaterialLoader {\r\n    // #endregion Properties (16)\r\n    // #region Constructors (1)\r\n    constructor(_renderingEngine) {\r\n        this._renderingEngine = _renderingEngine;\r\n        // #region Properties (16)\r\n        this._converter = viewer_shared_services_1.Converter.instance;\r\n        this._blending = 0.0;\r\n        this._defaultLineMaterialData = new viewer_shared_types_1.MaterialBasicLineData({ color: '#199b9b' });\r\n        this._defaultMaterialData = new viewer_shared_types_1.MaterialStandardData({ color: '#199b9b', side: viewer_shared_types_1.MATERIAL_SIDE.DOUBLE, metalness: 0.0 });\r\n        this._defaultPointMaterialData = new viewer_shared_types_1.MaterialPointData({ color: '#199b9b' });\r\n        this._envMap = null;\r\n        this._envMapIntensity = 1;\r\n        this._envMapType = EnvironmentMapLoader_1.ENVIRONMENT_MAP_TYPE.NULL;\r\n        this._environmentMapRotationEuler = new THREE.Euler();\r\n        this._height = 1020;\r\n        this._lightSizeUV = 0.025;\r\n        this._materialCache = {};\r\n        this._maxMapCount = 0;\r\n        this._pointSize = 1.0;\r\n        this._textureEncoding = THREE.SRGBColorSpace;\r\n        this._threeJsTextureCache = {};\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Getters And Setters (12)\r\n    get defaultLineMaterialData() {\r\n        return this._defaultLineMaterialData;\r\n    }\r\n    set defaultLineMaterialData(value) {\r\n        this._defaultLineMaterialData = value;\r\n        this.assignDefaultLineMaterial();\r\n    }\r\n    get defaultMaterialData() {\r\n        return this._defaultMaterialData;\r\n    }\r\n    set defaultMaterialData(value) {\r\n        this._defaultMaterialData = value;\r\n        this.assignDefaultMaterial();\r\n    }\r\n    get defaultPointMaterialData() {\r\n        return this._defaultPointMaterialData;\r\n    }\r\n    set defaultPointMaterialData(value) {\r\n        this._defaultPointMaterialData = value;\r\n        this.assignDefaultPointMaterial();\r\n    }\r\n    get maxMapCount() {\r\n        return this._maxMapCount;\r\n    }\r\n    set maxMapCount(value) {\r\n        this._maxMapCount = value;\r\n    }\r\n    get textureEncoding() {\r\n        return this._textureEncoding;\r\n    }\r\n    set textureEncoding(value) {\r\n        this._textureEncoding = value;\r\n        this.assignTextureEncoding();\r\n    }\r\n    get threeJsTextureCache() {\r\n        return this._threeJsTextureCache;\r\n    }\r\n    set threeJsTextureCache(value) {\r\n        this._threeJsTextureCache = value;\r\n    }\r\n    // #endregion Public Getters And Setters (12)\r\n    // #region Public Methods (18)\r\n    assignColorCorrection(value) {\r\n        const convertColor = (c, toggle) => {\r\n            if (!c)\r\n                return;\r\n            if (c instanceof SDColor_1.SDColor) {\r\n                c.colorCorrection(toggle);\r\n                return c;\r\n            }\r\n            else {\r\n                const sdColor = this._renderingEngine.colorCache.find(color => color.equals(c));\r\n                if (sdColor) {\r\n                    sdColor.colorCorrection(toggle);\r\n                    return sdColor;\r\n                }\r\n                else {\r\n                    // we check in this case if the converted color has been stored already\r\n                    const clone = c.clone();\r\n                    toggle === true ? clone.convertSRGBToLinear() : clone.convertLinearToSRGB();\r\n                    const sdColorClone = this._renderingEngine.colorCache.find(color => color.equals(clone));\r\n                    if (sdColorClone) {\r\n                        sdColorClone.colorCorrection(toggle);\r\n                        return sdColorClone;\r\n                    }\r\n                    else {\r\n                        // some colors may not have been set by us, but have been set automatically\r\n                        // in this case we expect the color to be linear either way and therefore omit a color correction\r\n                        return c;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        for (const cacheKey in this._materialCache) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const material = this._materialCache[cacheKey].material;\r\n            if (material.color)\r\n                material.color = convertColor(material.color, value);\r\n            if (material.specular)\r\n                material.specular = convertColor(material.specular, value);\r\n            if (material.emissive)\r\n                material.emissive = convertColor(material.emissive, value);\r\n            if (material.colorTransferBegin)\r\n                material.colorTransferBegin = convertColor(material.colorTransferBegin, value);\r\n            if (material.colorTransferEnd)\r\n                material.colorTransferEnd = convertColor(material.colorTransferEnd, value);\r\n            if (material.attenuationColor)\r\n                material.attenuationColor = convertColor(material.attenuationColor, value);\r\n            if (material.sheencolor)\r\n                material.sheencolor = convertColor(material.sheencolor, value);\r\n            if (material.specularColor)\r\n                material.specularColor = convertColor(material.specularColor, value);\r\n            material.needsUpdate = true;\r\n        }\r\n    }\r\n    assignDefaultLineMaterial() {\r\n        for (const cacheKey in this._materialCache) {\r\n            if (this._materialCache[cacheKey].material instanceof THREE.LineBasicMaterial && this._materialCache[cacheKey].materialData === null) {\r\n                const material = this._materialCache[cacheKey].material;\r\n                const { properties, mapCount } = this.getMaterialProperties(this._defaultLineMaterialData, MATERIAL_TYPE.LINE, undefined);\r\n                this.maxMapCount = Math.max(this.maxMapCount, mapCount);\r\n                material.copy(new THREE.LineBasicMaterial(properties));\r\n                material.needsUpdate = true;\r\n            }\r\n        }\r\n    }\r\n    assignDefaultMaterial() {\r\n        for (const cacheKey in this._materialCache) {\r\n            if (this._materialCache[cacheKey].material instanceof THREE.MeshPhysicalMaterial && this._materialCache[cacheKey].materialData === null) {\r\n                const material = this._materialCache[cacheKey].material;\r\n                const { properties, mapCount } = this.getMaterialProperties(this._defaultMaterialData, MATERIAL_TYPE.MESH, this._materialCache[cacheKey].materialSettings);\r\n                this.maxMapCount = Math.max(this.maxMapCount, mapCount);\r\n                material.copy(new THREE.MeshPhysicalMaterial(properties));\r\n                material.needsUpdate = true;\r\n            }\r\n        }\r\n    }\r\n    assignDefaultPointMaterial() {\r\n        for (const cacheKey in this._materialCache) {\r\n            if (this._materialCache[cacheKey].material instanceof THREE.PointsMaterial && this._materialCache[cacheKey].materialData === null) {\r\n                const material = this._materialCache[cacheKey].material;\r\n                const { properties, mapCount } = this.getMaterialProperties(this._defaultPointMaterialData, MATERIAL_TYPE.POINT, undefined);\r\n                this.maxMapCount = Math.max(this.maxMapCount, mapCount);\r\n                material.copy(new THREE.PointsMaterial(properties));\r\n                material.needsUpdate = true;\r\n            }\r\n        }\r\n    }\r\n    assignEnvironmentMap(e, type) {\r\n        this._envMap = e;\r\n        this._envMapType = type;\r\n        for (const cacheKey in this._materialCache) {\r\n            if ((this._materialCache[cacheKey].material instanceof THREE.MeshPhysicalMaterial || this._materialCache[cacheKey].material instanceof THREE.MeshStandardMaterial || this._materialCache[cacheKey].material instanceof THREE.MeshBasicMaterial)) {\r\n                const material = this._materialCache[cacheKey].material;\r\n                if (this._materialCache[cacheKey].materialData &&\r\n                    (this._materialCache[cacheKey].materialData instanceof viewer_shared_types_1.MaterialStandardData ||\r\n                        this._materialCache[cacheKey].materialData instanceof viewer_shared_types_1.MaterialGemData ||\r\n                        this._materialCache[cacheKey].materialData instanceof viewer_shared_types_1.MaterialSpecularGlossinessData ||\r\n                        this._materialCache[cacheKey].materialData instanceof viewer_shared_types_1.MaterialUnlitData) &&\r\n                    this._materialCache[cacheKey].materialData.envMap !== undefined)\r\n                    continue;\r\n                if (this._materialCache[cacheKey].materialData instanceof viewer_shared_types_1.MaterialUnlitData && this._renderingEngine.environmentMapForUnlitMaterials === false)\r\n                    return;\r\n                material.envMap = e;\r\n                material.needsUpdate = true;\r\n                for (const d in material.defines) {\r\n                    if (d.startsWith('ENVMAP_TYPE_'))\r\n                        delete material.defines[d];\r\n                }\r\n                if (material.defines)\r\n                    material.defines['ENVMAP_TYPE_' + this._envMapType.toUpperCase()] = '';\r\n                this.assignEnvironmentMapRotation(this._renderingEngine.environmentMapRotation);\r\n            }\r\n        }\r\n    }\r\n    assignEnvironmentMapForUnlitMaterials(toggle) {\r\n        for (const cacheKey in this._materialCache) {\r\n            if (this._materialCache[cacheKey].material instanceof THREE.MeshBasicMaterial) {\r\n                const material = this._materialCache[cacheKey].material;\r\n                if (this._materialCache[cacheKey].materialData &&\r\n                    this._materialCache[cacheKey].materialData instanceof viewer_shared_types_1.MaterialUnlitData &&\r\n                    this._materialCache[cacheKey].materialData.envMap !== undefined)\r\n                    continue;\r\n                if (toggle) {\r\n                    material.envMap = this._envMap;\r\n                    material.needsUpdate = true;\r\n                    for (const d in material.defines) {\r\n                        if (d.startsWith('ENVMAP_TYPE_'))\r\n                            delete material.defines[d];\r\n                    }\r\n                    if (material.defines)\r\n                        material.defines['ENVMAP_TYPE_' + this._envMapType.toUpperCase()] = '';\r\n                }\r\n                else {\r\n                    material.envMap = null;\r\n                    material.needsUpdate = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    assignEnvironmentMapIntensity(value) {\r\n        this._envMapIntensity = value;\r\n        for (const cacheKey in this._materialCache) {\r\n            if ((this._materialCache[cacheKey].material instanceof THREE.MeshPhysicalMaterial || this._materialCache[cacheKey].material instanceof THREE.MeshStandardMaterial)) {\r\n                const material = this._materialCache[cacheKey].material;\r\n                if (this._materialCache[cacheKey].materialData &&\r\n                    (this._materialCache[cacheKey].materialData instanceof viewer_shared_types_1.MaterialStandardData ||\r\n                        this._materialCache[cacheKey].materialData instanceof viewer_shared_types_1.MaterialGemData ||\r\n                        this._materialCache[cacheKey].materialData instanceof viewer_shared_types_1.MaterialSpecularGlossinessData ||\r\n                        this._materialCache[cacheKey].materialData instanceof viewer_shared_types_1.MaterialUnlitData) &&\r\n                    this._materialCache[cacheKey].materialData.envMap !== undefined)\r\n                    continue;\r\n                material.envMapIntensity = value;\r\n                material.needsUpdate = true;\r\n            }\r\n        }\r\n    }\r\n    assignEnvironmentMapRotation(value) {\r\n        // we switch the y and z axis to match the three.js coordinate system\r\n        const rotationMatrix = new THREE.Matrix4().fromArray(gl_matrix_1.mat4.fromQuat(gl_matrix_1.mat4.create(), gl_matrix_1.quat.fromValues(value[0], value[2], -value[1], value[3]))).transpose();\r\n        this._environmentMapRotationEuler = new THREE.Euler().setFromRotationMatrix(rotationMatrix);\r\n        this._renderingEngine.scene.backgroundRotation = this._environmentMapRotationEuler;\r\n        for (const cacheKey in this._materialCache) {\r\n            if ((this._materialCache[cacheKey].material instanceof THREE.MeshPhysicalMaterial || this._materialCache[cacheKey].material instanceof THREE.MeshStandardMaterial)) {\r\n                const material = this._materialCache[cacheKey].material;\r\n                if (this._materialCache[cacheKey].materialData &&\r\n                    (this._materialCache[cacheKey].materialData instanceof viewer_shared_types_1.MaterialStandardData ||\r\n                        this._materialCache[cacheKey].materialData instanceof viewer_shared_types_1.MaterialGemData ||\r\n                        this._materialCache[cacheKey].materialData instanceof viewer_shared_types_1.MaterialSpecularGlossinessData ||\r\n                        this._materialCache[cacheKey].materialData instanceof viewer_shared_types_1.MaterialUnlitData) &&\r\n                    this._materialCache[cacheKey].materialData.envMap !== undefined)\r\n                    continue;\r\n                material.envMapRotation = this._environmentMapRotationEuler;\r\n                material.needsUpdate = true;\r\n            }\r\n        }\r\n    }\r\n    assignPointSize(p) {\r\n        const height = this._renderingEngine.renderer ? this._renderingEngine.renderer.getSize(new THREE.Vector2()).y : 1080;\r\n        if (height === this._height && p * (this._height / 1080) === this._pointSize)\r\n            return;\r\n        this._height = height;\r\n        this._pointSize = p * (this._height / 1080);\r\n        for (const cacheKey in this._materialCache) {\r\n            if (this._materialCache[cacheKey].material instanceof MultiPointsMaterial_1.MultiPointsMaterial) {\r\n                const material = this._materialCache[cacheKey].material;\r\n                if (this._materialCache[cacheKey].material.userData.customPointSize_0Enabled && this._materialCache[cacheKey].material.userData.customPointSize_0Enabled === true) {\r\n                    material.size_0 = this._pointSize * this._materialCache[cacheKey].material.userData.customPointSize_0;\r\n                    material.needsUpdate = true;\r\n                }\r\n                else {\r\n                    material.size_0 = this._pointSize;\r\n                    material.needsUpdate = true;\r\n                }\r\n                if (this._materialCache[cacheKey].material.userData.customPointSize_1Enabled && this._materialCache[cacheKey].material.userData.customPointSize_1Enabled === true) {\r\n                    material.size_1 = this._pointSize * this._materialCache[cacheKey].material.userData.customPointSize_1;\r\n                    material.needsUpdate = true;\r\n                }\r\n                else {\r\n                    material.size_1 = this._pointSize;\r\n                    material.needsUpdate = true;\r\n                }\r\n                if (this._materialCache[cacheKey].material.userData.customPointSize_2Enabled && this._materialCache[cacheKey].material.userData.customPointSize_2Enabled === true) {\r\n                    material.size_2 = this._pointSize * this._materialCache[cacheKey].material.userData.customPointSize_2;\r\n                    material.needsUpdate = true;\r\n                }\r\n                else {\r\n                    material.size_2 = this._pointSize;\r\n                    material.needsUpdate = true;\r\n                }\r\n                if (this._materialCache[cacheKey].material.userData.customPointSize_3Enabled && this._materialCache[cacheKey].material.userData.customPointSize_3Enabled === true) {\r\n                    material.size_3 = this._pointSize * this._materialCache[cacheKey].material.userData.customPointSize_3;\r\n                    material.needsUpdate = true;\r\n                }\r\n                else {\r\n                    material.size_3 = this._pointSize;\r\n                    material.needsUpdate = true;\r\n                }\r\n                if (this._materialCache[cacheKey].material.userData.customPointSize_4Enabled && this._materialCache[cacheKey].material.userData.customPointSize_4Enabled === true) {\r\n                    material.size_4 = this._pointSize * this._materialCache[cacheKey].material.userData.customPointSize_4;\r\n                    material.needsUpdate = true;\r\n                }\r\n                else {\r\n                    material.size_4 = this._pointSize;\r\n                    material.needsUpdate = true;\r\n                }\r\n                if (this._materialCache[cacheKey].material.userData.customPointSize_5Enabled && this._materialCache[cacheKey].material.userData.customPointSize_5Enabled === true) {\r\n                    material.size_5 = this._pointSize * this._materialCache[cacheKey].material.userData.customPointSize_5;\r\n                    material.needsUpdate = true;\r\n                }\r\n                else {\r\n                    material.size_5 = this._pointSize;\r\n                    material.needsUpdate = true;\r\n                }\r\n                if (this._materialCache[cacheKey].material.userData.customPointSize_6Enabled && this._materialCache[cacheKey].material.userData.customPointSize_6Enabled === true) {\r\n                    material.size_6 = this._pointSize * this._materialCache[cacheKey].material.userData.customPointSize_6;\r\n                    material.needsUpdate = true;\r\n                }\r\n                else {\r\n                    material.size_6 = this._pointSize;\r\n                    material.needsUpdate = true;\r\n                }\r\n                if (this._materialCache[cacheKey].material.userData.customPointSize_7Enabled && this._materialCache[cacheKey].material.userData.customPointSize_7Enabled === true) {\r\n                    material.size_7 = this._pointSize * this._materialCache[cacheKey].material.userData.customPointSize_7;\r\n                    material.needsUpdate = true;\r\n                }\r\n                else {\r\n                    material.size_7 = this._pointSize;\r\n                    material.needsUpdate = true;\r\n                }\r\n            }\r\n            else if (this._materialCache[cacheKey].material instanceof THREE.PointsMaterial) {\r\n                const material = this._materialCache[cacheKey].material;\r\n                if (this._materialCache[cacheKey].material.userData.customPointSizeEnabled && this._materialCache[cacheKey].material.userData.customPointSizeEnabled === true) {\r\n                    material.size = this._pointSize * this._materialCache[cacheKey].material.userData.customPointSize;\r\n                    material.needsUpdate = true;\r\n                }\r\n                else {\r\n                    material.size = this._pointSize;\r\n                    material.needsUpdate = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    cacheSize() {\r\n        return Object.entries(this._materialCache).length;\r\n    }\r\n    createMaterial(type, incomingData, materialData, materialSettings) {\r\n        const { properties, mapCount } = this.getMaterialProperties(materialData, type, materialSettings);\r\n        this.maxMapCount = Math.max(this.maxMapCount, mapCount);\r\n        let material;\r\n        if (type === MATERIAL_TYPE.POINT) {\r\n            if (materialData instanceof viewer_shared_types_1.MaterialMultiPointData) {\r\n                material = new MultiPointsMaterial_1.MultiPointsMaterial(properties);\r\n            }\r\n            else {\r\n                material = new THREE.PointsMaterial(properties);\r\n            }\r\n        }\r\n        else if (type === MATERIAL_TYPE.LINE) {\r\n            material = new THREE.LineBasicMaterial(properties);\r\n        }\r\n        else {\r\n            if (materialData instanceof viewer_shared_types_1.MaterialUnlitData) {\r\n                material = new THREE.MeshBasicMaterial(properties);\r\n            }\r\n            else {\r\n                if (materialData instanceof viewer_shared_types_1.MaterialShadowData) {\r\n                    material = new THREE.ShadowMaterial({ opacity: properties.opacity, color: properties.color });\r\n                }\r\n                else if (materialData instanceof viewer_shared_types_1.MaterialSpecularGlossinessData) {\r\n                    material = new SpecularGlossinessMaterial_1.SpecularGlossinessMaterial(properties);\r\n                }\r\n                else if (materialData instanceof viewer_shared_types_1.MaterialGemData) {\r\n                    material = new GemMaterial_1.GemMaterial(properties);\r\n                }\r\n                else {\r\n                    material = new THREE.MeshPhysicalMaterial(properties);\r\n                }\r\n                const before = material.onBeforeCompile;\r\n                material.onBeforeCompile = (shader, renderer) => {\r\n                    before(shader, renderer);\r\n                    shader.uniforms.lightSizeUV = { value: this._lightSizeUV };\r\n                    shader.uniforms.blending = { value: this._blending };\r\n                    material.userData.shader = shader;\r\n                };\r\n                if (material instanceof SpecularGlossinessMaterial_1.SpecularGlossinessMaterial || material instanceof THREE.MeshPhysicalMaterial) {\r\n                    material.defines['ENVMAP_TYPE_' + this._envMapType.toUpperCase()] = '';\r\n                    if (materialSettings && materialSettings.useVertexTangents)\r\n                        material.normalScale.y *= -1;\r\n                    if (materialSettings && materialSettings.useVertexTangents && material instanceof THREE.MeshPhysicalMaterial)\r\n                        material.clearcoatNormalScale.y *= -1;\r\n                    if (materialSettings && materialSettings.useFlatShading)\r\n                        material.flatShading = true;\r\n                }\r\n            }\r\n        }\r\n        if (materialSettings && materialSettings.useVertexColors)\r\n            material.vertexColors = true;\r\n        if (materialData instanceof viewer_shared_types_1.MaterialStandardData || materialData instanceof viewer_shared_types_1.MaterialGemData || materialData instanceof viewer_shared_types_1.MaterialSpecularGlossinessData || materialData instanceof viewer_shared_types_1.MaterialUnlitData) {\r\n            if (materialData.envMap !== undefined) {\r\n                const envMapInput = materialData.envMap;\r\n                if (envMapInput !== undefined) {\r\n                    const envMapResult = this._renderingEngine.environmentMapLoader.loadEnvMap(envMapInput);\r\n                    envMapResult.map.then(envMap => {\r\n                        if (material instanceof THREE.MeshBasicMaterial && this._renderingEngine.environmentMapForUnlitMaterials === false)\r\n                            return;\r\n                        material.envMap = envMap;\r\n                        const envMapType = material.envMap instanceof THREE.CubeTexture ? EnvironmentMapLoader_1.ENVIRONMENT_MAP_TYPE.LDR : EnvironmentMapLoader_1.ENVIRONMENT_MAP_TYPE.HDR;\r\n                        for (const d in material.defines) {\r\n                            if (d.startsWith('ENVMAP_TYPE_'))\r\n                                delete material.defines[d];\r\n                        }\r\n                        if (material.defines)\r\n                            material.defines['ENVMAP_TYPE_' + envMapType.toUpperCase()] = '';\r\n                        material.needsUpdate = true;\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        if (materialData)\r\n            materialData.convertedObject[this._renderingEngine.id] = material;\r\n        material.needsUpdate = true;\r\n        if (material.userData) {\r\n            material.userData.SDid = incomingData.id;\r\n            material.userData.SDversion = incomingData.version;\r\n        }\r\n        else {\r\n            material.userData = {\r\n                SDid: incomingData.id,\r\n                SDversion: incomingData.version\r\n            };\r\n        }\r\n        return material;\r\n    }\r\n    emptyMaterialCache() {\r\n        this._materialCache = {};\r\n    }\r\n    getMaterialProperties(materialData, type, materialSettings) {\r\n        const generalProperties = {};\r\n        let mapCount = 0;\r\n        // if no MaterialStandardData is provided, we return our default\r\n        if (!materialData) {\r\n            if (type === MATERIAL_TYPE.POINT) {\r\n                return this.getMaterialProperties(this._defaultPointMaterialData, type, materialSettings);\r\n            }\r\n            else if (type === MATERIAL_TYPE.LINE) {\r\n                return this.getMaterialProperties(this._defaultLineMaterialData, type, materialSettings);\r\n            }\r\n            else {\r\n                if (materialSettings !== undefined && materialSettings.useVertexColors) {\r\n                    const currentDefaultMaterialColor = this._defaultMaterialData.color;\r\n                    this._defaultMaterialData.color = '#d3d3d3';\r\n                    const properties = this.getMaterialProperties(this._defaultMaterialData, type, materialSettings);\r\n                    this._defaultMaterialData.color = currentDefaultMaterialColor;\r\n                    return properties;\r\n                }\r\n                else {\r\n                    return this.getMaterialProperties(this._defaultMaterialData, type, materialSettings);\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * We know evaluate properties that can be applied to all materials\r\n         */\r\n        generalProperties.alphaTest = materialData.alphaCutoff;\r\n        if (materialData.opacity !== undefined) {\r\n            generalProperties.opacity = materialData.opacity;\r\n            generalProperties.transparent = generalProperties.opacity < 1;\r\n        }\r\n        if (materialData.alphaMode === viewer_shared_types_1.MATERIAL_ALPHA.BLEND) {\r\n            generalProperties.transparent = true;\r\n            generalProperties.depthWrite = false;\r\n        }\r\n        else if (!generalProperties.transparent) {\r\n            generalProperties.transparent = false;\r\n        }\r\n        if (materialData.depthTest !== undefined) {\r\n            generalProperties.depthTest = materialData.depthTest;\r\n        }\r\n        if (materialData.depthWrite !== undefined) {\r\n            generalProperties.depthWrite = materialData.depthWrite;\r\n        }\r\n        if (materialData.transparent !== undefined) {\r\n            generalProperties.transparent = materialData.transparent;\r\n        }\r\n        if (materialData.color !== undefined)\r\n            generalProperties.color = this._renderingEngine.createThreeJsColor(materialData.color);\r\n        if (materialData.color === undefined && materialData.map !== undefined && materialData.map.color !== undefined)\r\n            generalProperties.color = this._renderingEngine.createThreeJsColor(materialData.map.color);\r\n        if (materialData.color === undefined && materialData.map !== undefined && materialData.map.color === undefined && !(materialSettings !== undefined && materialSettings.useVertexColors))\r\n            generalProperties.color = this._renderingEngine.createThreeJsColor(this._renderingEngine.defaultMaterialColor);\r\n        if ((materialSettings !== undefined && materialSettings.useVertexColors) && (materialData.color === this._converter.toHexColor(this._renderingEngine.defaultMaterialColor) || materialData.color + 'ff' === this._converter.toHexColor(this._renderingEngine.defaultMaterialColor) || materialData.color === this._renderingEngine.defaultMaterialColor || materialData.color === this._renderingEngine.defaultMaterialColor + 'ff' || materialData.color === undefined))\r\n            generalProperties.color = this._renderingEngine.createThreeJsColor('#d3d3d3');\r\n        if (materialData.side !== undefined)\r\n            generalProperties.side = materialData.side === viewer_shared_types_1.MATERIAL_SIDE.BACK ? THREE.BackSide : materialData.side === viewer_shared_types_1.MATERIAL_SIDE.FRONT ? THREE.FrontSide : THREE.DoubleSide;\r\n        /**\r\n         *\r\n         * First exit, lines ans points\r\n         *\r\n         */\r\n        if (type === MATERIAL_TYPE.POINT) {\r\n            if (materialData instanceof viewer_shared_types_1.MaterialPointData) {\r\n                const pointMaterialProperties = generalProperties;\r\n                pointMaterialProperties.size = materialData.size !== undefined ? materialData.size : this._pointSize;\r\n                pointMaterialProperties.userData = {\r\n                    customPointSizeEnabled: materialData.size !== undefined,\r\n                    customPointSize: materialData.size\r\n                };\r\n                pointMaterialProperties.sizeAttenuation = materialData.sizeAttenuation !== undefined ? materialData.sizeAttenuation : true;\r\n                if (materialData.map !== undefined) {\r\n                    pointMaterialProperties.map = this.createTexture(materialData.map);\r\n                    mapCount++;\r\n                }\r\n                if (materialData.alphaMap !== undefined) {\r\n                    pointMaterialProperties.alphaMap = this.createTexture(materialData.alphaMap);\r\n                    pointMaterialProperties.transparent = true;\r\n                    pointMaterialProperties.depthWrite = false;\r\n                    mapCount++;\r\n                }\r\n            }\r\n            else if (materialData instanceof viewer_shared_types_1.MaterialMultiPointData) {\r\n                const multiPointMaterialProperties = generalProperties;\r\n                if (materialData.materialIndexDataMap) {\r\n                    multiPointMaterialProperties.materialIndexDataTexture = this.createTexture(materialData.materialIndexDataMap);\r\n                }\r\n                else {\r\n                    multiPointMaterialProperties.materialIndexDataTexture =\r\n                        new THREE.DataTexture(new Uint8Array(multiPointMaterialProperties.materialIndexDataTextureSize || 1024), multiPointMaterialProperties.materialIndexDataTextureSize || 1024, 1, THREE.RedIntegerFormat, THREE.UnsignedIntType);\r\n                    multiPointMaterialProperties.materialIndexDataTexture.internalFormat = 'R32UI';\r\n                }\r\n                multiPointMaterialProperties.size_0 = materialData.size_0 !== undefined ? materialData.size_0 : this._pointSize;\r\n                multiPointMaterialProperties.size_1 = materialData.size_1 !== undefined ? materialData.size_1 : this._pointSize;\r\n                multiPointMaterialProperties.size_2 = materialData.size_2 !== undefined ? materialData.size_2 : this._pointSize;\r\n                multiPointMaterialProperties.size_3 = materialData.size_3 !== undefined ? materialData.size_3 : this._pointSize;\r\n                multiPointMaterialProperties.size_4 = materialData.size_4 !== undefined ? materialData.size_4 : this._pointSize;\r\n                multiPointMaterialProperties.size_5 = materialData.size_5 !== undefined ? materialData.size_5 : this._pointSize;\r\n                multiPointMaterialProperties.size_6 = materialData.size_6 !== undefined ? materialData.size_6 : this._pointSize;\r\n                multiPointMaterialProperties.size_7 = materialData.size_7 !== undefined ? materialData.size_7 : this._pointSize;\r\n                multiPointMaterialProperties.userData = {\r\n                    customPointSize_0Enabled: materialData.size_0 !== undefined,\r\n                    customPointSize_1Enabled: materialData.size_1 !== undefined,\r\n                    customPointSize_2Enabled: materialData.size_2 !== undefined,\r\n                    customPointSize_3Enabled: materialData.size_3 !== undefined,\r\n                    customPointSize_4Enabled: materialData.size_4 !== undefined,\r\n                    customPointSize_5Enabled: materialData.size_5 !== undefined,\r\n                    customPointSize_6Enabled: materialData.size_6 !== undefined,\r\n                    customPointSize_7Enabled: materialData.size_7 !== undefined,\r\n                    customPointSize_0: materialData.size_0,\r\n                    customPointSize_1: materialData.size_1,\r\n                    customPointSize_2: materialData.size_2,\r\n                    customPointSize_3: materialData.size_3,\r\n                    customPointSize_4: materialData.size_4,\r\n                    customPointSize_5: materialData.size_5,\r\n                    customPointSize_6: materialData.size_6,\r\n                    customPointSize_7: materialData.size_7\r\n                };\r\n                multiPointMaterialProperties.sizeAttenuation_0 = materialData.sizeAttenuation_0 !== undefined ? materialData.sizeAttenuation_0 : false;\r\n                multiPointMaterialProperties.sizeAttenuation_1 = materialData.sizeAttenuation_1 !== undefined ? materialData.sizeAttenuation_1 : false;\r\n                multiPointMaterialProperties.sizeAttenuation_2 = materialData.sizeAttenuation_2 !== undefined ? materialData.sizeAttenuation_2 : false;\r\n                multiPointMaterialProperties.sizeAttenuation_3 = materialData.sizeAttenuation_3 !== undefined ? materialData.sizeAttenuation_3 : false;\r\n                multiPointMaterialProperties.sizeAttenuation_4 = materialData.sizeAttenuation_4 !== undefined ? materialData.sizeAttenuation_4 : false;\r\n                multiPointMaterialProperties.sizeAttenuation_5 = materialData.sizeAttenuation_5 !== undefined ? materialData.sizeAttenuation_5 : false;\r\n                multiPointMaterialProperties.sizeAttenuation_6 = materialData.sizeAttenuation_6 !== undefined ? materialData.sizeAttenuation_6 : false;\r\n                multiPointMaterialProperties.sizeAttenuation_7 = materialData.sizeAttenuation_7 !== undefined ? materialData.sizeAttenuation_7 : false;\r\n                if (materialData.map_0 !== undefined) {\r\n                    multiPointMaterialProperties.map_0 = this.createTexture(materialData.map_0);\r\n                    multiPointMaterialProperties.map = multiPointMaterialProperties.map_0;\r\n                    mapCount++;\r\n                }\r\n                if (materialData.map_1 !== undefined) {\r\n                    multiPointMaterialProperties.map_1 = this.createTexture(materialData.map_1);\r\n                    multiPointMaterialProperties.map = multiPointMaterialProperties.map_0;\r\n                    mapCount++;\r\n                }\r\n                if (materialData.map_2 !== undefined) {\r\n                    multiPointMaterialProperties.map_2 = this.createTexture(materialData.map_2);\r\n                    multiPointMaterialProperties.map = multiPointMaterialProperties.map_0;\r\n                    mapCount++;\r\n                }\r\n                if (materialData.map_3 !== undefined) {\r\n                    multiPointMaterialProperties.map_3 = this.createTexture(materialData.map_3);\r\n                    multiPointMaterialProperties.map = multiPointMaterialProperties.map_0;\r\n                    mapCount++;\r\n                }\r\n                if (materialData.map_4 !== undefined) {\r\n                    multiPointMaterialProperties.map_4 = this.createTexture(materialData.map_4);\r\n                    multiPointMaterialProperties.map = multiPointMaterialProperties.map_0;\r\n                    mapCount++;\r\n                }\r\n                if (materialData.map_5 !== undefined) {\r\n                    multiPointMaterialProperties.map_5 = this.createTexture(materialData.map_5);\r\n                    multiPointMaterialProperties.map = multiPointMaterialProperties.map_0;\r\n                    mapCount++;\r\n                }\r\n                if (materialData.map_6 !== undefined) {\r\n                    multiPointMaterialProperties.map_6 = this.createTexture(materialData.map_6);\r\n                    multiPointMaterialProperties.map = multiPointMaterialProperties.map_0;\r\n                    mapCount++;\r\n                }\r\n                if (materialData.map_7 !== undefined) {\r\n                    multiPointMaterialProperties.map_7 = this.createTexture(materialData.map_7);\r\n                    multiPointMaterialProperties.map = multiPointMaterialProperties.map_0;\r\n                    mapCount++;\r\n                }\r\n                if (materialData.alphaMap_0 !== undefined) {\r\n                    multiPointMaterialProperties.alphaMap_0 = this.createTexture(materialData.alphaMap_0);\r\n                    multiPointMaterialProperties.alphaMap = multiPointMaterialProperties.alphaMap_0;\r\n                    multiPointMaterialProperties.transparent = true;\r\n                    multiPointMaterialProperties.depthWrite = false;\r\n                    mapCount++;\r\n                }\r\n                if (materialData.alphaMap_1 !== undefined) {\r\n                    multiPointMaterialProperties.alphaMap_1 = this.createTexture(materialData.alphaMap_1);\r\n                    multiPointMaterialProperties.alphaMap = multiPointMaterialProperties.alphaMap_0;\r\n                    multiPointMaterialProperties.transparent = true;\r\n                    multiPointMaterialProperties.depthWrite = false;\r\n                    mapCount++;\r\n                }\r\n                if (materialData.alphaMap_2 !== undefined) {\r\n                    multiPointMaterialProperties.alphaMap_2 = this.createTexture(materialData.alphaMap_2);\r\n                    multiPointMaterialProperties.alphaMap = multiPointMaterialProperties.alphaMap_0;\r\n                    multiPointMaterialProperties.transparent = true;\r\n                    multiPointMaterialProperties.depthWrite = false;\r\n                    mapCount++;\r\n                }\r\n                if (materialData.alphaMap_3 !== undefined) {\r\n                    multiPointMaterialProperties.alphaMap_3 = this.createTexture(materialData.alphaMap_3);\r\n                    multiPointMaterialProperties.alphaMap = multiPointMaterialProperties.alphaMap_0;\r\n                    multiPointMaterialProperties.transparent = true;\r\n                    multiPointMaterialProperties.depthWrite = false;\r\n                    mapCount++;\r\n                }\r\n                if (materialData.alphaMap_4 !== undefined) {\r\n                    multiPointMaterialProperties.alphaMap_4 = this.createTexture(materialData.alphaMap_4);\r\n                    multiPointMaterialProperties.alphaMap = multiPointMaterialProperties.alphaMap_0;\r\n                    multiPointMaterialProperties.transparent = true;\r\n                    multiPointMaterialProperties.depthWrite = false;\r\n                    mapCount++;\r\n                }\r\n                if (materialData.alphaMap_5 !== undefined) {\r\n                    multiPointMaterialProperties.alphaMap_5 = this.createTexture(materialData.alphaMap_5);\r\n                    multiPointMaterialProperties.alphaMap = multiPointMaterialProperties.alphaMap_0;\r\n                    multiPointMaterialProperties.transparent = true;\r\n                    multiPointMaterialProperties.depthWrite = false;\r\n                    mapCount++;\r\n                }\r\n                if (materialData.alphaMap_6 !== undefined) {\r\n                    multiPointMaterialProperties.alphaMap_6 = this.createTexture(materialData.alphaMap_6);\r\n                    multiPointMaterialProperties.alphaMap = multiPointMaterialProperties.alphaMap_0;\r\n                    multiPointMaterialProperties.transparent = true;\r\n                    multiPointMaterialProperties.depthWrite = false;\r\n                    mapCount++;\r\n                }\r\n                if (materialData.alphaMap_7 !== undefined) {\r\n                    multiPointMaterialProperties.alphaMap_7 = this.createTexture(materialData.alphaMap_7);\r\n                    multiPointMaterialProperties.alphaMap = multiPointMaterialProperties.alphaMap_0;\r\n                    multiPointMaterialProperties.transparent = true;\r\n                    multiPointMaterialProperties.depthWrite = false;\r\n                    mapCount++;\r\n                }\r\n                if (materialData.color_0 !== undefined) {\r\n                    multiPointMaterialProperties.color_0 = this._renderingEngine.createThreeJsColor(materialData.color_0);\r\n                }\r\n                if (materialData.color_1 !== undefined) {\r\n                    multiPointMaterialProperties.color_1 = this._renderingEngine.createThreeJsColor(materialData.color_1);\r\n                }\r\n                if (materialData.color_2 !== undefined) {\r\n                    multiPointMaterialProperties.color_2 = this._renderingEngine.createThreeJsColor(materialData.color_2);\r\n                }\r\n                if (materialData.color_3 !== undefined) {\r\n                    multiPointMaterialProperties.color_3 = this._renderingEngine.createThreeJsColor(materialData.color_3);\r\n                }\r\n                if (materialData.color_4 !== undefined) {\r\n                    multiPointMaterialProperties.color_4 = this._renderingEngine.createThreeJsColor(materialData.color_4);\r\n                }\r\n                if (materialData.color_5 !== undefined) {\r\n                    multiPointMaterialProperties.color_5 = this._renderingEngine.createThreeJsColor(materialData.color_5);\r\n                }\r\n                if (materialData.color_6 !== undefined) {\r\n                    multiPointMaterialProperties.color_6 = this._renderingEngine.createThreeJsColor(materialData.color_6);\r\n                }\r\n                if (materialData.color_7 !== undefined) {\r\n                    multiPointMaterialProperties.color_7 = this._renderingEngine.createThreeJsColor(materialData.color_7);\r\n                }\r\n            }\r\n            else {\r\n                const pointMaterialProperties = generalProperties;\r\n                pointMaterialProperties.size = this._pointSize;\r\n            }\r\n            return { properties: generalProperties, mapCount };\r\n        }\r\n        else if (type === MATERIAL_TYPE.LINE) {\r\n            return { properties: generalProperties, mapCount };\r\n        }\r\n        /**\r\n         *\r\n         * Second exit, the shadow material\r\n         *\r\n         */\r\n        if (materialData instanceof viewer_shared_types_1.MaterialShadowData)\r\n            return { properties: generalProperties, mapCount };\r\n        /**\r\n         * We know evaluate properties that can be applied to basic mesh materials (and the ones extending from them)\r\n         */\r\n        const basicProperties = generalProperties;\r\n        if (materialData.alphaMap !== undefined) {\r\n            basicProperties.alphaMap = this.createTexture(materialData.alphaMap);\r\n            basicProperties.transparent = true;\r\n            basicProperties.depthWrite = false;\r\n            mapCount++;\r\n        }\r\n        if (materialData.aoMap !== undefined) {\r\n            basicProperties.aoMap = this.createTexture(materialData.aoMap);\r\n            mapCount++;\r\n        }\r\n        if (materialData.aoMapIntensity !== undefined) {\r\n            basicProperties.aoMapIntensity = materialData.aoMapIntensity;\r\n        }\r\n        if (materialData.map !== undefined) {\r\n            basicProperties.map = this.createTexture(materialData.map);\r\n            basicProperties.map.colorSpace = this._textureEncoding;\r\n            mapCount++;\r\n        }\r\n        /**\r\n         *\r\n         * Third exit, the unlit material\r\n         *\r\n         */\r\n        if (materialData instanceof viewer_shared_types_1.MaterialUnlitData)\r\n            return { properties: basicProperties, mapCount };\r\n        /**\r\n         * We know evaluate properties that can be applied to MeshPhysicalMaterials, SpecularGlossinessMaterials and GemMaterialParameters\r\n         */\r\n        const standardProperties = basicProperties;\r\n        if (materialData.shading !== undefined)\r\n            standardProperties.flatShading = materialData.shading !== 'smooth';\r\n        if (materialData.bumpMap !== undefined) {\r\n            standardProperties.bumpMap = this.createTexture(materialData.bumpMap);\r\n            mapCount++;\r\n        }\r\n        standardProperties.bumpScale = materialData.bumpScale;\r\n        if (materialData.emissiveness !== undefined)\r\n            standardProperties.emissive = this._renderingEngine.createThreeJsColor(materialData.emissiveness);\r\n        if (materialData.emissiveMap !== undefined) {\r\n            standardProperties.emissiveMap = this.createTexture(materialData.emissiveMap);\r\n            standardProperties.emissiveMap.colorSpace = this._textureEncoding;\r\n            mapCount++;\r\n        }\r\n        standardProperties.envMap = this._envMap;\r\n        standardProperties.envMapIntensity = this._envMapIntensity;\r\n        standardProperties.envMapRotation = this._environmentMapRotationEuler;\r\n        if (materialData.normalMap !== undefined) {\r\n            standardProperties.normalMap = this.createTexture(materialData.normalMap);\r\n            mapCount++;\r\n        }\r\n        if (materialData.normalScale !== undefined)\r\n            standardProperties.normalScale = new THREE.Vector2(materialData.normalScale, -materialData.normalScale);\r\n        /**\r\n         *\r\n         * Fourth exit, the specular-glossiness material\r\n         *\r\n         */\r\n        if (materialData instanceof viewer_shared_types_1.MaterialSpecularGlossinessData) {\r\n            const specularGlossinessProperties = standardProperties;\r\n            specularGlossinessProperties.specular = this._renderingEngine.createThreeJsColor(materialData.specular);\r\n            specularGlossinessProperties.glossiness = materialData.glossiness;\r\n            if (materialData.specularGlossinessMap !== undefined) {\r\n                specularGlossinessProperties.specularMap2 = this.createTexture(materialData.specularGlossinessMap);\r\n                specularGlossinessProperties.specularMap2.colorSpace = THREE.SRGBColorSpace;\r\n                specularGlossinessProperties.glossinessMap = specularGlossinessProperties.specularMap2;\r\n                mapCount++;\r\n            }\r\n            else {\r\n                if (materialData.specularMap !== undefined) {\r\n                    specularGlossinessProperties.specularMap2 = this.createTexture(materialData.specularMap);\r\n                    specularGlossinessProperties.specularMap2.colorSpace = THREE.SRGBColorSpace;\r\n                    mapCount++;\r\n                }\r\n                if (materialData.glossinessMap !== undefined) {\r\n                    specularGlossinessProperties.glossinessMap = this.createTexture(materialData.glossinessMap);\r\n                    mapCount++;\r\n                }\r\n            }\r\n            return { properties: specularGlossinessProperties, mapCount };\r\n        }\r\n        /**\r\n         *\r\n         * Fourth exit, the gem material\r\n         *\r\n         */\r\n        if (materialData instanceof viewer_shared_types_1.MaterialGemData) {\r\n            const gemProperties = standardProperties;\r\n            gemProperties.refractionIndex = materialData.refractionIndex;\r\n            if (materialData.impurityMap !== undefined) {\r\n                gemProperties.impurityMap = this.createTexture(materialData.impurityMap);\r\n                mapCount++;\r\n            }\r\n            gemProperties.impurityScale = materialData.impurityScale;\r\n            if (materialData.colorTransferBegin !== undefined) {\r\n                gemProperties.colorTransferBegin = this._renderingEngine.createThreeJsColor(materialData.colorTransferBegin);\r\n            }\r\n            if (materialData.colorTransferEnd !== undefined) {\r\n                gemProperties.colorTransferEnd = this._renderingEngine.createThreeJsColor(materialData.colorTransferEnd);\r\n            }\r\n            gemProperties.center = new THREE.Vector3(materialData.center[0], materialData.center[1], materialData.center[2]);\r\n            gemProperties.tracingDepth = materialData.tracingDepth;\r\n            gemProperties.radius = materialData.radius;\r\n            gemProperties.sphericalNormalMap = materialData.sphericalNormalMap;\r\n            gemProperties.gamma = materialData.gamma;\r\n            gemProperties.contrast = materialData.contrast;\r\n            gemProperties.brightness = materialData.brightness;\r\n            gemProperties.dispersion = materialData.dispersion;\r\n            gemProperties.tracingOpacity = materialData.tracingOpacity;\r\n            gemProperties.roughness = 0;\r\n            gemProperties.metalness = 1;\r\n            gemProperties.transparent = true;\r\n            gemProperties.opacity = 1.0;\r\n            gemProperties.side = THREE.FrontSide;\r\n            return { properties: gemProperties, mapCount };\r\n        }\r\n        /**\r\n         *\r\n         * the final exit, the MeshPhysicalMaterial\r\n         *\r\n         */\r\n        if (materialData instanceof viewer_shared_types_1.MaterialStandardData) {\r\n            const meshPhysicalProperties = standardProperties;\r\n            meshPhysicalProperties.clearcoat = materialData.clearcoat;\r\n            if (materialData.clearcoatMap !== undefined) {\r\n                meshPhysicalProperties.clearcoatMap = this.createTexture(materialData.clearcoatMap);\r\n                mapCount++;\r\n            }\r\n            if (materialData.clearcoatNormalMap !== undefined) {\r\n                meshPhysicalProperties.clearcoatNormalMap = this.createTexture(materialData.clearcoatNormalMap);\r\n                mapCount++;\r\n            }\r\n            meshPhysicalProperties.clearcoatRoughness = materialData.clearcoatRoughness;\r\n            if (materialData.clearcoatRoughnessMap !== undefined) {\r\n                meshPhysicalProperties.clearcoatRoughnessMap = this.createTexture(materialData.clearcoatRoughnessMap);\r\n                mapCount++;\r\n            }\r\n            if (materialData.displacementMap !== undefined) {\r\n                meshPhysicalProperties.displacementMap = this.createTexture(materialData.displacementMap);\r\n                mapCount++;\r\n            }\r\n            meshPhysicalProperties.displacementScale = materialData.displacementScale;\r\n            meshPhysicalProperties.displacementBias = materialData.displacementBias;\r\n            meshPhysicalProperties.ior = materialData.ior;\r\n            meshPhysicalProperties.transmission = materialData.transmission;\r\n            if (materialData.transmissionMap !== undefined) {\r\n                meshPhysicalProperties.transmissionMap = this.createTexture(materialData.transmissionMap);\r\n                mapCount++;\r\n            }\r\n            meshPhysicalProperties.thickness = materialData.thickness;\r\n            if (materialData.thicknessMap !== undefined) {\r\n                meshPhysicalProperties.thicknessMap = this.createTexture(materialData.thicknessMap);\r\n                mapCount++;\r\n            }\r\n            meshPhysicalProperties.attenuationDistance = materialData.attenuationDistance;\r\n            meshPhysicalProperties.attenuationColor = this._renderingEngine.createThreeJsColor(materialData.attenuationColor);\r\n            meshPhysicalProperties.sheen = materialData.sheen;\r\n            meshPhysicalProperties.sheenColor = this._renderingEngine.createThreeJsColor(materialData.sheenColor);\r\n            meshPhysicalProperties.sheenRoughness = materialData.sheenRoughness;\r\n            if (materialData.sheenColorMap !== undefined) {\r\n                meshPhysicalProperties.sheenColorMap = this.createTexture(materialData.sheenColorMap);\r\n                mapCount++;\r\n            }\r\n            if (materialData.sheenRoughnessMap !== undefined) {\r\n                meshPhysicalProperties.sheenRoughnessMap = this.createTexture(materialData.sheenRoughnessMap);\r\n                mapCount++;\r\n            }\r\n            meshPhysicalProperties.specularIntensity = materialData.specularIntensity;\r\n            if (materialData.specularIntensityMap !== undefined) {\r\n                meshPhysicalProperties.specularIntensityMap = this.createTexture(materialData.specularIntensityMap);\r\n                mapCount++;\r\n            }\r\n            meshPhysicalProperties.specularColor = this._renderingEngine.createThreeJsColor(materialData.specularColor);\r\n            if (materialData.specularColorMap !== undefined) {\r\n                meshPhysicalProperties.specularColorMap = this.createTexture(materialData.specularColorMap);\r\n                mapCount++;\r\n            }\r\n            meshPhysicalProperties.metalness = materialData.metalness;\r\n            meshPhysicalProperties.roughness = materialData.roughness;\r\n            if (materialData.metalnessRoughnessMap !== undefined) {\r\n                meshPhysicalProperties.metalnessMap = this.createTexture(materialData.metalnessRoughnessMap);\r\n                meshPhysicalProperties.roughnessMap = meshPhysicalProperties.metalnessMap;\r\n                mapCount++;\r\n            }\r\n            else {\r\n                if (materialData.metalnessMap !== undefined) {\r\n                    meshPhysicalProperties.metalnessMap = this.createTexture(materialData.metalnessMap);\r\n                    mapCount++;\r\n                }\r\n                if (materialData.roughnessMap !== undefined) {\r\n                    meshPhysicalProperties.roughnessMap = this.createTexture(materialData.roughnessMap);\r\n                    mapCount++;\r\n                }\r\n            }\r\n            return { properties: meshPhysicalProperties, mapCount };\r\n        }\r\n        // we should never get here\r\n        throw new viewer_shared_services_1.ShapeDiverViewerDataProcessingError('MaterialLoader.getMaterialProperties: No proper material properties were found.');\r\n    }\r\n    init() { }\r\n    /**\r\n       * Create a material object with the provided material data.\r\n       *\r\n       * @param material the material data\r\n       * @returns the material object\r\n       */\r\n    load(incomingData, materialSettings) {\r\n        let materialData = null;\r\n        if (!(incomingData instanceof viewer_shared_types_1.GeometryData))\r\n            materialData = incomingData;\r\n        // evaluate which type of material properties we are constructing\r\n        let type;\r\n        if (materialSettings && materialSettings.mode === 0) {\r\n            type = MATERIAL_TYPE.POINT;\r\n        }\r\n        else if (materialSettings && (materialSettings.mode === 1 || materialSettings.mode === 2 || materialSettings.mode === 3)) {\r\n            type = MATERIAL_TYPE.LINE;\r\n        }\r\n        else {\r\n            type = MATERIAL_TYPE.MESH;\r\n        }\r\n        const material = this.createMaterial(type, incomingData, materialData, materialSettings);\r\n        const cacheKey = this.createDataKeyFromMaterial(incomingData, type, materialSettings);\r\n        if (this._materialCache[cacheKey]) {\r\n            this._materialCache[cacheKey].material.copy(material);\r\n            return this._materialCache[cacheKey].material;\r\n        }\r\n        this._materialCache[cacheKey] = {\r\n            material,\r\n            materialData,\r\n            materialSettings\r\n        };\r\n        return material;\r\n    }\r\n    removeFromMaterialCache(id) {\r\n        for (const cacheKey in this._materialCache) {\r\n            const decodedCacheKey = (0, viewer_shared_services_1.atobCustom)(cacheKey);\r\n            if (decodedCacheKey.startsWith(id)) {\r\n                this._materialCache[cacheKey].material.dispose();\r\n                delete this._materialCache[cacheKey];\r\n            }\r\n        }\r\n    }\r\n    updateMaterials() {\r\n        for (const cacheKey in this._materialCache)\r\n            this._materialCache[cacheKey].material.needsUpdate = true;\r\n    }\r\n    updateSoftShadow(lightSizeUV, blending) {\r\n        this._lightSizeUV = lightSizeUV;\r\n        this._blending = blending;\r\n        for (const cacheKey in this._materialCache) {\r\n            if (this._materialCache[cacheKey].material.userData.shader) {\r\n                this._materialCache[cacheKey].material.userData.shader.uniforms.lightSizeUV.value = lightSizeUV;\r\n                this._materialCache[cacheKey].material.userData.shader.uniforms.blending.value = blending;\r\n            }\r\n        }\r\n    }\r\n    // #endregion Public Methods (18)\r\n    // #region Private Methods (4)\r\n    assignTextureEncoding() {\r\n        for (const cacheKey in this._materialCache) {\r\n            if (this._materialCache[cacheKey].material instanceof THREE.MeshPhysicalMaterial || this._materialCache[cacheKey].material instanceof THREE.MeshStandardMaterial) {\r\n                const material = this._materialCache[cacheKey].material;\r\n                if (material.emissiveMap) {\r\n                    material.emissiveMap.colorSpace = this._textureEncoding;\r\n                    material.emissiveMap.needsUpdate = true;\r\n                }\r\n                if (material.map) {\r\n                    material.map.colorSpace = this._textureEncoding;\r\n                    material.map.needsUpdate = true;\r\n                }\r\n                material.needsUpdate = true;\r\n            }\r\n        }\r\n    }\r\n    createDataKeyFromMap(map) {\r\n        return (0, viewer_shared_services_1.btoaCustom)(`${map.image.src}_${map.center}_${map.color}_${map.flipY}_${map.magFilter}_${map.minFilter}_${map.offset}_${map.repeat}_${map.rotation}_${map.texCoord}_${map.wrapS}_${map.wrapT}`);\r\n    }\r\n    createDataKeyFromMaterial(data, type, materialSettings) {\r\n        return data ? (0, viewer_shared_services_1.btoaCustom)(data.id + '_' + data.version + '_' + type + '_' + JSON.stringify(materialSettings)) : (0, viewer_shared_services_1.btoaCustom)(type + '_' + JSON.stringify(materialSettings));\r\n    }\r\n    createTexture(map) {\r\n        if (map.image instanceof ArrayBuffer)\r\n            return new THREE.Texture();\r\n        const key = this.createDataKeyFromMap(map);\r\n        // texture in this structure are only stored until the next scene tree update call\r\n        // therefore no cache management is needed, as these textures need to be created either way\r\n        // the cache is cleared in updateSceneTree\r\n        if (this._threeJsTextureCache[key]) {\r\n            this._threeJsTextureCache[key].usage++;\r\n            return this._threeJsTextureCache[key].texture;\r\n        }\r\n        let texture;\r\n        if (map.asData === true) {\r\n            texture = new THREE.DataTexture(new Uint32Array(map.data), map.data.length, 1, THREE.RedIntegerFormat, THREE.UnsignedIntType);\r\n            texture.internalFormat = 'R32UI';\r\n        }\r\n        else {\r\n            texture = new THREE.Texture(map.image);\r\n            texture.format = THREE.RGBAFormat;\r\n            texture.minFilter = (() => {\r\n                switch (map.minFilter) {\r\n                    case viewer_shared_types_1.TEXTURE_FILTERING.NEAREST:\r\n                        return THREE.NearestFilter;\r\n                    case viewer_shared_types_1.TEXTURE_FILTERING.NEAREST_MIPMAP_NEAREST:\r\n                        return THREE.NearestMipMapNearestFilter;\r\n                    case viewer_shared_types_1.TEXTURE_FILTERING.LINEAR_MIPMAP_NEAREST:\r\n                        return THREE.LinearMipMapNearestFilter;\r\n                    case viewer_shared_types_1.TEXTURE_FILTERING.NEAREST_MIPMAP_LINEAR:\r\n                        return THREE.NearestMipMapLinearFilter;\r\n                    case viewer_shared_types_1.TEXTURE_FILTERING.LINEAR:\r\n                        return THREE.LinearFilter;\r\n                    case viewer_shared_types_1.TEXTURE_FILTERING.LINEAR_MIPMAP_LINEAR:\r\n                    default:\r\n                        return THREE.LinearMipMapLinearFilter;\r\n                }\r\n            })();\r\n            texture.magFilter = (() => {\r\n                switch (map.magFilter) {\r\n                    case viewer_shared_types_1.TEXTURE_FILTERING.NEAREST:\r\n                        return THREE.NearestFilter;\r\n                    case viewer_shared_types_1.TEXTURE_FILTERING.LINEAR:\r\n                    default:\r\n                        return THREE.LinearFilter;\r\n                }\r\n            })();\r\n            texture.wrapS = (() => {\r\n                switch (map.wrapS) {\r\n                    case viewer_shared_types_1.TEXTURE_WRAPPING.CLAMP_TO_EDGE:\r\n                        return THREE.ClampToEdgeWrapping;\r\n                    case viewer_shared_types_1.TEXTURE_WRAPPING.MIRRORED_REPEAT:\r\n                        return THREE.MirroredRepeatWrapping;\r\n                    case viewer_shared_types_1.TEXTURE_WRAPPING.REPEAT:\r\n                    default:\r\n                        return THREE.RepeatWrapping;\r\n                }\r\n            })();\r\n            texture.wrapT = (() => {\r\n                switch (map.wrapT) {\r\n                    case viewer_shared_types_1.TEXTURE_WRAPPING.CLAMP_TO_EDGE:\r\n                        return THREE.ClampToEdgeWrapping;\r\n                    case viewer_shared_types_1.TEXTURE_WRAPPING.MIRRORED_REPEAT:\r\n                        return THREE.MirroredRepeatWrapping;\r\n                    case viewer_shared_types_1.TEXTURE_WRAPPING.REPEAT:\r\n                    default:\r\n                        return THREE.RepeatWrapping;\r\n                }\r\n            })();\r\n            texture.center = new THREE.Vector2(map.center[0], map.center[1]);\r\n            texture.offset = new THREE.Vector2(map.offset[0], map.offset[1]);\r\n            texture.repeat = new THREE.Vector2(map.repeat[0], map.repeat[1]);\r\n            texture.rotation = map.rotation;\r\n            if (map.texCoord !== undefined)\r\n                texture.channel = map.texCoord;\r\n            texture.flipY = map.flipY;\r\n        }\r\n        texture.needsUpdate = true;\r\n        texture.userData.cacheKey = key;\r\n        this._threeJsTextureCache[key] = {\r\n            texture,\r\n            usage: 1,\r\n            initialized: false\r\n        };\r\n        return this._threeJsTextureCache[key].texture;\r\n    }\r\n}\r\nexports.MaterialLoader = MaterialLoader;\r\n// #endregion Classes (1)\r\n// #region Enums (1)\r\n/* eslint-disable @typescript-eslint/no-empty-function */\r\nvar MATERIAL_TYPE;\r\n(function (MATERIAL_TYPE) {\r\n    MATERIAL_TYPE[\"POINT\"] = \"point\";\r\n    MATERIAL_TYPE[\"LINE\"] = \"line\";\r\n    MATERIAL_TYPE[\"MESH\"] = \"mesh\";\r\n})(MATERIAL_TYPE = exports.MATERIAL_TYPE || (exports.MATERIAL_TYPE = {}));\r\n// #endregion Enums (1)\r\n// #region Variables (1)\r\nconst adaptShaders = () => {\r\n    let shader = THREE.ShaderChunk.shadowmap_pars_fragment;\r\n    if (!shader.includes('PCSS implementation')) {\r\n        shader = shader.replace('#ifdef USE_SHADOWMAP', '#ifdef USE_SHADOWMAP' + PCSS_1.main);\r\n        shader = shader.replace(shader.substr(shader.indexOf('#if defined( SHADOWMAP_TYPE_PCF )'), shader.indexOf('#elif defined( SHADOWMAP_TYPE_PCF_SOFT )') - shader.indexOf('#if defined( SHADOWMAP_TYPE_PCF )')), '#if defined( SHADOWMAP_TYPE_PCF )\\n' + PCSS_1.entry);\r\n    }\r\n    THREE.ShaderChunk.shadowmap_pars_fragment = shader;\r\n    // here we replace in the background cube fragment shader the y component of the reflection vector with the negative y component and inverse the rotation in the case of a LDR environment map\r\n    // console.log(THREE.ShaderChunk.backgroundCube_frag.includes('vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );'))\r\n    THREE.ShaderChunk.backgroundCube_frag = THREE.ShaderChunk.backgroundCube_frag.replace('vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );', 'vec4 texColor = textureCube( envMap, inverse(backgroundRotation) * vec3( flipEnvMap * vWorldDirection.x, -vWorldDirection.y, vWorldDirection.z ) );');\r\n    THREE.ShaderLib.backgroundCube.fragmentShader = THREE.ShaderChunk.backgroundCube_frag;\r\n    // here we replace in the envmap_physical_pars_fragment the z component of the reflection vector with the negative z component in the case of a LDR environment map\r\n    // console.log(THREE.ShaderChunk.envmap_physical_pars_fragment, THREE.ShaderChunk.envmap_physical_pars_fragment.includes('vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );'));\r\n    THREE.ShaderChunk.envmap_physical_pars_fragment = THREE.ShaderChunk.envmap_physical_pars_fragment.replace('vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );', `\r\n            #ifdef ENVMAP_TYPE_LDR\r\n                vec3 rotatedReflectVec = vec3(envMapRotation * worldNormal).xzy;\r\n                vec4 envMapColor = textureCubeUV( envMap, vec3(rotatedReflectVec.xy, -rotatedReflectVec.z), 1.0 );\r\n            #else\r\n                vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\r\n            #endif\r\n            `);\r\n    // here we replace in the envmap_fragment the z component of the reflection vector with the negative z component in the case of a LDR environment map\r\n    // console.log(THREE.ShaderChunk.envmap_physical_pars_fragment, THREE.ShaderChunk.envmap_physical_pars_fragment.includes('vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );'));\r\n    THREE.ShaderChunk.envmap_physical_pars_fragment = THREE.ShaderChunk.envmap_physical_pars_fragment.replace('vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );', `\r\n            #ifdef ENVMAP_TYPE_LDR\r\n                vec3 rotatedReflectVec = vec3(envMapRotation * reflectVec).xzy;\r\n                vec4 envMapColor = textureCubeUV( envMap, vec3(rotatedReflectVec.xy, -rotatedReflectVec.z), roughness );\r\n            #else\r\n                vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\r\n            #endif\r\n            `);\r\n    // here we replace in the envmap_fragment the z component of the reflection vector with the negative z component in the case of a LDR environment map\r\n    // console.log(THREE.ShaderChunk.envmap_fragment, THREE.ShaderChunk.envmap_fragment.includes('vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );'));\r\n    THREE.ShaderChunk.envmap_fragment = THREE.ShaderChunk.envmap_fragment.replace('vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );', `\r\n        #ifdef ENVMAP_TYPE_LDR\r\n            vec4 envColor = textureCube( envMap, envMapRotation * vec3(flipEnvMap * reflectVec.x, reflectVec.y, -reflectVec.z ) );\r\n        #else\r\n            vec4 envColor = textureCube( envMap, envMapRotation * vec3( -flipEnvMap * reflectVec.x, reflectVec.zy ) );\r\n        #endif\r\n        `);\r\n    // here we replace the z and y component of the sampleDir in the cube_uv_reflection_fragment\r\n    // console.log(THREE.ShaderChunk.cube_uv_reflection_fragment.includes('vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );'))\r\n    THREE.ShaderChunk.cube_uv_reflection_fragment = THREE.ShaderChunk.cube_uv_reflection_fragment.replace('vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );', 'vec3 color0 = bilinearCubeUV( envMap, sampleDir.xzy, mipInt );');\r\n    // here we replace the z and y component of the sampleDir in the cube_uv_reflection_fragment\r\n    // console.log(THREE.ShaderChunk.cube_uv_reflection_fragment)\r\n    THREE.ShaderChunk.cube_uv_reflection_fragment = THREE.ShaderChunk.cube_uv_reflection_fragment.replace('vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );', 'vec3 color1 = bilinearCubeUV( envMap, sampleDir.xzy, mipInt + 1.0 );');\r\n    // here we create a new case in the lights_fragment_maps for the case of ENVMAP_TYPE_NONE\r\n    if (!THREE.ShaderChunk.lights_fragment_maps.includes('vec3 reflectVec')) {\r\n        const index = THREE.ShaderChunk.lights_fragment_maps.lastIndexOf('#endif');\r\n        THREE.ShaderChunk.lights_fragment_maps = THREE.ShaderChunk.lights_fragment_maps.substring(0, index) +\r\n            `#else\r\n            #ifdef ENVMAP_TYPE_NONE\r\n                vec3 reflectVec = reflect( -geometryViewDir, geometryNormal );\r\n                reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\r\n                vec4 adjustedEnvReflectVector = vec4(reflectVec, 1.0);\r\n                radiance += (vec3((adjustedEnvReflectVector.z + 1.0) / 2.0) + 0.5) / 1.5;\r\n            #endif\r\n        #endif\r\n        ` + THREE.ShaderChunk.lights_fragment_maps.substring(index + '#endif'.length);\r\n    }\r\n};\r\nexports.adaptShaders = adaptShaders;\r\n// #endregion Variables (1)\r\n//# sourceMappingURL=MaterialLoader.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar _CameraManager_camera, _CameraManager_cameraCache;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CameraManager = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst viewer_rendering_engine_camera_engine_1 = require(\"@shapediver/viewer.rendering-engine.camera-engine\");\r\nclass CameraManager {\r\n    // #endregion Properties (2)\r\n    // #region Constructors (1)\r\n    constructor(_renderingEngine) {\r\n        this._renderingEngine = _renderingEngine;\r\n        // #region Properties (2)\r\n        _CameraManager_camera.set(this, new THREE.PerspectiveCamera());\r\n        _CameraManager_cameraCache.set(this, {});\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Getters And Setters (1)\r\n    get camera() {\r\n        return __classPrivateFieldGet(this, _CameraManager_camera, \"f\");\r\n    }\r\n    // #endregion Public Getters And Setters (1)\r\n    // #region Public Methods (4)\r\n    adjustCamera(aspect) {\r\n        let cameraThree;\r\n        let matrix;\r\n        const camera = this._renderingEngine.cameraEngine.camera;\r\n        if (camera.useNodeData) {\r\n            const sdCameraNode = camera.convertedObject[this._renderingEngine.id];\r\n            const sdCameraData = sdCameraNode.children[0];\r\n            cameraThree = sdCameraData.children[0];\r\n        }\r\n        else {\r\n            if (this._renderingEngine.cameraEngine.camera.type === viewer_rendering_engine_camera_engine_1.CAMERA_TYPE.ORTHOGRAPHIC) {\r\n                const orthographicCameraData = camera;\r\n                let orthographicCameraThreeJs = orthographicCameraData.convertedObject[this._renderingEngine.id];\r\n                if (!orthographicCameraThreeJs)\r\n                    this.load(orthographicCameraData);\r\n                orthographicCameraThreeJs = orthographicCameraData.convertedObject[this._renderingEngine.id];\r\n                const distance = gl_matrix_1.vec3.distance(orthographicCameraData.position, orthographicCameraData.target) / 2;\r\n                orthographicCameraThreeJs.up.set(orthographicCameraData.up[0], orthographicCameraData.up[1], orthographicCameraData.up[2]);\r\n                orthographicCameraThreeJs.left = orthographicCameraData.left = -distance * aspect;\r\n                orthographicCameraThreeJs.bottom = orthographicCameraData.bottom = -distance;\r\n                orthographicCameraThreeJs.right = orthographicCameraData.right = distance * aspect;\r\n                orthographicCameraThreeJs.top = orthographicCameraData.top = distance;\r\n                orthographicCameraThreeJs.near = orthographicCameraData.near = 0.01;\r\n                orthographicCameraThreeJs.far = orthographicCameraData.far = 100 * distance;\r\n                orthographicCameraThreeJs.position.set(orthographicCameraData.position[0], orthographicCameraData.position[1], orthographicCameraData.position[2]);\r\n                orthographicCameraThreeJs.lookAt(orthographicCameraData.target[0], orthographicCameraData.target[1], orthographicCameraData.target[2]);\r\n                orthographicCameraThreeJs.updateProjectionMatrix();\r\n                if (orthographicCameraData.controls.enableTurntableControls === true) {\r\n                    matrix = gl_matrix_1.mat4.create();\r\n                    gl_matrix_1.mat4.rotateZ(matrix, matrix, -orthographicCameraData.sceneRotation[1]);\r\n                    gl_matrix_1.mat4.translate(matrix, matrix, orthographicCameraData.controls.turntableCenter);\r\n                }\r\n                else if (orthographicCameraData.controls.enableObjectControls === true) {\r\n                    matrix = gl_matrix_1.mat4.create();\r\n                    gl_matrix_1.mat4.rotateX(matrix, matrix, -orthographicCameraData.sceneRotation[0]);\r\n                    gl_matrix_1.mat4.rotateZ(matrix, matrix, -orthographicCameraData.sceneRotation[1]);\r\n                    gl_matrix_1.mat4.translate(matrix, matrix, orthographicCameraData.controls.objectControlsCenter);\r\n                }\r\n                cameraThree = orthographicCameraThreeJs;\r\n            }\r\n            else {\r\n                const perspectiveCameraData = camera;\r\n                let perspectiveCameraThreeJs = perspectiveCameraData.convertedObject[this._renderingEngine.id];\r\n                if (!perspectiveCameraThreeJs)\r\n                    this.load(perspectiveCameraData);\r\n                perspectiveCameraThreeJs = perspectiveCameraData.convertedObject[this._renderingEngine.id];\r\n                perspectiveCameraThreeJs.up.set(0, 0, 1);\r\n                const fov = this._renderingEngine.cameraEngine.camera.fov;\r\n                const bs = this._renderingEngine.sceneTreeManager.boundingBox.boundingSphere;\r\n                const radius = bs.radius > 0 ? bs.radius : 2;\r\n                perspectiveCameraThreeJs.fov = perspectiveCameraData.fov = fov;\r\n                perspectiveCameraThreeJs.aspect = perspectiveCameraData.aspect = aspect;\r\n                perspectiveCameraThreeJs.far = perspectiveCameraData.far = (fov < 10 ? fov * 100.0 * 100 * radius : 100 * radius);\r\n                perspectiveCameraThreeJs.near = perspectiveCameraData.near = (fov < 10 ? fov * 100.0 * 0.01 * radius : 0.01 * radius);\r\n                perspectiveCameraThreeJs.position.set(perspectiveCameraData.position[0], perspectiveCameraData.position[1], perspectiveCameraData.position[2]);\r\n                perspectiveCameraThreeJs.lookAt(perspectiveCameraData.target[0], perspectiveCameraData.target[1], perspectiveCameraData.target[2]);\r\n                perspectiveCameraThreeJs.updateProjectionMatrix();\r\n                if (perspectiveCameraData.controls.enableTurntableControls === true) {\r\n                    matrix = gl_matrix_1.mat4.create();\r\n                    gl_matrix_1.mat4.rotateZ(matrix, matrix, -perspectiveCameraData.sceneRotation[1]);\r\n                    gl_matrix_1.mat4.translate(matrix, matrix, perspectiveCameraData.controls.turntableCenter);\r\n                }\r\n                else if (perspectiveCameraData.controls.enableObjectControls === true) {\r\n                    matrix = gl_matrix_1.mat4.create();\r\n                    gl_matrix_1.mat4.rotateX(matrix, matrix, -perspectiveCameraData.sceneRotation[0]);\r\n                    gl_matrix_1.mat4.rotateZ(matrix, matrix, -perspectiveCameraData.sceneRotation[1]);\r\n                    gl_matrix_1.mat4.translate(matrix, matrix, perspectiveCameraData.controls.objectControlsCenter);\r\n                }\r\n                cameraThree = perspectiveCameraThreeJs;\r\n            }\r\n        }\r\n        __classPrivateFieldSet(this, _CameraManager_camera, cameraThree, \"f\");\r\n        return { camera: cameraThree, matrix };\r\n    }\r\n    init() { }\r\n    load(camera, dataChild) {\r\n        let threeCamera = __classPrivateFieldGet(this, _CameraManager_cameraCache, \"f\")[camera.id];\r\n        if (camera instanceof viewer_rendering_engine_camera_engine_1.PerspectiveCamera) {\r\n            if (!threeCamera) {\r\n                threeCamera = new THREE.PerspectiveCamera();\r\n                __classPrivateFieldGet(this, _CameraManager_cameraCache, \"f\")[camera.id] = threeCamera;\r\n                camera.convertedObject[this._renderingEngine.id] = threeCamera;\r\n                if (dataChild)\r\n                    dataChild.add(threeCamera);\r\n            }\r\n            else {\r\n                camera.convertedObject[this._renderingEngine.id] = threeCamera;\r\n                if (dataChild && !dataChild.children.find(t => t === threeCamera))\r\n                    dataChild.add(threeCamera);\r\n            }\r\n            const perspectiveCamera = camera;\r\n            const threePerspectiveCamera = threeCamera;\r\n            threePerspectiveCamera.up.set(0, 0, 1);\r\n            if (perspectiveCamera.useNodeData) {\r\n                threePerspectiveCamera.fov = perspectiveCamera.fov;\r\n                threePerspectiveCamera.aspect = perspectiveCamera.aspect;\r\n                threePerspectiveCamera.far = perspectiveCamera.far;\r\n                threePerspectiveCamera.near = perspectiveCamera.near;\r\n                threePerspectiveCamera.updateProjectionMatrix();\r\n            }\r\n        }\r\n        else {\r\n            if (!threeCamera) {\r\n                threeCamera = new THREE.OrthographicCamera(0, 0, 0, 0);\r\n                __classPrivateFieldGet(this, _CameraManager_cameraCache, \"f\")[camera.id] = threeCamera;\r\n                camera.convertedObject[this._renderingEngine.id] = threeCamera;\r\n                if (dataChild)\r\n                    dataChild.add(threeCamera);\r\n            }\r\n            else {\r\n                camera.convertedObject[this._renderingEngine.id] = threeCamera;\r\n                if (dataChild && !dataChild.children.find(t => t === threeCamera))\r\n                    dataChild.add(threeCamera);\r\n            }\r\n            const orthographicCamera = camera;\r\n            const threeOrthographicCamera = threeCamera;\r\n            threeOrthographicCamera.up.set(orthographicCamera.up[0], orthographicCamera.up[1], orthographicCamera.up[2]);\r\n            if (orthographicCamera.useNodeData) {\r\n                threeOrthographicCamera.left = orthographicCamera.left;\r\n                threeOrthographicCamera.bottom = orthographicCamera.bottom;\r\n                threeOrthographicCamera.right = orthographicCamera.right;\r\n                threeOrthographicCamera.top = orthographicCamera.top;\r\n                threeOrthographicCamera.near = orthographicCamera.near;\r\n                threeOrthographicCamera.far = orthographicCamera.far;\r\n                threeOrthographicCamera.updateProjectionMatrix();\r\n            }\r\n        }\r\n    }\r\n    updateCamera(time, aspect) {\r\n        var _a;\r\n        if (((_a = this._renderingEngine.cameraEngine.camera) === null || _a === void 0 ? void 0 : _a.type) === 'perspective')\r\n            this._renderingEngine.cameraEngine.camera.aspect = aspect;\r\n        return this._renderingEngine.cameraEngine.camera.update(time);\r\n    }\r\n}\r\nexports.CameraManager = CameraManager;\r\n_CameraManager_camera = new WeakMap(), _CameraManager_cameraCache = new WeakMap();\r\n//# sourceMappingURL=CameraManager.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EnvironmentGeometryManager = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nconst viewer_shared_types_1 = require(\"@shapediver/viewer.shared.types\");\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst viewer_shared_math_1 = require(\"@shapediver/viewer.shared.math\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst SDData_1 = require(\"../objects/SDData\");\r\nconst SDObject_1 = require(\"../objects/SDObject\");\r\nclass EnvironmentGeometryManager {\r\n    // #endregion Properties (5)\r\n    // #region Constructors (1)\r\n    constructor(_renderingEngine) {\r\n        this._renderingEngine = _renderingEngine;\r\n        // #region Properties (5)\r\n        this._converter = viewer_shared_services_1.Converter.instance;\r\n        this._eventEngine = viewer_shared_services_1.EventEngine.instance;\r\n        this._groundPlaneColor = '#d3d3d3ff';\r\n        this._groundPlaneShadowColor = '#d3d3d3ff';\r\n        this._gridColor = '#44444426';\r\n        this._initialized = false;\r\n        this._eventEngine.addListener(viewer_shared_services_1.EVENTTYPE.SCENE.SCENE_BOUNDING_BOX_CHANGE, (e) => {\r\n            this.updateEnvironmentGeometryPosition();\r\n        });\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (2)\r\n    get gridColor() {\r\n        return this._gridColor;\r\n    }\r\n    set gridColor(value) {\r\n        this._gridColor = value;\r\n        this._grid.material.opacity = typeof this._gridColor == 'string' && this._gridColor.length <= 8 ? 0.15 : this._converter.toAlpha(this._gridColor);\r\n        this._grid.material.transparent = this._grid.material.opacity !== 1;\r\n        this._grid.material.color = this._renderingEngine.createThreeJsColor(this._gridColor);\r\n        this._grid.material.needsUpdate = true;\r\n    }\r\n    get groundPlaneColor() {\r\n        return this._groundPlaneColor;\r\n    }\r\n    set groundPlaneColor(value) {\r\n        this._groundPlaneColor = value;\r\n        this.assignGroundPlaneColor(value);\r\n    }\r\n    get groundPlaneShadowColor() {\r\n        return this._groundPlaneShadowColor;\r\n    }\r\n    set groundPlaneShadowColor(value) {\r\n        this._groundPlaneShadowColor = value;\r\n        this.assignGroundPlaneShadowColor(value);\r\n    }\r\n    get grid() {\r\n        return this._grid;\r\n    }\r\n    get groundPlane() {\r\n        return this._groundPlane;\r\n    }\r\n    get groundPlaneShadow() {\r\n        return this._groundPlaneShadow;\r\n    }\r\n    // #endregion Public Accessors (2)\r\n    // #region Public Methods (2)\r\n    assignGroundPlaneColor(color) {\r\n        this._groundPlane.material.opacity = this._converter.toAlpha(color);\r\n        this._groundPlane.material.transparent = this._groundPlane.material.opacity !== 1;\r\n        this._groundPlane.material.depthWrite = !this._groundPlane.material.transparent;\r\n        this._groundPlane.material.color = this._renderingEngine.createThreeJsColor(color);\r\n        this._groundPlane.material.needsUpdate = true;\r\n    }\r\n    assignGroundPlaneShadowColor(color) {\r\n        this._groundPlaneShadow.material.opacity = this._converter.toAlpha(color);\r\n        this._groundPlaneShadow.material.color = this._renderingEngine.createThreeJsColor(color);\r\n        this._groundPlaneShadow.material.needsUpdate = true;\r\n    }\r\n    /**\r\n     * Creates the grid extents and divisios with the specified scene extents.\r\n     *\r\n     * https://shapediver.atlassian.net/browse/SS-2961 evaluate this magic.\r\n     */\r\n    evaluateGridMeasurements(sceneExtents) {\r\n        let divisions = 0.1;\r\n        let gridExtents = 1.0;\r\n        if (sceneExtents > 1) {\r\n            let tmp = Math.floor(sceneExtents).toString();\r\n            let temp = Math.pow(10, tmp.length - 1);\r\n            gridExtents = Math.max(Math.ceil(sceneExtents / temp) * temp, 1);\r\n            temp = temp / 10;\r\n            divisions = gridExtents / temp;\r\n        }\r\n        else if (sceneExtents !== 0) {\r\n            let zeros = 1 - Math.floor(Math.log(sceneExtents) / Math.log(10)) - 2;\r\n            let r = sceneExtents.toFixed(zeros + 1);\r\n            let firstDigit = parseInt(r.substr(r.length - 1)) + 1;\r\n            let gridExtentsS = '0.';\r\n            for (let i = 0; i < zeros; ++i)\r\n                gridExtentsS = gridExtentsS + '0';\r\n            gridExtents = parseFloat(gridExtentsS + firstDigit);\r\n            divisions = firstDigit * 10;\r\n        }\r\n        return { divisions, gridExtents };\r\n    }\r\n    changeSceneExtents(bb) {\r\n        if (((bb.min[0] === 0 && bb.min[1] === 0 && bb.min[2] === 0) && (bb.max[0] === 0 && bb.max[1] === 0 && bb.max[2] === 0)) || bb.isEmpty())\r\n            return;\r\n        this._initialized = true;\r\n        let sceneExtents = gl_matrix_1.vec3.distance(bb.min, bb.max);\r\n        const { divisions, gridExtents } = this.evaluateGridMeasurements(sceneExtents);\r\n        this._gridObject.remove(this._grid);\r\n        this._grid = new THREE.GridHelper(2 * gridExtents, divisions);\r\n        this._grid.material.opacity = typeof this._gridColor == 'string' && this._gridColor.length <= 8 ? 0.15 : this._converter.toAlpha(this._gridColor);\r\n        this._grid.material.transparent = this._grid.material.opacity !== 1;\r\n        this._grid.material.color = this._renderingEngine.createThreeJsColor(this._gridColor);\r\n        this._grid.rotateX(Math.PI / 2);\r\n        this._grid.visible = this._renderingEngine.gridVisibility;\r\n        this._gridObject.add(this._grid);\r\n        this._groundPlane.geometry = new THREE.PlaneGeometry(2 * gridExtents, 2 * gridExtents, 2, 2);\r\n        this._groundPlaneShadow.geometry = new THREE.PlaneGeometry(2 * gridExtents, 2 * gridExtents, 2, 2);\r\n        let eps = 0.005;\r\n        let bs = bb.boundingSphere;\r\n        this._grid.position.set(bs.center[0], bs.center[1], bb.min[2] - eps);\r\n        this._groundPlane.position.set(bs.center[0], bs.center[1], bb.min[2] - 2 * eps);\r\n        this._groundPlaneShadow.position.set(bs.center[0], bs.center[1], bb.min[2] - 2 * eps);\r\n    }\r\n    init() {\r\n        this._environmentGeometryObject = new SDObject_1.SDObject('environmentGeometry', '');\r\n        this._renderingEngine.sceneTreeManager.scene.add(this._environmentGeometryObject);\r\n        this._gridObject = new SDData_1.SDData('grid', '');\r\n        this._grid = new THREE.GridHelper();\r\n        this._grid.material.opacity = typeof this._gridColor == 'string' && this._gridColor.length <= 8 ? 0.15 : this._converter.toAlpha(this._gridColor);\r\n        this._grid.material.transparent = this._grid.material.opacity !== 1;\r\n        this._grid.material.color = this._renderingEngine.createThreeJsColor(this._gridColor);\r\n        this._grid.rotateX(Math.PI / 2);\r\n        this._grid.visible = this._renderingEngine.gridVisibility;\r\n        this._gridObject.add(this._grid);\r\n        this._environmentGeometryObject.add(this._gridObject);\r\n        this._groundPlaneObject = new SDData_1.SDData('groundPlane', '');\r\n        let mat = new viewer_shared_types_1.MaterialStandardData();\r\n        mat.color = this._groundPlaneColor;\r\n        mat.side = viewer_shared_types_1.MATERIAL_SIDE.FRONT;\r\n        mat.opacity = this._converter.toAlpha(this._groundPlaneColor);\r\n        mat.roughness = 1;\r\n        mat.metalness = 0;\r\n        this._groundPlane = new THREE.Mesh(new THREE.PlaneGeometry(), this._renderingEngine.materialLoader.load(mat));\r\n        this._groundPlane.receiveShadow = true;\r\n        this._groundPlane.visible = this._renderingEngine.groundPlaneVisibility;\r\n        this._groundPlaneObject.add(this._groundPlane);\r\n        this._environmentGeometryObject.add(this._groundPlaneObject);\r\n        this._groundPlaneShadowObject = new SDData_1.SDData('groundPlaneShadow', '');\r\n        let matShadow = new viewer_shared_types_1.MaterialShadowData();\r\n        matShadow.color = this._groundPlaneShadowColor;\r\n        matShadow.opacity = this._converter.toAlpha(this._groundPlaneShadowColor);\r\n        this._groundPlaneShadow = new THREE.Mesh(new THREE.PlaneGeometry(), this._renderingEngine.materialLoader.load(matShadow));\r\n        this._groundPlaneShadow.receiveShadow = true;\r\n        this._groundPlaneShadow.visible = this._renderingEngine.groundPlaneShadowVisibility;\r\n        this._groundPlaneShadowObject.add(this._groundPlaneShadow);\r\n        this._groundPlaneShadowObject.userData.ambientOcclusion = false;\r\n        this._environmentGeometryObject.add(this._groundPlaneShadowObject);\r\n        let eps = 0.005;\r\n        this._grid.position.set(0, 0, -eps);\r\n        this._groundPlane.position.set(0, 0, -eps);\r\n        this._groundPlaneShadow.position.set(0, 0, -eps);\r\n    }\r\n    updateEnvironmentGeometryPosition() {\r\n        const bb = new viewer_shared_math_1.Box(this._renderingEngine.sceneTreeManager.boundingBox.min, this._renderingEngine.sceneTreeManager.boundingBox.max);\r\n        if (((bb.min[0] === 0 && bb.min[1] === 0 && bb.min[2] === 0) && (bb.max[0] === 0 && bb.max[1] === 0 && bb.max[2] === 0)) || bb.isEmpty())\r\n            return;\r\n        if (!this._initialized) {\r\n            this.changeSceneExtents(bb);\r\n        }\r\n        else {\r\n            let eps = 0.005;\r\n            let bs = bb.boundingSphere;\r\n            let sceneExtents = gl_matrix_1.vec3.distance(bb.min, bb.max);\r\n            const { divisions, gridExtents } = this.evaluateGridMeasurements(sceneExtents);\r\n            this._groundPlaneShadow.geometry = new THREE.PlaneGeometry(2 * gridExtents, 2 * gridExtents, 2, 2);\r\n            if (this._grid)\r\n                this._grid.position.set(bs.center[0], bs.center[1], bb.min[2] - eps);\r\n            if (this._groundPlane)\r\n                this._groundPlane.position.set(bs.center[0], bs.center[1], bb.min[2] - 2 * eps);\r\n            if (this._groundPlaneShadow)\r\n                this._groundPlaneShadow.position.set(bs.center[0], bs.center[1], bb.min[2] - 2 * eps);\r\n        }\r\n    }\r\n}\r\nexports.EnvironmentGeometryManager = EnvironmentGeometryManager;\r\n//# sourceMappingURL=EnvironmentGeometryManager.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.PostProcessingManager = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nconst postprocessing_1 = require(\"postprocessing\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst GodRaysManager_1 = require(\"./postprocessing/GodRaysManager\");\r\nconst IPostProcessingEffectDefinitions_1 = require(\"../interfaces/IPostProcessingEffectDefinitions\");\r\nconst OutlineManager_1 = require(\"./postprocessing/OutlineManager\");\r\nconst SelectiveBloomManager_1 = require(\"./postprocessing/SelectiveBloomManager\");\r\nconst SSAARenderPass_1 = require(\"./postprocessing/SSAARenderPass\");\r\nconst SSAOEffect_1 = require(\"./postprocessing/ao/ssao/SSAOEffect\");\r\nconst HBAOEffect_1 = require(\"./postprocessing/ao/hbao/HBAOEffect\");\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nclass PostProcessingManager {\r\n    // #endregion Properties (22)\r\n    // #region Constructors (1)\r\n    constructor(_renderingEngine) {\r\n        this._renderingEngine = _renderingEngine;\r\n        // #region Properties (22)\r\n        this._converter = viewer_shared_services_1.Converter.instance;\r\n        this._eventEngine = viewer_shared_services_1.EventEngine.instance;\r\n        this._systemInfo = viewer_shared_services_1.SystemInfo.instance;\r\n        this._uuidGenerator = viewer_shared_services_1.UuidGenerator.instance;\r\n        this._antiAliasingTechnique = IPostProcessingEffectDefinitions_1.ANTI_ALIASING_TECHNIQUE.SMAA;\r\n        this._antiAliasingTechniqueMobile = IPostProcessingEffectDefinitions_1.ANTI_ALIASING_TECHNIQUE.FXAA;\r\n        this._currentCameraId = '';\r\n        this._effectDefinitions = [];\r\n        this._effects = [];\r\n        this._enablePostProcessingOnMobile = true;\r\n        this._godRaysManagers = {};\r\n        this._manualPostProcessing = false;\r\n        this._outlineManagers = {};\r\n        this._sceneExtents = 0;\r\n        this._selectiveBloomManagers = {};\r\n        this._suspendEffectPassUpdate = false;\r\n        this._eventEngine.addListener(viewer_shared_services_1.EVENTTYPE.SCENE.SCENE_BOUNDING_BOX_CHANGE, (e) => {\r\n            const viewerEvent = e;\r\n            if (viewerEvent.viewportId === this._renderingEngine.id) {\r\n                this._sceneExtents = gl_matrix_1.vec3.distance(viewerEvent.boundingBox.min, viewerEvent.boundingBox.max);\r\n                this.changeEffectPass();\r\n            }\r\n        });\r\n        // const token = this._uuidGenerator.create();\r\n        // this._effectDefinitions.push({\r\n        //     token,\r\n        //     definition: {\r\n        //         type: POST_PROCESSING_EFFECT_TYPE.SSAO,\r\n        //         properties: this.getDefaultEffectProperties(POST_PROCESSING_EFFECT_TYPE.SSAO)\r\n        //     }\r\n        // });\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Getters And Setters (15)\r\n    get antiAliasingTechnique() {\r\n        return this._antiAliasingTechnique;\r\n    }\r\n    set antiAliasingTechnique(value) {\r\n        this._antiAliasingTechnique = value;\r\n        this.changeEffectPass();\r\n    }\r\n    get antiAliasingTechniqueMobile() {\r\n        return this._antiAliasingTechniqueMobile;\r\n    }\r\n    set antiAliasingTechniqueMobile(value) {\r\n        this._antiAliasingTechniqueMobile = value;\r\n        // we don't allow SSAA on mobile devices anymore as it is too slow\r\n        if (this._antiAliasingTechniqueMobile === IPostProcessingEffectDefinitions_1.ANTI_ALIASING_TECHNIQUE.SSAA)\r\n            this._antiAliasingTechniqueMobile = IPostProcessingEffectDefinitions_1.ANTI_ALIASING_TECHNIQUE.SMAA;\r\n        this.changeEffectPass();\r\n    }\r\n    get effectComposer() {\r\n        return this._composer;\r\n    }\r\n    get effects() {\r\n        return this._effects;\r\n    }\r\n    get enablePostProcessingOnMobile() {\r\n        return this._enablePostProcessingOnMobile;\r\n    }\r\n    set enablePostProcessingOnMobile(value) {\r\n        this._enablePostProcessingOnMobile = value;\r\n    }\r\n    get godRaysManagers() {\r\n        return this._godRaysManagers;\r\n    }\r\n    get manualPostProcessing() {\r\n        return this._manualPostProcessing;\r\n    }\r\n    set manualPostProcessing(value) {\r\n        this._manualPostProcessing = value;\r\n        if (this._composer && this._manualPostProcessing === true)\r\n            this._composer.removeAllPasses();\r\n    }\r\n    get outlineManagers() {\r\n        return this._outlineManagers;\r\n    }\r\n    get selectiveBloomManagers() {\r\n        return this._selectiveBloomManagers;\r\n    }\r\n    get ssaaSampleLevel() {\r\n        return this._ssaaRenderPass ? this._ssaaRenderPass.sampleLevel : 2;\r\n    }\r\n    set ssaaSampleLevel(value) {\r\n        if (this._ssaaRenderPass)\r\n            this._ssaaRenderPass.sampleLevel = value;\r\n    }\r\n    // #endregion Public Getters And Setters (15)\r\n    // #region Public Methods (13)\r\n    addEffect(definition, t) {\r\n        const token = t || this._uuidGenerator.create();\r\n        this._effectDefinitions.push({ token, definition });\r\n        switch (definition.type) {\r\n            case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.GOD_RAYS:\r\n                if (!this._godRaysManagers[token])\r\n                    this._godRaysManagers[token] = new GodRaysManager_1.GodRaysManager(this._renderingEngine);\r\n                break;\r\n            case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.OUTLINE:\r\n                if (!this._outlineManagers[token])\r\n                    this._outlineManagers[token] = new OutlineManager_1.OutlineManager(this._renderingEngine);\r\n                break;\r\n            case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.SELECTIVE_BLOOM:\r\n                if (!this._selectiveBloomManagers[token])\r\n                    this._selectiveBloomManagers[token] = new SelectiveBloomManager_1.SelectiveBloomManager(this._renderingEngine);\r\n                break;\r\n            default:\r\n        }\r\n        this.changeEffectPass();\r\n        return token;\r\n    }\r\n    applySettings(settingsEngine) {\r\n        this._suspendEffectPassUpdate = true;\r\n        this.antiAliasingTechnique = settingsEngine.settings.postprocessing.antiAliasingTechnique;\r\n        this.antiAliasingTechniqueMobile = settingsEngine.settings.postprocessing.antiAliasingTechniqueMobile;\r\n        // we don't allow SSAA on mobile devices anymore as it is too slow\r\n        if (this._antiAliasingTechniqueMobile === IPostProcessingEffectDefinitions_1.ANTI_ALIASING_TECHNIQUE.SSAA)\r\n            this._antiAliasingTechniqueMobile = IPostProcessingEffectDefinitions_1.ANTI_ALIASING_TECHNIQUE.SMAA;\r\n        this.enablePostProcessingOnMobile = settingsEngine.settings.postprocessing.enablePostProcessingOnMobile;\r\n        this.ssaaSampleLevel = settingsEngine.settings.postprocessing.ssaaSampleLevel;\r\n        this._effectDefinitions = [];\r\n        const effects = settingsEngine.settings.postprocessing.effects;\r\n        for (let i = 0; i < effects.length; i++) {\r\n            const token = this._uuidGenerator.create();\r\n            this._effectDefinitions.push({\r\n                token,\r\n                definition: {\r\n                    type: effects[i].type,\r\n                    properties: effects[i].properties\r\n                }\r\n            });\r\n        }\r\n        this._suspendEffectPassUpdate = false;\r\n        this.changeEffectPass();\r\n    }\r\n    changeEffectPass() {\r\n        if (!this._composer)\r\n            return;\r\n        if (this._suspendEffectPassUpdate === true)\r\n            return;\r\n        if (this._systemInfo.isMobile === true && this._enablePostProcessingOnMobile === false)\r\n            return;\r\n        if (this._manualPostProcessing)\r\n            return;\r\n        for (let i = 0; i < this._composer.passes.length; i++)\r\n            this._composer.passes[i].dispose();\r\n        this._composer.removeAllPasses();\r\n        const antiAliasingTechnique = this._systemInfo.isMobile === true ? this._antiAliasingTechniqueMobile : this._antiAliasingTechnique;\r\n        if (antiAliasingTechnique === IPostProcessingEffectDefinitions_1.ANTI_ALIASING_TECHNIQUE.SSAA) {\r\n            this.addPassToEffectComposer(this._ssaaRenderPass);\r\n        }\r\n        else {\r\n            this.addPassToEffectComposer(this._renderPass);\r\n        }\r\n        // remove the effects where the tokens are not in the effectDefinitions\r\n        this._effects.forEach(e => e.effect.dispose());\r\n        this._effects = [];\r\n        for (let i = 0; i < this._effectDefinitions.length; i++) {\r\n            switch (this._effectDefinitions[i].definition.type) {\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.BLOOM:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        this._effects.push({\r\n                            token: this._effectDefinitions[i].token,\r\n                            effect: new postprocessing_1.BloomEffect({\r\n                                blendFunction: properties.blendFunction,\r\n                                luminanceThreshold: properties.luminanceThreshold,\r\n                                luminanceSmoothing: properties.luminanceSmoothing,\r\n                                mipmapBlur: properties.mipmapBlur,\r\n                                intensity: properties.intensity,\r\n                                kernelSize: properties.kernelSize\r\n                            })\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.CHROMATIC_ABERRATION:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        const offsetArray = properties.offset !== undefined ? Array.isArray(properties.offset) ? properties.offset : [properties.offset.x, properties.offset.y] : undefined;\r\n                        this._effects.push({\r\n                            token: this._effectDefinitions[i].token,\r\n                            effect: new postprocessing_1.ChromaticAberrationEffect({\r\n                                blendFunction: properties.blendFunction,\r\n                                offset: offsetArray ? new THREE.Vector2(...offsetArray) : undefined,\r\n                                radialModulation: properties.radialModulation !== undefined ? properties.radialModulation : false,\r\n                                modulationOffset: properties.modulationOffset !== undefined ? properties.modulationOffset : 0.15\r\n                            })\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.DEPTH_OF_FIELD:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        const depthOfFieldEffect = new postprocessing_1.DepthOfFieldEffect(this._renderingEngine.camera, {\r\n                            blendFunction: properties.blendFunction,\r\n                            focusDistance: properties.focusDistance !== undefined ? properties.focusDistance : 0,\r\n                            focusRange: properties.focusRange !== undefined ? properties.focusRange : 0.01,\r\n                            bokehScale: properties.bokehScale !== undefined ? properties.bokehScale : 5,\r\n                            resolutionScale: 1\r\n                        });\r\n                        depthOfFieldEffect.resolution.height = 1080;\r\n                        depthOfFieldEffect.blurPass.kernelSize = postprocessing_1.KernelSize.HUGE;\r\n                        this._effects.push({\r\n                            token: this._effectDefinitions[i].token,\r\n                            effect: depthOfFieldEffect\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.DOT_SCREEN:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        this._effects.push({\r\n                            token: this._effectDefinitions[i].token,\r\n                            effect: new postprocessing_1.DotScreenEffect({\r\n                                blendFunction: properties.blendFunction,\r\n                                scale: properties.scale,\r\n                                angle: properties.angle\r\n                            })\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.GOD_RAYS:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        const godRaysEffect = new postprocessing_1.GodRaysEffect(this._renderingEngine.camera, new THREE.Mesh(), {\r\n                            blendFunction: properties.blendFunction,\r\n                            density: properties.density,\r\n                            decay: properties.decay,\r\n                            weight: properties.weight,\r\n                            exposure: properties.exposure,\r\n                            clampMax: properties.clampMax,\r\n                            kernelSize: properties.kernelSize,\r\n                            blur: properties.blur\r\n                        });\r\n                        this._effects.push({\r\n                            token: this._effectDefinitions[i].token,\r\n                            effect: godRaysEffect\r\n                        });\r\n                        this._godRaysManagers[this._effectDefinitions[i].token].setEffect(godRaysEffect);\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.GRID:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        this._effects.push({\r\n                            token: this._effectDefinitions[i].token,\r\n                            effect: new postprocessing_1.GridEffect({\r\n                                blendFunction: properties.blendFunction !== undefined ? properties.blendFunction : postprocessing_1.BlendFunction.MULTIPLY,\r\n                                scale: properties.scale\r\n                            })\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.HBAO:\r\n                    {\r\n                        // we currently do not support devices with WebGL 1: https://shapediver.atlassian.net/browse/SS-7069\r\n                        if (this._renderingEngine.renderer.capabilities.isWebGL2 === false)\r\n                            break;\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        // we adjust the scene size slightly to make the factor fit our requirements\r\n                        // with this adjusted factor, a distance value of 1 fits well as a default\r\n                        const sceneSizeFactor = this._sceneExtents / 10.0;\r\n                        const hbaoEffect = new HBAOEffect_1.HBAOEffect(this._composer, this._renderingEngine.camera, this._renderingEngine.scene, {\r\n                            resolutionScale: properties.resolutionScale !== undefined ? properties.resolutionScale : 1,\r\n                            spp: properties.spp !== undefined ? properties.spp : 8,\r\n                            distance: properties.distance !== undefined ? properties.distance * sceneSizeFactor : sceneSizeFactor,\r\n                            distancePower: properties.distanceIntensity !== undefined ? properties.distanceIntensity : 1,\r\n                            power: properties.intensity !== undefined ? properties.intensity : 2.5,\r\n                            bias: properties.bias !== undefined ? properties.bias : 10,\r\n                            thickness: properties.thickness !== undefined ? properties.thickness : 0.5,\r\n                            color: properties.color !== undefined ? new THREE.Color(this._converter.toHexColor(properties.color).substring(0, 7)) : new THREE.Color('black'),\r\n                            iterations: properties.iterations !== undefined ? properties.iterations : 1,\r\n                            radius: properties.radius !== undefined ? properties.radius : 15,\r\n                            rings: properties.rings !== undefined ? properties.rings : 4,\r\n                            lumaPhi: properties.lumaPhi !== undefined ? properties.lumaPhi : 10,\r\n                            depthPhi: properties.depthPhi !== undefined ? properties.depthPhi : 2,\r\n                            normalPhi: properties.normalPhi !== undefined ? properties.normalPhi : 3.25,\r\n                            samples: properties.samples !== undefined ? properties.samples : 16\r\n                        });\r\n                        this._effects.push({\r\n                            token: this._effectDefinitions[i].token,\r\n                            effect: hbaoEffect\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.HUE_SATURATION:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        this._effects.push({\r\n                            token: this._effectDefinitions[i].token,\r\n                            effect: new postprocessing_1.HueSaturationEffect({\r\n                                blendFunction: properties.blendFunction,\r\n                                hue: properties.hue,\r\n                                saturation: properties.saturation\r\n                            })\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.NOISE:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        this._effects.push({\r\n                            token: this._effectDefinitions[i].token,\r\n                            effect: new postprocessing_1.NoiseEffect({\r\n                                blendFunction: properties.blendFunction,\r\n                                premultiply: properties.premultiply\r\n                            })\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.OUTLINE:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        const outlineEffect = new postprocessing_1.OutlineEffect(this._renderingEngine.scene, this._renderingEngine.camera, {\r\n                            blendFunction: properties.blendFunction !== undefined ? properties.blendFunction : postprocessing_1.BlendFunction.SCREEN,\r\n                            edgeStrength: properties.edgeStrength,\r\n                            pulseSpeed: properties.pulseSpeed,\r\n                            visibleEdgeColor: new THREE.Color(this._converter.toHexColor(properties.visibleEdgeColor).substring(0, 7)),\r\n                            hiddenEdgeColor: new THREE.Color(this._converter.toHexColor(properties.hiddenEdgeColor).substring(0, 7)),\r\n                            kernelSize: properties.kernelSize,\r\n                            blur: properties.blur,\r\n                            xRay: properties.xRay,\r\n                            multisampling: properties.multisampling\r\n                        });\r\n                        this._effects.push({\r\n                            token: this._effectDefinitions[i].token,\r\n                            effect: outlineEffect\r\n                        });\r\n                        this._outlineManagers[this._effectDefinitions[i].token].setEffect(outlineEffect);\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.PIXELATION:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        this._effects.push({\r\n                            token: this._effectDefinitions[i].token,\r\n                            effect: new postprocessing_1.PixelationEffect(properties.granularity)\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.SSAO:\r\n                    {\r\n                        // we currently do not support devices with WebGL 1: https://shapediver.atlassian.net/browse/SS-7069\r\n                        if (this._renderingEngine.renderer.capabilities.isWebGL2 === false)\r\n                            break;\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        // we adjust the scene size slightly to make the factor fit our requirements\r\n                        // with this adjusted factor, a distance value of 1 fits well as a default\r\n                        const sceneSizeFactor = this._sceneExtents / 50.0;\r\n                        const ssaoEffect = new SSAOEffect_1.SSAOEffect(this._composer, this._renderingEngine.camera, this._renderingEngine.scene, {\r\n                            resolutionScale: properties.resolutionScale !== undefined ? properties.resolutionScale : 1,\r\n                            spp: properties.spp !== undefined ? properties.spp : 8,\r\n                            distance: properties.distance !== undefined ? properties.distance * sceneSizeFactor : sceneSizeFactor,\r\n                            distancePower: properties.distanceIntensity !== undefined ? properties.distanceIntensity : 1,\r\n                            power: properties.intensity !== undefined ? properties.intensity : 2.5,\r\n                            color: properties.color !== undefined ? new THREE.Color(this._converter.toHexColor(properties.color).substring(0, 7)) : new THREE.Color('black'),\r\n                            iterations: properties.iterations !== undefined ? properties.iterations : 1,\r\n                            radius: properties.radius !== undefined ? properties.radius : 15,\r\n                            rings: properties.rings !== undefined ? properties.rings : 4,\r\n                            lumaPhi: properties.lumaPhi !== undefined ? properties.lumaPhi : 10,\r\n                            depthPhi: properties.depthPhi !== undefined ? properties.depthPhi : 2,\r\n                            normalPhi: properties.normalPhi !== undefined ? properties.normalPhi : 3.25,\r\n                            samples: properties.samples !== undefined ? properties.samples : 16\r\n                        });\r\n                        this._effects.push({\r\n                            token: this._effectDefinitions[i].token,\r\n                            effect: ssaoEffect\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.SCANLINE:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        this._effects.push({\r\n                            token: this._effectDefinitions[i].token,\r\n                            effect: new postprocessing_1.ScanlineEffect({\r\n                                blendFunction: properties.blendFunction,\r\n                                density: properties.density\r\n                            })\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.SELECTIVE_BLOOM:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        const selectiveBloomEffect = new postprocessing_1.SelectiveBloomEffect(this._renderingEngine.scene, this._renderingEngine.camera, {\r\n                            blendFunction: properties.blendFunction,\r\n                            mipmapBlur: properties.mipmapBlur,\r\n                            luminanceThreshold: properties.luminanceThreshold,\r\n                            luminanceSmoothing: properties.luminanceSmoothing,\r\n                            intensity: properties.intensity,\r\n                            kernelSize: properties.kernelSize\r\n                        });\r\n                        selectiveBloomEffect.ignoreBackground = properties.ignoreBackground !== undefined ? properties.ignoreBackground : true;\r\n                        this._effects.push({\r\n                            token: this._effectDefinitions[i].token,\r\n                            effect: selectiveBloomEffect\r\n                        });\r\n                        this._selectiveBloomManagers[this._effectDefinitions[i].token].setEffect(selectiveBloomEffect);\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.SEPIA:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        this._effects.push({\r\n                            token: this._effectDefinitions[i].token,\r\n                            effect: new postprocessing_1.SepiaEffect({\r\n                                blendFunction: properties.blendFunction\r\n                            })\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.TILT_SHIFT:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        this._effects.push({\r\n                            token: this._effectDefinitions[i].token,\r\n                            effect: new postprocessing_1.TiltShiftEffect({\r\n                                blendFunction: properties.blendFunction,\r\n                                offset: properties.offset,\r\n                                rotation: properties.rotation,\r\n                                focusArea: properties.focusArea,\r\n                                feather: properties.feather,\r\n                                kernelSize: properties.kernelSize\r\n                            })\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.VIGNETTE:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        this._effects.push({\r\n                            token: this._effectDefinitions[i].token,\r\n                            effect: new postprocessing_1.VignetteEffect({\r\n                                blendFunction: properties.blendFunction,\r\n                                technique: properties.technique,\r\n                                offset: properties.offset,\r\n                                darkness: properties.darkness,\r\n                            })\r\n                        });\r\n                    }\r\n                    break;\r\n                default:\r\n            }\r\n        }\r\n        // sort effects by order in effectDefinitions\r\n        this._effects.sort((a, b) => this._effectDefinitions.indexOf(this._effectDefinitions.find(e => e.token === a.token)) - this._effectDefinitions.indexOf(this._effectDefinitions.find(e => e.token === b.token)));\r\n        const effectArray = this._effects.map(v => v.effect);\r\n        if (antiAliasingTechnique === IPostProcessingEffectDefinitions_1.ANTI_ALIASING_TECHNIQUE.FXAA) {\r\n            effectArray.unshift(this._fxaaEffect);\r\n        }\r\n        else if (antiAliasingTechnique === IPostProcessingEffectDefinitions_1.ANTI_ALIASING_TECHNIQUE.SMAA) {\r\n            effectArray.unshift(this._smaaEffect);\r\n        }\r\n        this._effectPass = new postprocessing_1.EffectPass(this._renderingEngine.camera, ...this._effects.map(v => v.effect));\r\n        this.addPassToEffectComposer(this._effectPass);\r\n        // for the AO effects we need to add a separate AA pass at the end that anti-aliases the AO effect\r\n        if (this._effectDefinitions.find(e => e.definition.type === IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.HBAO || e.definition.type === IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.SSAO)) {\r\n            // respect the AA choice if one of the effects was selected, use SMAA otherwise\r\n            this.addPassToEffectComposer(new postprocessing_1.EffectPass(this._renderingEngine.camera, antiAliasingTechnique === IPostProcessingEffectDefinitions_1.ANTI_ALIASING_TECHNIQUE.FXAA ? this._fxaaEffect : this._smaaEffect));\r\n        }\r\n    }\r\n    getDefaultEffectProperties(type) {\r\n        switch (type) {\r\n            case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.BLOOM:\r\n                return {\r\n                    blendFunction: postprocessing_1.BlendFunction.ADD,\r\n                    intensity: 1.0,\r\n                    kernelSize: postprocessing_1.KernelSize.LARGE,\r\n                    luminanceSmoothing: 0.025,\r\n                    luminanceThreshold: 0.9,\r\n                    mipmapBlur: false,\r\n                };\r\n            case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.CHROMATIC_ABERRATION:\r\n                return {\r\n                    blendFunction: postprocessing_1.BlendFunction.NORMAL,\r\n                    modulationOffset: 0.15,\r\n                    offset: { x: 0.001, y: 0.0005 },\r\n                    radialModulation: false,\r\n                };\r\n            case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.DEPTH_OF_FIELD:\r\n                return {\r\n                    blendFunction: postprocessing_1.BlendFunction.NORMAL,\r\n                    bokehScale: 5.0,\r\n                    focusDistance: 0.0,\r\n                    focusRange: 0.01,\r\n                };\r\n            case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.DOT_SCREEN:\r\n                return {\r\n                    angle: 1.57,\r\n                    blendFunction: postprocessing_1.BlendFunction.NORMAL,\r\n                    scale: 1.0,\r\n                };\r\n            case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.GOD_RAYS:\r\n                return {\r\n                    blendFunction: postprocessing_1.BlendFunction.SCREEN,\r\n                    blur: true,\r\n                    clampMax: 1.0,\r\n                    decay: 0.9,\r\n                    density: 0.96,\r\n                    exposure: 0.6,\r\n                    kernelSize: postprocessing_1.KernelSize.SMALL,\r\n                    weight: 0.4,\r\n                };\r\n            case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.GRID:\r\n                return {\r\n                    blendFunction: postprocessing_1.BlendFunction.MULTIPLY,\r\n                    scale: 1.0,\r\n                };\r\n            case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.HBAO:\r\n                return {\r\n                    resolutionScale: 1,\r\n                    spp: 8,\r\n                    distance: 1,\r\n                    distanceIntensity: 1,\r\n                    intensity: 2.5,\r\n                    color: '#000000',\r\n                    bias: 10,\r\n                    thickness: 0.5,\r\n                    iterations: 1,\r\n                    radius: 15,\r\n                    rings: 4,\r\n                    lumaPhi: 10,\r\n                    depthPhi: 2,\r\n                    normalPhi: 3.25,\r\n                    samples: 16,\r\n                };\r\n            case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.HUE_SATURATION:\r\n                return {\r\n                    blendFunction: postprocessing_1.BlendFunction.NORMAL,\r\n                    hue: 0.0,\r\n                    saturation: 0.0,\r\n                };\r\n            case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.NOISE:\r\n                return {\r\n                    blendFunction: postprocessing_1.BlendFunction.SCREEN,\r\n                    premultiply: false,\r\n                };\r\n            case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.OUTLINE:\r\n                return {\r\n                    blendFunction: postprocessing_1.BlendFunction.SCREEN,\r\n                    blur: false,\r\n                    edgeStrength: 1.0,\r\n                    hiddenEdgeColor: '#22090a',\r\n                    kernelSize: postprocessing_1.KernelSize.VERY_SMALL,\r\n                    multisampling: 0,\r\n                    pulseSpeed: 0.0,\r\n                    resolution: 480,\r\n                    visibleEdgeColor: '#ffffff',\r\n                    xRay: true,\r\n                };\r\n            case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.PIXELATION:\r\n                return {\r\n                    granularity: 30.0,\r\n                };\r\n            case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.SSAO:\r\n                return {\r\n                    resolutionScale: 1,\r\n                    spp: 8,\r\n                    distance: 1,\r\n                    distanceIntensity: 1,\r\n                    intensity: 2.5,\r\n                    color: '#000000',\r\n                    iterations: 1,\r\n                    radius: 15,\r\n                    rings: 4,\r\n                    lumaPhi: 10,\r\n                    depthPhi: 2,\r\n                    normalPhi: 3.25,\r\n                    samples: 16,\r\n                };\r\n            case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.SCANLINE:\r\n                return {\r\n                    blendFunction: postprocessing_1.BlendFunction.OVERLAY,\r\n                    density: 1.25,\r\n                };\r\n            case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.SELECTIVE_BLOOM:\r\n                return {\r\n                    blendFunction: postprocessing_1.BlendFunction.ADD,\r\n                    intensity: 1.0,\r\n                    kernelSize: postprocessing_1.KernelSize.LARGE,\r\n                    luminanceSmoothing: 0.025,\r\n                    luminanceThreshold: 0.9,\r\n                    mipmapBlur: false,\r\n                    ignoreBackground: true,\r\n                };\r\n            case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.SEPIA:\r\n                return {\r\n                    blendFunction: postprocessing_1.BlendFunction.NORMAL,\r\n                };\r\n            case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.TILT_SHIFT:\r\n                return {\r\n                    blendFunction: postprocessing_1.BlendFunction.NORMAL,\r\n                    feather: 0.3,\r\n                    focusArea: 0.4,\r\n                    kernelSize: postprocessing_1.KernelSize.MEDIUM,\r\n                    offset: 0.0,\r\n                    rotation: 0.0,\r\n                };\r\n            case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.VIGNETTE:\r\n                return {\r\n                    blendFunction: postprocessing_1.BlendFunction.NORMAL,\r\n                    darkness: 0.5,\r\n                    offset: 0.5,\r\n                    technique: postprocessing_1.VignetteTechnique.DEFAULT,\r\n                };\r\n            default:\r\n                return {};\r\n        }\r\n    }\r\n    getEffect(token) {\r\n        return this._effects.find(e => e.token === token).effect;\r\n    }\r\n    getEffectTokens() {\r\n        return Object.assign({}, ...this._effectDefinitions.map((e) => ({ [e.token]: e.definition.type })));\r\n    }\r\n    getPostProcessingEffectsArray() {\r\n        const effects = [];\r\n        for (let i = 0; i < this._effectDefinitions.length; i++) {\r\n            switch (this._effectDefinitions[i].definition.type) {\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.BLOOM:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        effects.push({\r\n                            type: IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.BLOOM,\r\n                            token: this._effectDefinitions[i].token,\r\n                            properties: {\r\n                                blendFunction: properties.blendFunction,\r\n                                luminanceThreshold: properties.luminanceThreshold,\r\n                                luminanceSmoothing: properties.luminanceSmoothing,\r\n                                mipmapBlur: properties.mipmapBlur,\r\n                                intensity: properties.intensity,\r\n                                kernelSize: properties.kernelSize\r\n                            }\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.CHROMATIC_ABERRATION:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        effects.push({\r\n                            type: IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.CHROMATIC_ABERRATION,\r\n                            token: this._effectDefinitions[i].token,\r\n                            properties: {\r\n                                blendFunction: properties.blendFunction,\r\n                                offset: properties.offset ? Array.isArray(properties.offset) ? { x: properties.offset[0], y: properties.offset[1] } : properties.offset : undefined,\r\n                                radialModulation: properties.radialModulation,\r\n                                modulationOffset: properties.modulationOffset\r\n                            }\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.DEPTH_OF_FIELD:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        effects.push({\r\n                            type: IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.DEPTH_OF_FIELD,\r\n                            token: this._effectDefinitions[i].token,\r\n                            properties: {\r\n                                blendFunction: properties.blendFunction,\r\n                                focusDistance: properties.focusDistance,\r\n                                focusRange: properties.focusRange,\r\n                                bokehScale: properties.bokehScale\r\n                            }\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.DOT_SCREEN:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        effects.push({\r\n                            type: IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.DOT_SCREEN,\r\n                            token: this._effectDefinitions[i].token,\r\n                            properties: {\r\n                                blendFunction: properties.blendFunction,\r\n                                scale: properties.scale,\r\n                                angle: properties.angle\r\n                            }\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.GRID:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        effects.push({\r\n                            type: IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.GRID,\r\n                            token: this._effectDefinitions[i].token,\r\n                            properties: {\r\n                                blendFunction: properties.blendFunction,\r\n                                scale: properties.scale\r\n                            }\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.HBAO:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        effects.push({\r\n                            type: IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.HBAO,\r\n                            token: this._effectDefinitions[i].token,\r\n                            properties: {\r\n                                resolutionScale: properties.resolutionScale,\r\n                                spp: properties.spp,\r\n                                distance: properties.distance,\r\n                                distanceIntensity: properties.distanceIntensity,\r\n                                intensity: properties.intensity,\r\n                                bias: properties.bias,\r\n                                thickness: properties.thickness,\r\n                                color: properties.color !== undefined ? this._converter.toHexColor(properties.color) : undefined,\r\n                                iterations: properties.iterations,\r\n                                radius: properties.radius,\r\n                                rings: properties.rings,\r\n                                lumaPhi: properties.lumaPhi,\r\n                                depthPhi: properties.depthPhi,\r\n                                normalPhi: properties.normalPhi,\r\n                                samples: properties.samples\r\n                            }\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.HUE_SATURATION:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        effects.push({\r\n                            type: IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.HUE_SATURATION,\r\n                            token: this._effectDefinitions[i].token,\r\n                            properties: {\r\n                                blendFunction: properties.blendFunction,\r\n                                hue: properties.hue,\r\n                                saturation: properties.saturation\r\n                            }\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.NOISE:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        effects.push({\r\n                            type: IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.NOISE,\r\n                            token: this._effectDefinitions[i].token,\r\n                            properties: {\r\n                                blendFunction: properties.blendFunction,\r\n                                premultiply: properties.premultiply\r\n                            }\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.PIXELATION:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        effects.push({\r\n                            type: IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.PIXELATION,\r\n                            token: this._effectDefinitions[i].token,\r\n                            properties: {\r\n                                granularity: properties.granularity\r\n                            }\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.SSAO:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        effects.push({\r\n                            type: IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.SSAO,\r\n                            token: this._effectDefinitions[i].token,\r\n                            properties: {\r\n                                resolutionScale: properties.resolutionScale,\r\n                                spp: properties.spp,\r\n                                distance: properties.distance,\r\n                                distanceIntensity: properties.distanceIntensity,\r\n                                intensity: properties.intensity,\r\n                                color: properties.color !== undefined ? this._converter.toHexColor(properties.color) : undefined,\r\n                                iterations: properties.iterations,\r\n                                radius: properties.radius,\r\n                                rings: properties.rings,\r\n                                lumaPhi: properties.lumaPhi,\r\n                                depthPhi: properties.depthPhi,\r\n                                normalPhi: properties.normalPhi,\r\n                                samples: properties.samples\r\n                            }\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.SCANLINE:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        effects.push({\r\n                            type: IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.SCANLINE,\r\n                            token: this._effectDefinitions[i].token,\r\n                            properties: {\r\n                                blendFunction: properties.blendFunction,\r\n                                density: properties.density\r\n                            }\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.SEPIA:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        effects.push({\r\n                            type: IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.SEPIA,\r\n                            token: this._effectDefinitions[i].token,\r\n                            properties: {\r\n                                blendFunction: properties.blendFunction\r\n                            }\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.TILT_SHIFT:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        effects.push({\r\n                            type: IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.TILT_SHIFT,\r\n                            token: this._effectDefinitions[i].token,\r\n                            properties: {\r\n                                blendFunction: properties.blendFunction,\r\n                                offset: properties.offset,\r\n                                rotation: properties.rotation,\r\n                                focusArea: properties.focusArea,\r\n                                feather: properties.feather,\r\n                                kernelSize: properties.kernelSize\r\n                            }\r\n                        });\r\n                    }\r\n                    break;\r\n                case IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.VIGNETTE:\r\n                    {\r\n                        const definition = this._effectDefinitions[i].definition;\r\n                        const properties = definition.properties || {};\r\n                        effects.push({\r\n                            type: IPostProcessingEffectDefinitions_1.POST_PROCESSING_EFFECT_TYPE.VIGNETTE,\r\n                            token: this._effectDefinitions[i].token,\r\n                            properties: {\r\n                                blendFunction: properties.blendFunction,\r\n                                technique: properties.technique,\r\n                                offset: properties.offset,\r\n                                darkness: properties.darkness,\r\n                            }\r\n                        });\r\n                    }\r\n                    break;\r\n                default:\r\n            }\r\n        }\r\n        return effects;\r\n    }\r\n    init() {\r\n        postprocessing_1.OverrideMaterialManager.workaroundEnabled = true;\r\n        const initComposer = () => {\r\n            this._composer = new postprocessing_1.EffectComposer(this._renderingEngine.renderer);\r\n            // EffectComposer disables autoClear, we enable/disable this in the postprocessing render loop\r\n            this._renderingEngine.renderer.autoClear = true;\r\n            // create anti-aliasing effects and passes\r\n            this._fxaaEffect = new postprocessing_1.FXAAEffect();\r\n            this._smaaEffect = new postprocessing_1.SMAAEffect({ preset: postprocessing_1.SMAAPreset.ULTRA });\r\n            this._renderPass = new postprocessing_1.RenderPass(this._renderingEngine.scene, this._renderingEngine.camera);\r\n            this._ssaaRenderPass = new SSAARenderPass_1.SSAARenderPass(this._renderingEngine.scene, this._renderingEngine.camera);\r\n        };\r\n        if (this._sceneExtents === 0) {\r\n            const token = this._eventEngine.addListener(viewer_shared_services_1.EVENTTYPE.SCENE.SCENE_BOUNDING_BOX_CHANGE, (e) => __awaiter(this, void 0, void 0, function* () {\r\n                const viewerEvent = e;\r\n                if (viewerEvent.viewportId === this._renderingEngine.id) {\r\n                    if (gl_matrix_1.vec3.distance(viewerEvent.boundingBox.min, viewerEvent.boundingBox.max) > 0) {\r\n                        initComposer();\r\n                        this.changeEffectPass();\r\n                        this._eventEngine.removeListener(token);\r\n                    }\r\n                }\r\n            }));\r\n        }\r\n        else {\r\n            initComposer();\r\n        }\r\n    }\r\n    removeEffect(token) {\r\n        const effectToRemove = this._effectDefinitions.find(e => e.token === token);\r\n        if (effectToRemove)\r\n            this._effectDefinitions.splice(this._effectDefinitions.indexOf(effectToRemove), 1);\r\n        this.changeEffectPass();\r\n        return true;\r\n    }\r\n    render(deltaTime, camera) {\r\n        if (!this._composer)\r\n            return;\r\n        const cameraId = `${camera.id}_${camera.type}${(camera.type === 'PerspectiveCamera' ? '' : '_' + camera.up.toArray().toString())}`;\r\n        if (cameraId !== this._currentCameraId) {\r\n            this._currentCameraId = cameraId;\r\n            this.changeEffectPass();\r\n        }\r\n        const currentClearColor = this._renderingEngine.renderer.getClearColor(new THREE.Color());\r\n        const convertedClearColor = currentClearColor.clone().convertSRGBToLinear();\r\n        this._renderingEngine.renderer.setClearColor(convertedClearColor);\r\n        this._renderingEngine.renderer.setClearAlpha(this._renderingEngine.clearAlpha);\r\n        this._renderingEngine.renderer.autoClear = false;\r\n        this._composer.setMainCamera(camera);\r\n        this._composer.render();\r\n        this._renderingEngine.renderer.autoClear = true;\r\n        this._renderingEngine.renderer.setClearColor(currentClearColor);\r\n    }\r\n    resize(width, height) {\r\n        var _a;\r\n        if (!this._composer)\r\n            return;\r\n        this.effects.forEach(e => {\r\n            if (e.effect.setSize)\r\n                e.effect.setSize(width, height);\r\n        });\r\n        this._renderPass.setSize(width, height);\r\n        this._ssaaRenderPass.setSize(width, height);\r\n        (_a = this._effectPass) === null || _a === void 0 ? void 0 : _a.setSize(width, height);\r\n        this._composer.setSize(width, height);\r\n    }\r\n    saveSettings(settingsEngine) {\r\n        settingsEngine.settings.postprocessing.antiAliasingTechnique = this.antiAliasingTechnique;\r\n        settingsEngine.settings.postprocessing.antiAliasingTechniqueMobile = this.antiAliasingTechniqueMobile;\r\n        settingsEngine.settings.postprocessing.enablePostProcessingOnMobile = this.enablePostProcessingOnMobile;\r\n        settingsEngine.settings.postprocessing.ssaaSampleLevel = this.ssaaSampleLevel;\r\n        const effects = this.getPostProcessingEffectsArray();\r\n        // delete the tokens as we don't want to save them\r\n        effects.forEach(e => delete e.token);\r\n        settingsEngine.settings.postprocessing.effects = effects;\r\n    }\r\n    updateEffect(token, definition) {\r\n        const effectDefinition = this._effectDefinitions.find(e => e.token === token);\r\n        if (!effectDefinition)\r\n            return;\r\n        this.removeEffect(token);\r\n        this.addEffect(definition, token);\r\n    }\r\n    // #endregion Public Methods (13)\r\n    // #region Private Methods (1)\r\n    addPassToEffectComposer(pass) {\r\n        if (this._composer) {\r\n            try {\r\n                this._composer.addPass(pass);\r\n            }\r\n            catch (e) {\r\n                // in this case a WebGL error is thrown, when the WebGL context is lost\r\n                // as we already throw an error in the rendering engine, we can ignore this error here\r\n                // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getContextAttributes\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.PostProcessingManager = PostProcessingManager;\r\n//# sourceMappingURL=PostProcessingManager.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RenderingManager = void 0;\r\nconst Stats = __importStar(require(\"stats.js\"));\r\nconst THREE = __importStar(require(\"three\"));\r\nconst viewer_rendering_engine_animation_engine_1 = require(\"@shapediver/viewer.rendering-engine.animation-engine\");\r\nconst viewer_rendering_engine_animation_frame_engine_1 = require(\"@shapediver/viewer.rendering-engine.animation-frame-engine\");\r\nconst viewer_rendering_engine_rendering_engine_1 = require(\"@shapediver/viewer.rendering-engine.rendering-engine\");\r\nconst viewer_shared_node_tree_1 = require(\"@shapediver/viewer.shared.node-tree\");\r\nconst viewer_rendering_engine_camera_engine_1 = require(\"@shapediver/viewer.rendering-engine.camera-engine\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nclass RenderingManager {\r\n    // #endregion Properties (30)\r\n    // #region Constructors (1)\r\n    constructor(_renderingEngine) {\r\n        this._renderingEngine = _renderingEngine;\r\n        // #region Properties (30)\r\n        this._animationEngine = viewer_rendering_engine_animation_engine_1.AnimationEngine.instance;\r\n        this._animationFrameEngine = viewer_rendering_engine_animation_frame_engine_1.AnimationFrameEngine.instance;\r\n        this._converter = viewer_shared_services_1.Converter.instance;\r\n        this._eventEngine = viewer_shared_services_1.EventEngine.instance;\r\n        this._logger = viewer_shared_services_1.Logger.instance;\r\n        this._systemInfo = viewer_shared_services_1.SystemInfo.instance;\r\n        this._tree = viewer_shared_node_tree_1.Tree.instance;\r\n        this._activeRendering = true;\r\n        this._cameraChanged = false;\r\n        this._continuousRendering = false;\r\n        this._continuousShadowMapUpdate = false;\r\n        this._height = 0;\r\n        this._hidden = true;\r\n        this._hiddenCamera = new THREE.PerspectiveCamera();\r\n        this._hiddenRenderTarget = new THREE.WebGLRenderTarget();\r\n        this._hideLogo = false;\r\n        this._lastSize = {\r\n            adjustedWidth: 0,\r\n            adjustedHeight: 0,\r\n            width: 0,\r\n            height: 0\r\n        };\r\n        this._lightSizeUVEnd = 0.15;\r\n        this._lightSizeUVStart = 0.025;\r\n        this._maxTextureUnits = 0;\r\n        this._minimalRendering = false;\r\n        this._noWebGL = false;\r\n        this._runningAnimation = false;\r\n        this._sizeChanged = false;\r\n        this._softShadowRenderingActive = false;\r\n        this._softShadowRenderingDurationActive = 0;\r\n        this._softShadowRenderingTimeout = null;\r\n        this._usingSwiftShader = false;\r\n        this._width = 0;\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Getters And Setters (6)\r\n    get continuousRendering() {\r\n        return this._continuousRendering;\r\n    }\r\n    set continuousRendering(value) {\r\n        this._continuousRendering = value;\r\n    }\r\n    get continuousShadowMapUpdate() {\r\n        return this._continuousShadowMapUpdate;\r\n    }\r\n    set continuousShadowMapUpdate(value) {\r\n        this._continuousShadowMapUpdate = value;\r\n    }\r\n    get minimalRendering() {\r\n        return this._minimalRendering;\r\n    }\r\n    get usingSwiftShader() {\r\n        return this._usingSwiftShader;\r\n    }\r\n    // #endregion Public Getters And Setters (6)\r\n    // #region Public Methods (10)\r\n    addLogo(canvas, branding) {\r\n        var _a, _b;\r\n        const logoDivElement = document.createElement('div');\r\n        logoDivElement.style.backgroundColor = branding.backgroundColor;\r\n        logoDivElement.classList.add('sdv-logo-container');\r\n        (_a = canvas.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(logoDivElement, (_b = canvas.parentElement) === null || _b === void 0 ? void 0 : _b.firstChild);\r\n        if (branding.logo) {\r\n            const img = new Image();\r\n            img.classList.add('sdv-logo');\r\n            img.src = branding.logo;\r\n            logoDivElement.appendChild(img);\r\n        }\r\n        return logoDivElement;\r\n    }\r\n    addSpinner(canvas, branding) {\r\n        var _a, _b;\r\n        const spinnerDivElement = document.createElement('div');\r\n        spinnerDivElement.classList.add('sdv-spinner-container');\r\n        spinnerDivElement.style.visibility = 'hidden';\r\n        (_a = canvas.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(spinnerDivElement, (_b = canvas.parentElement) === null || _b === void 0 ? void 0 : _b.firstChild);\r\n        if (branding.busyModeSpinner) {\r\n            const img = new Image();\r\n            img.src = branding.busyModeSpinner;\r\n            img.classList.add('sdv-spinner');\r\n            img.classList.add('sdv-spinner-' + branding.spinnerPositioning.replace('_', '-').toLowerCase());\r\n            spinnerDivElement.appendChild(img);\r\n        }\r\n        return spinnerDivElement;\r\n    }\r\n    createRenderer(canvas) {\r\n        const renderingProperties = {\r\n            alpha: true,\r\n            depth: true,\r\n            antialias: true,\r\n            preserveDrawingBuffer: true,\r\n            stencil: true,\r\n            premultipliedAlpha: true,\r\n            canvas\r\n        };\r\n        const renderer = new THREE.WebGLRenderer(renderingProperties);\r\n        renderer.setPixelRatio(window.devicePixelRatio);\r\n        const context = renderer.getContext();\r\n        if (renderer.extensions.has('WEBGL_debug_renderer_info')) {\r\n            const debugInfo = renderer.extensions.get('WEBGL_debug_renderer_info');\r\n            // const vendor = context.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL);\r\n            const rendererInfo = context.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL);\r\n            if (rendererInfo === 'Google SwiftShader') {\r\n                this._usingSwiftShader = true;\r\n                this._logger.warn('RenderingLogic.createWebGLContext: The current device is using Google SwiftShader, a CPU-based renderer. To achieve better rendering results, please enable GPU-rendering in your settings.');\r\n            }\r\n        }\r\n        if (!renderer.extensions.has('EXT_shader_texture_lod'))\r\n            this._minimalRendering = true;\r\n        renderer.useLegacyLights = true;\r\n        renderer.outputColorSpace = THREE.SRGBColorSpace;\r\n        renderer.toneMapping = THREE.NoToneMapping;\r\n        renderer.shadowMap.enabled = true;\r\n        renderer.shadowMap.needsUpdate = true;\r\n        renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n        renderer.shadowMap.autoUpdate = false;\r\n        renderer.localClippingEnabled = true;\r\n        renderer.setSize(canvas.width, canvas.height);\r\n        renderer.setClearColor(new THREE.Color('#ffffff'), 1);\r\n        this._maxTextureUnits = renderer.getContext().getParameter(renderer.getContext().MAX_TEXTURE_IMAGE_UNITS);\r\n        return renderer;\r\n    }\r\n    evaluateTextureUnitCount(value) {\r\n        if (value > this._maxTextureUnits) {\r\n            this._logger.warn('RenderingManager.evaluateTextureUnitCount: Maximum number of texture units exceeded. Disabling shadows.');\r\n            this._renderingEngine.lightLoader.forceDisabledShadows = true;\r\n            this._renderingEngine.update('RenderingManager.evaluateTextureUnitCount');\r\n        }\r\n        else {\r\n            this._renderingEngine.lightLoader.forceDisabledShadows = false;\r\n        }\r\n    }\r\n    getScreenshot(type = 'image/png', encoderOptions = 1) {\r\n        return this._renderingEngine.renderer.domElement.toDataURL(type, encoderOptions);\r\n    }\r\n    init() {\r\n        try {\r\n            this._renderingEngine.materialLoader.updateSoftShadow(this._lightSizeUVEnd, 1.0);\r\n            this._renderingEngine.renderer.shadowMap.type = THREE.PCFShadowMap;\r\n            this._renderingEngine.renderer.shadowMap.needsUpdate = true;\r\n            this._renderingEngine.materialLoader.updateMaterials();\r\n            this._eventEngine.addListener(viewer_shared_services_1.EVENTTYPE.CAMERA.CAMERA_START, (e) => {\r\n                const viewerEvent = e;\r\n                if (viewerEvent.viewportId === this._renderingEngine.id)\r\n                    this.startRendering();\r\n            });\r\n            this._eventEngine.addListener(viewer_shared_services_1.EVENTTYPE.CAMERA.CAMERA_END, (e) => {\r\n                const viewerEvent = e;\r\n                if (viewerEvent.viewportId === this._renderingEngine.id)\r\n                    this.stopRendering();\r\n            });\r\n            window.onresize = () => { this.render(); };\r\n            this._renderingEngine.canvas.onresize = () => { this.render(); };\r\n            this._renderingEngine.canvas.parentElement.onresize = () => { this.render(); };\r\n            const stats1 = new Stats.default();\r\n            stats1.showPanel(0); // Panel 0 = fps\r\n            stats1.dom.style.cssText = 'position:absolute;top:0px;left:0px;display:none;';\r\n            this._renderingEngine.canvas.parentElement.appendChild(stats1.dom);\r\n            const stats2 = new Stats.default();\r\n            stats2.showPanel(1); // Panel 1 = ms\r\n            stats2.dom.style.cssText = 'position:absolute;top:0px;left:80px;display:none;';\r\n            this._renderingEngine.canvas.parentElement.appendChild(stats2.dom);\r\n            const stats3 = new Stats.default();\r\n            stats3.showPanel(2); // Panel 2 = ms\r\n            stats3.dom.style.cssText = 'position:absolute;top:0px;left:160px;display:none;';\r\n            this._renderingEngine.canvas.parentElement.appendChild(stats3.dom);\r\n            this._stats = {\r\n                stats: [stats1, stats2, stats3],\r\n                begin: () => {\r\n                    stats1.begin();\r\n                    stats2.begin();\r\n                    stats3.begin();\r\n                },\r\n                end: () => {\r\n                    stats1.end();\r\n                    stats2.end();\r\n                    stats3.end();\r\n                }\r\n            };\r\n        }\r\n        catch (e) {\r\n            this._noWebGL = true;\r\n            throw e;\r\n        }\r\n    }\r\n    render() {\r\n        this.startAndStopRendering();\r\n    }\r\n    resize(width, height) {\r\n        this._width = width, this._height = height;\r\n        this._renderingEngine.materialLoader.assignPointSize(this._renderingEngine.pointSize);\r\n    }\r\n    /**\r\n     * Must only be called once by the RenderingEngine!\r\n     */\r\n    start() {\r\n        this._animationFrameEngine.addAnimationFrameCallback(this.animate.bind(this));\r\n        this.startAndStopRendering();\r\n    }\r\n    updateShadowMap() {\r\n        this._renderingEngine.renderer.shadowMap.needsUpdate = true;\r\n    }\r\n    // #endregion Public Methods (10)\r\n    // #region Private Methods (14)\r\n    activateBeautyRenderShaders() {\r\n        this._renderingEngine.renderer.shadowMap.type = THREE.PCFShadowMap;\r\n        this._renderingEngine.renderer.shadowMap.needsUpdate = true;\r\n        this._renderingEngine.materialLoader.updateMaterials();\r\n    }\r\n    animate(time, deltaTime, runningAnimation) {\r\n        // animation loop - part 1: initial discarding\r\n        if (this._renderingEngine.closed || this._noWebGL)\r\n            return;\r\n        this._renderingEngine.evaluateFlagState();\r\n        // update if needed\r\n        if (this._renderingEngine.show === true && this._tree.root.version !== this._renderingEngine.sceneTreeManager.lastRootVersion) {\r\n            this._renderingEngine.sceneTreeManager.updateSceneTree(this._tree.root);\r\n            this.updateShadowMap();\r\n            this._animationEngine.updateAnimationData();\r\n            this.render();\r\n            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE_VIEWPORT.VIEWPORT_UPDATED, { viewportId: this._renderingEngine.id });\r\n        }\r\n        if (this._renderingEngine.preRenderingCallback)\r\n            this._renderingEngine.preRenderingCallback(this._renderingEngine.renderer);\r\n        if (runningAnimation !== this._runningAnimation)\r\n            this.render();\r\n        this._runningAnimation = runningAnimation;\r\n        if (this._runningAnimation)\r\n            this._renderingEngine.sceneTreeManager.updateNode(undefined, undefined, { transformationOnly: true });\r\n        if (this._runningAnimation)\r\n            this._renderingEngine.sceneTreeManager.updateMorphWeights();\r\n        // get the current size\r\n        const { width, height, adjustedWidth, adjustedHeight } = this.calculateSize();\r\n        const aspect = width / height;\r\n        this._sizeChanged = this._lastSize.adjustedHeight !== adjustedHeight || this._lastSize.adjustedWidth !== adjustedWidth || this._lastSize.height !== height || this._lastSize.width !== width;\r\n        this._lastSize = { width, height, adjustedWidth, adjustedHeight };\r\n        // animation loop - part 3: update the camera, if there are new movements, they will start / continue the rendering\r\n        this._cameraChanged = this._renderingEngine.cameraEngine.camera ? this._renderingEngine.cameraManager.updateCamera(deltaTime, aspect) : false;\r\n        // animation loop - part 4: evaluating state\r\n        const states = this.evaluateRenderingState();\r\n        // toggle the blurring\r\n        this.toggleBusyMode(states.busyMode);\r\n        // animation loop - part 5: the scene is not even shown\r\n        if (states.showScene === false) {\r\n            // toggle on logo\r\n            this.toggleLogo(true);\r\n            if (this._hidden === false)\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.VIEWPORT.VIEWPORT_HIDDEN, { viewportId: this._renderingEngine.id });\r\n            this._hidden = true;\r\n            return;\r\n        }\r\n        else {\r\n            // we delay for one render call as some of the postprocessing effects have artefacts in the first call\r\n            if (this._hideLogo === true && this._hidden === true) {\r\n                this.toggleLogo(false);\r\n                this._hideLogo = false;\r\n                if (this._hidden === true)\r\n                    this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.VIEWPORT.VIEWPORT_VISIBLE, { viewportId: this._renderingEngine.id });\r\n                this._hidden = false;\r\n            }\r\n            else {\r\n                this._hideLogo = true;\r\n                if (this._hidden === true)\r\n                    this._renderingEngine.postProcessingManager.changeEffectPass();\r\n            }\r\n        }\r\n        // animation loop - part 6: the scene is shown, but there is no active rendering happening\r\n        if (states.rendering === false || this._renderingEngine.pause === true)\r\n            return;\r\n        // animation loop - part 7: there is actual rendering happening\r\n        // do the things that have to be done for standard and beauty rendering in the same way\r\n        this._stats.begin();\r\n        this.showStatistics();\r\n        // animation loop - part 8: calculate the current size\r\n        const currentSize = new THREE.Vector2();\r\n        this._renderingEngine.renderer.getSize(currentSize);\r\n        if (!currentSize.equals(new THREE.Vector2(adjustedWidth, adjustedHeight))) {\r\n            this._renderingEngine.renderer.setSize(adjustedWidth, adjustedHeight);\r\n            this._renderingEngine.postProcessingManager.resize(adjustedWidth, adjustedHeight);\r\n            this._renderingEngine.renderer.domElement.style.width = width + 'px';\r\n            this._renderingEngine.renderer.domElement.style.height = height + 'px';\r\n            this._renderingEngine.materialLoader.assignPointSize(this._renderingEngine.pointSize);\r\n        }\r\n        // animation loop - part 9: adjust the camera (the rendering state would be false if we didn't have a camera)\r\n        const { camera, matrix } = this._renderingEngine.cameraManager.adjustCamera(aspect);\r\n        // if a matrix is provided after a camera adjustment\r\n        // that means that the turntable controls or the object controls are activated\r\n        if (matrix) {\r\n            for (let i = 0; i < this._tree.root.children.length; i++) {\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                if (!this._tree.root.children[i].sessionNode || this._tree.root.children[i].excludeViewports.includes(this._renderingEngine.id))\r\n                    continue;\r\n                const transform = this._tree.root.children[i].transformations.find(t => t.id === 'objectRotation');\r\n                if (transform) {\r\n                    transform.matrix = matrix;\r\n                }\r\n                else {\r\n                    this._tree.root.children[i].addTransformation({\r\n                        id: 'objectRotation',\r\n                        matrix\r\n                    });\r\n                }\r\n            }\r\n            states.updateShadowMap = true;\r\n            this._renderingEngine.sceneTreeManager.updateNode(undefined, undefined, { transformationOnly: true });\r\n        }\r\n        // animation loop - part 10: adjust the anchor elements\r\n        this._renderingEngine.htmlElementAnchorLoader.adjustPositions(adjustedWidth / width, adjustedHeight / height);\r\n        // animation loop - part 11: adjust some scene settings\r\n        // enable / disable the shadow map\r\n        const enabled = this._renderingEngine.renderer.shadowMap.enabled;\r\n        this._renderingEngine.renderer.shadowMap.enabled = this._renderingEngine.usingSwiftShader || this._renderingEngine.type === viewer_rendering_engine_rendering_engine_1.RENDERER_TYPE.ATTRIBUTES ? false : this._renderingEngine.shadows;\r\n        if (enabled !== this._renderingEngine.renderer.shadowMap.enabled)\r\n            this._renderingEngine.materialLoader.updateMaterials();\r\n        let threeJsLightObject, oldLightVisibility = true;\r\n        // enable / disable lights\r\n        if (this._renderingEngine.lights === false) {\r\n            const ls = this._renderingEngine.lightEngine.lightScene;\r\n            if (ls) {\r\n                threeJsLightObject = ls.node.convertedObject[this._renderingEngine.id];\r\n                if (threeJsLightObject) {\r\n                    oldLightVisibility = threeJsLightObject.visible;\r\n                    threeJsLightObject.visible = false;\r\n                }\r\n            }\r\n        }\r\n        // update shadowMap if need\r\n        if (states.updateShadowMap && this._renderingEngine.renderer.shadowMap.enabled)\r\n            this._renderingEngine.renderer.shadowMap.needsUpdate = true;\r\n        // enable / disable the background\r\n        this._renderingEngine.sceneTreeManager.scene.background = this._renderingEngine.environmentMapAsBackground ? this._renderingEngine.environmentMapLoader.environmentMap : null;\r\n        // set the background color / alpha\r\n        this._renderingEngine.renderer.setClearColor(new THREE.Color(this._converter.toThreeJsColorInput(this._renderingEngine.clearColor)), this._renderingEngine.clearAlpha);\r\n        // check if we should render with post-processing\r\n        const renderPostProcessing = (this._renderingEngine.postProcessingManager.effects.length > 0 || this._renderingEngine.postProcessingManager.manualPostProcessing) &&\r\n            !(this._renderingEngine.postProcessingManager.enablePostProcessingOnMobile === false && this._systemInfo.isMobile === true);\r\n        // animation loop - part 12: actual rendering separation\r\n        if (states.softShadowRendering === true) {\r\n            this.setShaderProperties();\r\n            if (renderPostProcessing) {\r\n                this._renderingEngine.postProcessingManager.render(deltaTime, camera);\r\n            }\r\n            else {\r\n                this._renderingEngine.renderer.render(this._renderingEngine.sceneTreeManager.scene, camera);\r\n            }\r\n            // if the duration was long enough, disable the beauty rendering\r\n            if (this._softShadowRenderingDurationActive >= this._renderingEngine.beautyRenderBlendingDuration) {\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.RENDERING.BEAUTY_RENDERING_FINISHED, { viewportId: this._renderingEngine.id });\r\n                this.deactivateBeautyRenderShaders();\r\n                this._activeRendering = false;\r\n            }\r\n            else {\r\n                this._softShadowRenderingDurationActive += deltaTime;\r\n            }\r\n        }\r\n        else {\r\n            if (renderPostProcessing) {\r\n                this._renderingEngine.postProcessingManager.render(deltaTime, camera);\r\n            }\r\n            else {\r\n                this._renderingEngine.renderer.render(this._renderingEngine.sceneTreeManager.scene, camera);\r\n            }\r\n            // if the beauty rendering was active, disable it\r\n            if (this._softShadowRenderingActive) {\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.RENDERING.BEAUTY_RENDERING_FINISHED, { viewportId: this._renderingEngine.id });\r\n                this.deactivateBeautyRenderShaders();\r\n                this._activeRendering = false;\r\n            }\r\n        }\r\n        // reset the visibility of the threeJs light object\r\n        if (threeJsLightObject)\r\n            threeJsLightObject.visible = oldLightVisibility;\r\n        if (this._renderingEngine.postRenderingCallback)\r\n            this._renderingEngine.postRenderingCallback(this._renderingEngine.renderer, this._renderingEngine.scene, this._renderingEngine.camera);\r\n        this._stats.end();\r\n    }\r\n    calculateSize() {\r\n        let width = this._width, height = this._height;\r\n        if (this._renderingEngine.automaticResizing) {\r\n            width = this._renderingEngine.canvas.parentNode.clientWidth;\r\n            height = this._renderingEngine.canvas.parentNode.clientHeight;\r\n        }\r\n        const aspect = width / height;\r\n        let adjustedWidth = width, adjustedHeight = height;\r\n        if (width > this._renderingEngine.maximumRenderingSize.width || height > this._renderingEngine.maximumRenderingSize.height) {\r\n            if ((width - this._renderingEngine.maximumRenderingSize.width) / aspect > (height - this._renderingEngine.maximumRenderingSize.height)) {\r\n                adjustedWidth = this._renderingEngine.maximumRenderingSize.width;\r\n                adjustedHeight = this._renderingEngine.maximumRenderingSize.width / aspect;\r\n            }\r\n            else {\r\n                adjustedWidth = this._renderingEngine.maximumRenderingSize.height * aspect;\r\n                adjustedHeight = this._renderingEngine.maximumRenderingSize.height;\r\n            }\r\n        }\r\n        return {\r\n            width, adjustedWidth,\r\n            height, adjustedHeight\r\n        };\r\n    }\r\n    deactivateBeautyRenderShaders() {\r\n        this._softShadowRenderingTimeout = null;\r\n        this._softShadowRenderingActive = false;\r\n        this._softShadowRenderingDurationActive = 0;\r\n        this._renderingEngine.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n        this._renderingEngine.renderer.shadowMap.needsUpdate = true;\r\n        this._renderingEngine.materialLoader.updateSoftShadow(this._lightSizeUVStart, 0.1);\r\n        this._renderingEngine.materialLoader.updateMaterials();\r\n    }\r\n    evaluateRenderingState() {\r\n        // If there is a camera to show the scene and the setting for it is set to true, we show the scene\r\n        let showScene = false;\r\n        if (this._renderingEngine.cameraEngine.camera && this._renderingEngine.show === true)\r\n            showScene = true;\r\n        // If we should render at all\r\n        let rendering = false;\r\n        if (this._activeRendering === true || this._cameraChanged === true || this._sizeChanged === true || this._runningAnimation === true || this._continuousRendering === true)\r\n            rendering = true;\r\n        let updateShadowMap = false;\r\n        if (this._runningAnimation === true || this._continuousShadowMapUpdate === true)\r\n            updateShadowMap = true;\r\n        // special case, autorotation\r\n        if (this._renderingEngine.cameraEngine.camera) {\r\n            const camera = this._renderingEngine.cameraEngine.camera;\r\n            if (camera.type === viewer_rendering_engine_camera_engine_1.CAMERA_TYPE.PERSPECTIVE) {\r\n                const controls = camera.controls;\r\n                if (controls.enableAutoRotation === true && controls.autoRotationSpeed !== 0)\r\n                    return { showScene, rendering: true, updateShadowMap, busyMode: this._renderingEngine.busy, softShadowRendering: false };\r\n            }\r\n        }\r\n        else {\r\n            rendering = false;\r\n        }\r\n        // If the scene should be blurred\r\n        let busyMode = false;\r\n        if (this._renderingEngine.busy)\r\n            busyMode = true;\r\n        // If we should render in beauty mode\r\n        let softShadowRendering = false;\r\n        if (this._softShadowRenderingActive === true && busyMode === false && this._continuousRendering === false &&\r\n            (this._renderingEngine.shadows || !this._systemInfo.isIOS) &&\r\n            this._renderingEngine.usingSwiftShader === false && this._runningAnimation === false && this._renderingEngine.type !== viewer_rendering_engine_rendering_engine_1.RENDERER_TYPE.ATTRIBUTES)\r\n            softShadowRendering = true;\r\n        return { showScene, rendering, updateShadowMap, busyMode, softShadowRendering };\r\n    }\r\n    setShaderProperties() {\r\n        if (this._renderingEngine.softShadows === false) {\r\n            this._renderingEngine.materialLoader.updateSoftShadow(this._lightSizeUVStart, 0);\r\n            return 0;\r\n        }\r\n        const deltaTime = Math.min(this._softShadowRenderingDurationActive, this._renderingEngine.beautyRenderBlendingDuration);\r\n        const percentage = deltaTime / this._renderingEngine.beautyRenderBlendingDuration;\r\n        if (percentage < 0.25) {\r\n            const percentageMapped = percentage / 0.25;\r\n            this._renderingEngine.materialLoader.updateSoftShadow(this._lightSizeUVStart, percentageMapped);\r\n        }\r\n        else {\r\n            const percentageMapped = (percentage - 0.25) / (1 - 0.25);\r\n            // this._lightSizeUVStart -> this._lightSizeUVEnd\r\n            this._renderingEngine.materialLoader.updateSoftShadow(this._lightSizeUVStart + (this._lightSizeUVEnd - this._lightSizeUVStart) * percentageMapped, 1.0);\r\n        }\r\n        return percentage;\r\n    }\r\n    showStatistics() {\r\n        if (this._renderingEngine.showStatistics) {\r\n            for (let i = 0; i < this._stats.stats.length; i++)\r\n                this._stats.stats[i].dom.style.display = '';\r\n        }\r\n        else {\r\n            for (let i = 0; i < this._stats.stats.length; i++)\r\n                this._stats.stats[i].dom.style.display = 'none';\r\n        }\r\n    }\r\n    startAndStopRendering() {\r\n        this._activeRendering = true;\r\n        this.stopBeautyRenderCountdown();\r\n        this.startBeautyRenderCountdown();\r\n    }\r\n    startBeautyRenderCountdown() {\r\n        this._softShadowRenderingTimeout = setTimeout(() => {\r\n            this._softShadowRenderingActive = true;\r\n            this._softShadowRenderingDurationActive = 0;\r\n            this.activateBeautyRenderShaders();\r\n        }, this._renderingEngine.beautyRenderDelay);\r\n    }\r\n    startRendering() {\r\n        this._activeRendering = true;\r\n        this.stopBeautyRenderCountdown();\r\n    }\r\n    stopBeautyRenderCountdown() {\r\n        if (this._softShadowRenderingTimeout)\r\n            clearTimeout(this._softShadowRenderingTimeout);\r\n        this.deactivateBeautyRenderShaders();\r\n    }\r\n    stopRendering() {\r\n        this.startBeautyRenderCountdown();\r\n    }\r\n    toggleBusyMode(toggle) {\r\n        if (this._renderingEngine.branding.busyModeDisplay === viewer_rendering_engine_rendering_engine_1.BUSY_MODE_DISPLAY.BLUR) {\r\n            this._renderingEngine.htmlElementAnchorLoader.toggleBusyMode(toggle);\r\n            if (toggle) {\r\n                if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1 && navigator.userAgent.toLowerCase().indexOf('android') > -1)\r\n                    return;\r\n                this._renderingEngine.renderer.domElement.style.filter = 'blur(3px)';\r\n            }\r\n            else {\r\n                this._renderingEngine.renderer.domElement.style.filter = '';\r\n            }\r\n        }\r\n        else if (this._renderingEngine.branding.busyModeDisplay === viewer_rendering_engine_rendering_engine_1.BUSY_MODE_DISPLAY.SPINNER) {\r\n            if (toggle) {\r\n                this._renderingEngine.spinnerDivElement.style.visibility = 'visible';\r\n            }\r\n            else {\r\n                this._renderingEngine.spinnerDivElement.style.visibility = 'hidden';\r\n            }\r\n        }\r\n    }\r\n    toggleLogo(toggle) {\r\n        if (this._renderingEngine.logoDivElement)\r\n            this._renderingEngine.logoDivElement.style.display = toggle ? 'inherit' : 'none';\r\n        if (this._renderingEngine.canvas)\r\n            this._renderingEngine.canvas.style.display = !toggle ? 'inherit' : 'none';\r\n    }\r\n}\r\nexports.RenderingManager = RenderingManager;\r\n//# sourceMappingURL=RenderingManager.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SceneTracingManager = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nconst viewer_rendering_engine_camera_engine_1 = require(\"@shapediver/viewer.rendering-engine.camera-engine\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nclass SceneTracingManager {\r\n    // #endregion Properties (1)\r\n    // #region Constructors (1)\r\n    constructor(_renderingEngine) {\r\n        this._renderingEngine = _renderingEngine;\r\n        // #region Properties (1)\r\n        this._raycaster = new THREE.Raycaster();\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (3)\r\n    convert3Dto2D(p) {\r\n        const canvasPageCoordinates = this._renderingEngine.canvas.getBoundingClientRect(), width = this._renderingEngine.canvas.width, height = this._renderingEngine.canvas.height;\r\n        const camera = this._renderingEngine.cameraEngine.camera;\r\n        if (!camera)\r\n            throw new viewer_shared_services_1.ShapeDiverViewerViewportError('SceneTracingManager.convert3Dto2D: No camera is defined for this viewer.');\r\n        if (camera instanceof viewer_rendering_engine_camera_engine_1.OrthographicCamera) {\r\n            const direction = gl_matrix_1.vec3.sub(gl_matrix_1.vec3.create(), camera.target, camera.position);\r\n            const length = gl_matrix_1.vec3.length(direction);\r\n            gl_matrix_1.vec3.divide(direction, direction, gl_matrix_1.vec3.fromValues(length, length, length));\r\n            this._raycaster.ray.direction.set(direction[0], direction[1], direction[2]);\r\n            // set the origin of the ray to the opposite direction of the camera with the start at the initial provided point\r\n            this._raycaster.ray.origin.set(p[0] + direction[0] * length, p[1] + direction[1] * length, p[2] + direction[2] * length);\r\n        }\r\n        else {\r\n            this._raycaster.ray.direction.set(p[0], p[1], p[2]);\r\n            this._raycaster.ray.origin.set(0, 0, 0);\r\n            camera.convertedObject[this._renderingEngine.id].localToWorld(this._raycaster.ray.origin);\r\n            this._raycaster.ray.direction.sub(this._raycaster.ray.origin);\r\n            this._raycaster.ray.direction.normalize();\r\n        }\r\n        let closestIntersectionDistance = Number.MAX_VALUE;\r\n        this._renderingEngine.sceneTreeManager.scene.traverseVisible((obj) => {\r\n            if (obj instanceof THREE.Mesh) {\r\n                const curIntersections = this._raycaster.intersectObject(obj);\r\n                if (curIntersections.length)\r\n                    if (curIntersections[0].distance < closestIntersectionDistance)\r\n                        closestIntersectionDistance = curIntersections[0].distance;\r\n            }\r\n        });\r\n        const pos = camera.project(gl_matrix_1.vec3.clone(p));\r\n        pos[0] = (pos[0] * (width / 2)) + (width / 2);\r\n        pos[1] = -(pos[1] * (height / 2)) + (height / 2);\r\n        // take care of correction by device pixel ratio\r\n        pos[0] = pos[0] / devicePixelRatio;\r\n        pos[1] = pos[1] / devicePixelRatio;\r\n        // epsilon is added as a distance spacer as users tend to put the anchors of html elements directly at the vertices\r\n        // with this we prevent flickering\r\n        const eps = 0.0001;\r\n        return {\r\n            hidden: closestIntersectionDistance + eps < gl_matrix_1.vec3.distance(camera.position, p),\r\n            container: gl_matrix_1.vec2.clone(pos),\r\n            client: gl_matrix_1.vec2.fromValues(pos[0] + canvasPageCoordinates.left, pos[1] + canvasPageCoordinates.top),\r\n            page: gl_matrix_1.vec2.fromValues(pos[0] + canvasPageCoordinates.left + window.pageXOffset, pos[1] + canvasPageCoordinates.top + window.pageYOffset)\r\n        };\r\n    }\r\n    init() { }\r\n    /**\r\n     * Calculate the ray that is created by the mouse event and the camera.\r\n     *\r\n     * @param event\r\n     * @returns\r\n     */\r\n    pointerEventToRay(event) {\r\n        const rect = this._renderingEngine.canvas.getBoundingClientRect();\r\n        const camera = this._renderingEngine.cameraEngine.camera;\r\n        if (!camera)\r\n            throw new viewer_shared_services_1.ShapeDiverViewerViewportError('SceneTracingManager.pointerEventToRay: No camera is defined for this viewer.');\r\n        const _mouse_x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\r\n        const _mouse_y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\r\n        let origin = gl_matrix_1.vec3.clone(camera.position);\r\n        if (camera instanceof viewer_rendering_engine_camera_engine_1.OrthographicCamera) {\r\n            if (camera.direction == viewer_rendering_engine_camera_engine_1.ORTHOGRAPHIC_CAMERA_DIRECTION.TOP) {\r\n                origin = gl_matrix_1.vec3.add(gl_matrix_1.vec3.create(), camera.position, gl_matrix_1.vec3.fromValues(_mouse_x * camera.right, _mouse_y * camera.top, 0));\r\n            }\r\n            else if (camera.direction == viewer_rendering_engine_camera_engine_1.ORTHOGRAPHIC_CAMERA_DIRECTION.BOTTOM) {\r\n                origin = gl_matrix_1.vec3.add(gl_matrix_1.vec3.create(), camera.position, gl_matrix_1.vec3.fromValues(_mouse_x * camera.left, _mouse_y * camera.top, 0));\r\n            }\r\n            else if (camera.direction == viewer_rendering_engine_camera_engine_1.ORTHOGRAPHIC_CAMERA_DIRECTION.LEFT) {\r\n                origin = gl_matrix_1.vec3.add(gl_matrix_1.vec3.create(), camera.position, gl_matrix_1.vec3.fromValues(0, _mouse_x * camera.left, _mouse_y * camera.top));\r\n            }\r\n            else if (camera.direction == viewer_rendering_engine_camera_engine_1.ORTHOGRAPHIC_CAMERA_DIRECTION.RIGHT) {\r\n                origin = gl_matrix_1.vec3.add(gl_matrix_1.vec3.create(), camera.position, gl_matrix_1.vec3.fromValues(0, _mouse_x * camera.right, _mouse_y * camera.top));\r\n            }\r\n            else if (camera.direction == viewer_rendering_engine_camera_engine_1.ORTHOGRAPHIC_CAMERA_DIRECTION.FRONT) {\r\n                origin = gl_matrix_1.vec3.add(gl_matrix_1.vec3.create(), camera.position, gl_matrix_1.vec3.fromValues(_mouse_x * camera.right, 0, _mouse_y * camera.top));\r\n            }\r\n            else if (camera.direction == viewer_rendering_engine_camera_engine_1.ORTHOGRAPHIC_CAMERA_DIRECTION.BACK) {\r\n                origin = gl_matrix_1.vec3.add(gl_matrix_1.vec3.create(), camera.position, gl_matrix_1.vec3.fromValues(_mouse_x * camera.left, 0, _mouse_y * camera.top));\r\n            }\r\n            else {\r\n                origin = gl_matrix_1.vec3.add(gl_matrix_1.vec3.create(), camera.position, gl_matrix_1.vec3.fromValues(0, _mouse_x * camera.left, _mouse_y * camera.top));\r\n            }\r\n        }\r\n        const direction = gl_matrix_1.vec3.normalize(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.sub(gl_matrix_1.vec3.create(), camera.unproject(gl_matrix_1.vec3.fromValues(_mouse_x, _mouse_y, 0.5)), origin));\r\n        return { origin, direction };\r\n    }\r\n}\r\nexports.SceneTracingManager = SceneTracingManager;\r\n//# sourceMappingURL=SceneTracingManager.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SceneTreeManager = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nconst viewer_rendering_engine_camera_engine_1 = require(\"@shapediver/viewer.rendering-engine.camera-engine\");\r\nconst viewer_rendering_engine_light_engine_1 = require(\"@shapediver/viewer.rendering-engine.light-engine\");\r\nconst viewer_shared_types_1 = require(\"@shapediver/viewer.shared.types\");\r\nconst viewer_shared_math_1 = require(\"@shapediver/viewer.shared.math\");\r\nconst viewer_rendering_engine_rendering_engine_1 = require(\"@shapediver/viewer.rendering-engine.rendering-engine\");\r\nconst viewer_shared_node_tree_1 = require(\"@shapediver/viewer.shared.node-tree\");\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst SDData_1 = require(\"../objects/SDData\");\r\nconst SDBone_1 = require(\"../objects/SDBone\");\r\nconst SDObject_1 = require(\"../objects/SDObject\");\r\nconst ThreejsData_1 = require(\"../types/ThreejsData\");\r\n/* eslint-disable @typescript-eslint/no-empty-function */\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\n// #endregion Type aliases (1)\r\n// #region Classes (1)\r\nclass SceneTreeManager {\r\n    // #endregion Properties (12)\r\n    // #region Constructors (1)\r\n    constructor(_renderingEngine) {\r\n        this._renderingEngine = _renderingEngine;\r\n        // #region Properties (12)\r\n        this._eventEngine = viewer_shared_services_1.EventEngine.instance;\r\n        this._inputValidator = viewer_shared_services_1.InputValidator.instance;\r\n        this._scene = new THREE.Scene();\r\n        this._stateEngine = viewer_shared_services_1.StateEngine.instance;\r\n        this._tree = viewer_shared_node_tree_1.Tree.instance;\r\n        this._boundingBox = new viewer_shared_math_1.Box();\r\n        this._boundingBoxSensitiveData = [];\r\n        this._hiddenCamera = new THREE.PerspectiveCamera();\r\n        this._lastRendererType = viewer_rendering_engine_rendering_engine_1.RENDERER_TYPE.STANDARD;\r\n        this._lastRootVersion = '';\r\n        this._scene.background = new THREE.Color('#ffffff');\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Getters And Setters (4)\r\n    get boundingBox() {\r\n        return this._boundingBox;\r\n    }\r\n    get lastRendererType() {\r\n        return this._lastRendererType;\r\n    }\r\n    get lastRootVersion() {\r\n        return this._lastRootVersion;\r\n    }\r\n    get scene() {\r\n        return this._scene;\r\n    }\r\n    // #endregion Public Getters And Setters (4)\r\n    // #region Public Methods (6)\r\n    init() { }\r\n    isEmpty() {\r\n        return ((this._boundingBox.min[0] === 0 && this._boundingBox.min[1] === 0 && this._boundingBox.min[2] === 0 &&\r\n            this._boundingBox.max[0] === 0 && this._boundingBox.max[1] === 0 && this._boundingBox.max[2] === 0) || this._boundingBox.isEmpty());\r\n    }\r\n    /**\r\n     * Convert the data of the scene graph node into the format of the implementation.\r\n     *\r\n     * @param data the data element\r\n     * @param obj the corresponding type node\r\n     */\r\n    updateData(node, obj, data, filter, isVisibleInHierarchy, skeleton) {\r\n        let dataChild = obj.children.find(oc => oc.SDid === data.id && oc.SDversion === data.version);\r\n        let newChild = false;\r\n        if (!dataChild) {\r\n            newChild = true;\r\n            dataChild = new SDData_1.SDData(data.id, data.version);\r\n            obj.add(dataChild);\r\n        }\r\n        if (this._renderingEngine.type === viewer_rendering_engine_rendering_engine_1.RENDERER_TYPE.ATTRIBUTES) {\r\n            this.injectAttributeData(node, data);\r\n        }\r\n        else {\r\n            const sdtfTransform = node.getTransformation('sdtf');\r\n            if (sdtfTransform)\r\n                node.removeTransformation(sdtfTransform);\r\n            if (data instanceof viewer_shared_types_1.GeometryData)\r\n                data.attributeMaterial = null;\r\n        }\r\n        switch (true) {\r\n            case data instanceof viewer_shared_types_1.GeometryData:\r\n                {\r\n                    dataChild.SDtype = SDData_1.SD_DATA_TYPE.GEOMETRY;\r\n                    if (filter.transformationOnly === false)\r\n                        this._renderingEngine.geometryLoader.load(data, dataChild, newChild, skeleton).clone();\r\n                    let bb = new viewer_shared_math_1.Box();\r\n                    if (skeleton) {\r\n                        bb = data.primitive.computeBoundingBox(node.worldMatrix);\r\n                    }\r\n                    else {\r\n                        const clone = dataChild.clone();\r\n                        clone.applyTransformation(node.worldMatrix);\r\n                        const threeBox = new THREE.Box3().setFromObject(clone, true);\r\n                        bb = new viewer_shared_math_1.Box(gl_matrix_1.vec3.fromValues(threeBox.min.x, threeBox.min.y, threeBox.min.z), gl_matrix_1.vec3.fromValues(threeBox.max.x, threeBox.max.y, threeBox.max.z));\r\n                    }\r\n                    // adjust the general BB\r\n                    node.boundingBox.union(bb);\r\n                    // create the specific BB if it doesn't exist yet\r\n                    if (!node.boundingBoxViewport[this._renderingEngine.id])\r\n                        node.boundingBoxViewport[this._renderingEngine.id] = new viewer_shared_math_1.Box();\r\n                    // adjust the specific BB\r\n                    node.boundingBoxViewport[this._renderingEngine.id].union(bb);\r\n                }\r\n                break;\r\n            case data instanceof ThreejsData_1.ThreejsData:\r\n                {\r\n                    dataChild.SDtype = SDData_1.SD_DATA_TYPE.THREEJS;\r\n                    dataChild.add(data.obj);\r\n                    const bbThree = new THREE.Box3().setFromObject(data.obj);\r\n                    // adjust the general BB\r\n                    node.boundingBox.union(new viewer_shared_math_1.Box(gl_matrix_1.vec3.fromValues(...bbThree.min.toArray()), gl_matrix_1.vec3.fromValues(...bbThree.max.toArray())));\r\n                    // create the specific BB if it doesn't exist yet\r\n                    if (!node.boundingBoxViewport[this._renderingEngine.id])\r\n                        node.boundingBoxViewport[this._renderingEngine.id] = new viewer_shared_math_1.Box();\r\n                    // adjust the specific BB\r\n                    node.boundingBoxViewport[this._renderingEngine.id].union(new viewer_shared_math_1.Box(gl_matrix_1.vec3.fromValues(...bbThree.min.toArray()), gl_matrix_1.vec3.fromValues(...bbThree.max.toArray())));\r\n                }\r\n                break;\r\n            case data instanceof viewer_shared_types_1.AbstractMaterialData:\r\n                dataChild.SDtype = SDData_1.SD_DATA_TYPE.MATERIAL;\r\n                break;\r\n            case data instanceof viewer_rendering_engine_light_engine_1.AbstractLight:\r\n                dataChild.SDtype = SDData_1.SD_DATA_TYPE.LIGHT;\r\n                if (filter.transformationOnly === false)\r\n                    this._renderingEngine.lightLoader.load(data, dataChild);\r\n                if (data instanceof viewer_rendering_engine_light_engine_1.DirectionalLight && data.useNodeData === false)\r\n                    this._boundingBoxSensitiveData.push({ data: data, dataChild });\r\n                break;\r\n            case data instanceof viewer_rendering_engine_camera_engine_1.AbstractCamera:\r\n                dataChild.SDtype = SDData_1.SD_DATA_TYPE.CAMERA;\r\n                if (filter.transformationOnly === false)\r\n                    this._renderingEngine.cameraManager.load(data, dataChild);\r\n                break;\r\n            case data instanceof viewer_shared_types_1.HTMLElementAnchorData:\r\n                dataChild.SDtype = SDData_1.SD_DATA_TYPE.HTML_ELEMENT_ANCHOR;\r\n                if (filter.transformationOnly === false)\r\n                    this._renderingEngine.htmlElementAnchorLoader.load(node, data, isVisibleInHierarchy);\r\n                break;\r\n            case data instanceof viewer_shared_types_1.AnimationData:\r\n                dataChild.SDtype = SDData_1.SD_DATA_TYPE.ANIMATION;\r\n                break;\r\n            default:\r\n                // if there is no valid conversion here, call the convertData of the implementation\r\n                break;\r\n        }\r\n    }\r\n    updateMorphWeights(node = this._tree.root, obj = this._mainNode) {\r\n        if (!node || !obj)\r\n            return;\r\n        for (let i = 0, len = node.data.length; i < len; i++) {\r\n            if (node.data[i] instanceof viewer_shared_types_1.GeometryData) {\r\n                const data = node.data[i];\r\n                const dataChild = obj.children.find(oc => oc.SDid === data.id && oc.SDversion === data.version);\r\n                if (dataChild)\r\n                    dataChild.traverse(o => {\r\n                        if (o instanceof THREE.Points ||\r\n                            o instanceof THREE.LineSegments ||\r\n                            o instanceof THREE.LineLoop ||\r\n                            o instanceof THREE.Line ||\r\n                            o instanceof THREE.Mesh)\r\n                            o.morphTargetInfluences = data.morphWeights;\r\n                    });\r\n            }\r\n        }\r\n        for (let i = 0, len = node.children.length; i < len; i++) {\r\n            const nodeChild = node.children[i];\r\n            if (!nodeChild)\r\n                continue;\r\n            const objChild = obj.children.find(oc => oc.SDid === nodeChild.id);\r\n            if (objChild)\r\n                this.updateMorphWeights(nodeChild, objChild);\r\n        }\r\n    }\r\n    /**\r\n     * Update the current node via the scene graph node.\r\n     * Convert the data if needed.\r\n     *\r\n     * @param node the scene graph node\r\n     * @param obj the current type object\r\n     */\r\n    updateNode(node = this._tree.root, obj, filter = { transformationOnly: false }, visibleInHierarchy = true, skeleton) {\r\n        if (obj === undefined) {\r\n            // check if there is a converted object\r\n            if (node.convertedObject[this._renderingEngine.id]) {\r\n                obj = node.convertedObject[this._renderingEngine.id];\r\n            }\r\n            else {\r\n                // the node has not been converted yet\r\n                // go up the hierarchy until a converted object is found\r\n                let parent = node.parent;\r\n                while (parent) {\r\n                    if (parent.convertedObject[this._renderingEngine.id]) {\r\n                        this.updateNode(parent, parent.convertedObject[this._renderingEngine.id], filter, visibleInHierarchy, skeleton);\r\n                        return;\r\n                    }\r\n                    else {\r\n                        parent = parent.parent;\r\n                    }\r\n                }\r\n                // no converted object found in the hierarchy\r\n                // update the whole scene tree\r\n                this.updateSceneTree(this._tree.root);\r\n                return;\r\n            }\r\n        }\r\n        const convertedObject = obj;\r\n        // reset the general bounding box of the current node\r\n        // it will be recomputed in the following steps\r\n        node.boundingBox.reset();\r\n        // create the specific BB if it doesn't exist yet\r\n        if (!node.boundingBoxViewport[this._renderingEngine.id])\r\n            node.boundingBoxViewport[this._renderingEngine.id] = new viewer_shared_math_1.Box();\r\n        // reset the specific bounding box of the current node\r\n        // it will be recomputed in the following steps\r\n        node.boundingBoxViewport[this._renderingEngine.id].reset();\r\n        if (filter.transformationOnly === false) {\r\n            // remove all data items that do not exist anymore\r\n            const dataIds = node.data.map(d => d.id);\r\n            const dataToRemove = convertedObject.children.filter(oc => {\r\n                if (oc instanceof SDData_1.SDData) {\r\n                    if (dataIds.includes(oc.SDid)) {\r\n                        const data = node.data.find(d => d.id === oc.SDid);\r\n                        if (data && data.version !== oc.SDversion) {\r\n                            // version is different\r\n                            return true;\r\n                        }\r\n                        else {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // id not included anymore\r\n                        return true;\r\n                    }\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            });\r\n            dataToRemove.forEach(dTR => {\r\n                this.removeData(dTR);\r\n                convertedObject.remove(dTR);\r\n            });\r\n            // remove all child nodes in the transformed object that do not exist anymore\r\n            // the filter goes also through the data items as they were already added\r\n            const nodeIds = node.children.filter(d => !d.excludeViewports.includes(this._renderingEngine.id)).map(d => d.id);\r\n            const childrenToRemove = convertedObject.children.filter(oc => {\r\n                if (oc instanceof SDObject_1.SDObject && !(oc instanceof SDData_1.SDData)) {\r\n                    if (nodeIds.includes(oc.SDid)) {\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        // id not included anymore\r\n                        return true;\r\n                    }\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            });\r\n            childrenToRemove.forEach(cTR => {\r\n                cTR.traverse(o => {\r\n                    if (o instanceof SDData_1.SDData)\r\n                        this.removeData(o);\r\n                });\r\n                convertedObject.remove(cTR);\r\n            });\r\n        }\r\n        // create the skeleton if the node is marked as the skin node (root node of the skeleton)\r\n        if (node.skinNode === true) {\r\n            const bones = [];\r\n            for (let i = 0; i < node.bones.length; i++)\r\n                bones.push(this.getBone(node.bones[i]));\r\n            const boneInverses = [];\r\n            for (let i = 0; i < node.boneInverses.length; i++)\r\n                boneInverses.push(new THREE.Matrix4().fromArray(node.boneInverses[i]));\r\n            skeleton = new THREE.Skeleton(bones, boneInverses);\r\n        }\r\n        const isVisible = node.visible && !node.excludeViewports.includes(this._renderingEngine.id) && !(node.restrictViewports.length > 0 && !node.restrictViewports.includes(this._renderingEngine.id));\r\n        const isVisibleInHierarchy = visibleInHierarchy && isVisible;\r\n        // convert all data items of the current node\r\n        // old versions will be replaced by new ones\r\n        for (let i = 0, len = node.data.length; i < len; i++)\r\n            this.updateData(node, convertedObject, node.data[i], filter, isVisibleInHierarchy, skeleton);\r\n        // add new children and update the ones that have a different version\r\n        for (let i = 0, len = node.children.length; i < len; i++) {\r\n            const nodeChild = node.children[i];\r\n            const objChild = convertedObject.children.find(oc => oc.SDid === nodeChild.id);\r\n            if (!objChild) {\r\n                const newChild = node.data.find(d => d instanceof viewer_shared_types_1.BoneData) ? new SDBone_1.SDBone(nodeChild.id, nodeChild.version) : new SDObject_1.SDObject(nodeChild.id, nodeChild.version);\r\n                const oldChild = nodeChild.convertedObject[this._renderingEngine.id];\r\n                nodeChild.convertedObject[this._renderingEngine.id] = newChild;\r\n                if (nodeChild.updateCallbackConvertedObject)\r\n                    nodeChild.updateCallbackConvertedObject(newChild, oldChild, this._renderingEngine.id);\r\n                convertedObject.add(newChild);\r\n                this.updateNode(nodeChild, newChild, filter, isVisibleInHierarchy, skeleton);\r\n            }\r\n            else if (objChild.SDversion !== nodeChild.version) {\r\n                // if the version is different, update the child\r\n                this.updateNode(nodeChild, objChild, filter, isVisibleInHierarchy, skeleton);\r\n                objChild.SDversion = nodeChild.version;\r\n            }\r\n            else {\r\n                this.updateNode(nodeChild, objChild, filter, isVisibleInHierarchy, skeleton);\r\n            }\r\n            // adjust the general BB\r\n            if (!nodeChild.boundingBox.isEmpty())\r\n                node.boundingBox.union(nodeChild.boundingBox);\r\n            // adjust the specific BB\r\n            if (nodeChild.boundingBoxViewport[this._renderingEngine.id] && !nodeChild.boundingBoxViewport[this._renderingEngine.id].isEmpty()) {\r\n                // only do this if the node is\r\n                // 1. visible\r\n                // 2. no included in the \"excludeViewports\"\r\n                // 3. if there are \"restrictViewports\", it needs to be in them\r\n                if (isVisible)\r\n                    node.boundingBoxViewport[this._renderingEngine.id].union(nodeChild.boundingBoxViewport[this._renderingEngine.id]);\r\n            }\r\n        }\r\n        convertedObject.visible = node.visible && !node.excludeViewports.includes(this._renderingEngine.id) && !(node.restrictViewports.length > 0 && !node.restrictViewports.includes(this._renderingEngine.id));\r\n        convertedObject.applyTransformation(node.nodeMatrix);\r\n    }\r\n    updateSceneTree(root) {\r\n        var _a, _b;\r\n        if (this._tree.root.version === this._lastRootVersion)\r\n            return;\r\n        this._lastRootVersion = this._tree.root.version;\r\n        this._lastRendererType = this._renderingEngine.type;\r\n        if (this._renderingEngine.closed)\r\n            return;\r\n        const oldBB = this._boundingBox.clone();\r\n        this._boundingBox = new viewer_shared_math_1.Box();\r\n        this._renderingEngine.lightLoader.shadowMapCount = 0;\r\n        if (!this._mainNode) {\r\n            this._mainNode = new SDObject_1.SDObject(root.id, root.version);\r\n            const oldObj = root.convertedObject[this._renderingEngine.id];\r\n            root.convertedObject[this._renderingEngine.id] = this._mainNode;\r\n            if (root.updateCallbackConvertedObject)\r\n                root.updateCallbackConvertedObject(this._mainNode, oldObj, this._renderingEngine.id);\r\n            this._scene.add(this._mainNode);\r\n        }\r\n        this._boundingBoxSensitiveData = [];\r\n        this._currentSDTFOverview = this.createSDTFOverview();\r\n        this.updateNode(root, this._mainNode);\r\n        this._boundingBox = root.boundingBoxViewport[this._renderingEngine.id].clone();\r\n        for (let i = 0; i < this._boundingBoxSensitiveData.length; i++)\r\n            this._renderingEngine.lightLoader.adjustToBoundingBox(this._boundingBoxSensitiveData[i].data, this._boundingBoxSensitiveData[i].dataChild, this._boundingBox);\r\n        if (!(this._boundingBox.min[0] === oldBB.min[0] && this._boundingBox.min[1] === oldBB.min[1] && this._boundingBox.min[2] === oldBB.min[2] &&\r\n            this._boundingBox.max[0] === oldBB.max[0] && this._boundingBox.max[1] === oldBB.max[1] && this._boundingBox.max[2] === oldBB.max[2])) {\r\n            if (!((_a = this._stateEngine.viewportEngines[this._renderingEngine.id]) === null || _a === void 0 ? void 0 : _a.boundingBoxCreated.resolved) && !this._boundingBox.isEmpty())\r\n                (_b = this._stateEngine.viewportEngines[this._renderingEngine.id]) === null || _b === void 0 ? void 0 : _b.boundingBoxCreated.resolve(true);\r\n            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.SCENE.SCENE_BOUNDING_BOX_CHANGE, {\r\n                viewportId: this._renderingEngine.id, boundingBox: {\r\n                    min: gl_matrix_1.vec3.clone(this._boundingBox.min),\r\n                    max: gl_matrix_1.vec3.clone(this._boundingBox.max),\r\n                }\r\n            });\r\n        }\r\n        if (this._boundingBox.isEmpty()) {\r\n            // check if all outputs that should be loaded at the start of a session are loaded\r\n            // if the bounding box is empty then, emit the event\r\n            if (Object.values(this._stateEngine.sessionEngines).every(s => s && s.initialOutputsLoaded.resolved === true)) {\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.SCENE.SCENE_BOUNDING_BOX_EMPTY, {\r\n                    viewportId: this._renderingEngine.id\r\n                });\r\n            }\r\n        }\r\n        this._renderingEngine.renderingManager.evaluateTextureUnitCount(this._renderingEngine.lightLoader.shadowMapCount + this._renderingEngine.materialLoader.maxMapCount);\r\n        /**\r\n         *\r\n         * Three.js texture upload and compiling\r\n         * This step is needed as three.js would compile the shaders and initialize the texture on the first render call instead.\r\n         *\r\n         */\r\n        // we initialize all texture and then clear the cache\r\n        const threeJsTextureCache = this._renderingEngine.materialLoader.threeJsTextureCache;\r\n        for (const key in threeJsTextureCache) {\r\n            if (threeJsTextureCache[key].usage === 0) {\r\n                threeJsTextureCache[key].texture.dispose();\r\n                delete threeJsTextureCache[key];\r\n            }\r\n            else if (threeJsTextureCache[key].initialized === false) {\r\n                this._renderingEngine.renderer.initTexture(threeJsTextureCache[key].texture);\r\n                threeJsTextureCache[key].initialized = true;\r\n            }\r\n        }\r\n        // we compile the shaders\r\n        this._renderingEngine.renderer.compile(this._renderingEngine.scene, this._hiddenCamera);\r\n    }\r\n    // #endregion Public Methods (6)\r\n    // #region Private Methods (5)\r\n    collectSDTFItemData(node) {\r\n        for (let i = 0, len = node.data.length; i < len; i++)\r\n            if (node.data[i] instanceof viewer_shared_types_1.SDTFItemData)\r\n                return node.data[i];\r\n        if (!node.parent)\r\n            return;\r\n        return this.collectSDTFItemData(node.parent);\r\n    }\r\n    createSDTFOverview(node = this._tree.root) {\r\n        const out = new viewer_shared_types_1.SDTFOverviewData({});\r\n        for (let i = 0, len = node.data.length; i < len; i++)\r\n            if (node.data[i] instanceof viewer_shared_types_1.SDTFOverviewData)\r\n                out.merge(node.data[i]);\r\n        for (let i = 0, len = node.children.length; i < len; i++)\r\n            out.merge(new viewer_shared_types_1.SDTFOverviewData(this.createSDTFOverview(node.children[i])));\r\n        return out.overview;\r\n    }\r\n    getBone(node) {\r\n        let bone;\r\n        this._mainNode.traverse((o) => {\r\n            if (o.SDid === node.id)\r\n                bone = o;\r\n        });\r\n        return bone;\r\n    }\r\n    injectAttributeData(node, data) {\r\n        const itemData = this.collectSDTFItemData(node);\r\n        const visData = {\r\n            material: new viewer_shared_types_1.MaterialStandardData({ color: this._renderingEngine.defaultMaterialColor, opacity: 1 }),\r\n            matrix: gl_matrix_1.mat4.create()\r\n        };\r\n        if (this._renderingEngine.visualizeAttributes) {\r\n            const userVisData = this._renderingEngine.visualizeAttributes(this._currentSDTFOverview, itemData);\r\n            this._inputValidator.validateAndError('Viewer.visualizeAttributes', userVisData, 'object', true);\r\n            this._inputValidator.validateAndError('Viewer.visualizeAttributes', userVisData.matrix, 'mat4', true);\r\n            visData.material = userVisData.material;\r\n            visData.matrix = userVisData.matrix;\r\n        }\r\n        node.addTransformation({\r\n            id: 'sdtf',\r\n            matrix: visData.matrix\r\n        });\r\n        if (data instanceof viewer_shared_types_1.GeometryData)\r\n            data.attributeMaterial = visData.material;\r\n    }\r\n    removeData(dataObject) {\r\n        if (dataObject.userData.removed === true)\r\n            return;\r\n        dataObject.userData.removed = true;\r\n        switch (true) {\r\n            case dataObject.SDtype === SDData_1.SD_DATA_TYPE.GEOMETRY:\r\n                dataObject.traverse((o) => {\r\n                    if (dataObject.id !== o.id && o.userData.removed === true)\r\n                        return;\r\n                    o.userData.removed = true;\r\n                    if (o instanceof THREE.Mesh || o instanceof THREE.Line || o instanceof THREE.Points || o instanceof THREE.LineSegments || o instanceof THREE.LineLoop) {\r\n                        this.scene.remove(o);\r\n                        this._renderingEngine.geometryLoader.removeFromGeometryCache(o.geometry.userData.SDid + '_' + o.geometry.userData.SDversion);\r\n                        this._renderingEngine.materialLoader.removeFromMaterialCache(o.material.userData.SDid + '_' + o.material.userData.SDversion);\r\n                        const texturesToRemove = [];\r\n                        for (const t in o.material) {\r\n                            if (o.material[t] instanceof THREE.Texture) {\r\n                                o.material[t].name = t;\r\n                                if (t !== 'envMap') {\r\n                                    if (!texturesToRemove.includes(o.material[t]))\r\n                                        texturesToRemove.push(o.material[t]);\r\n                                }\r\n                            }\r\n                        }\r\n                        for (const texture of texturesToRemove) {\r\n                            if (texture.userData.cacheKey) {\r\n                                this._renderingEngine.materialLoader.threeJsTextureCache[texture.userData.cacheKey].usage--;\r\n                            }\r\n                            else {\r\n                                if (texture.name === 'sphericalNormalMap') {\r\n                                    this._renderingEngine.geometryLoader.removeFromGemSphericalMapsCache(o.geometry.userData.primitiveSDid + '_' + o.geometry.userData.primitiveSDversion);\r\n                                    texture.dispose();\r\n                                }\r\n                                else {\r\n                                    texture.dispose();\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            case dataObject.SDtype === SDData_1.SD_DATA_TYPE.THREEJS:\r\n                break;\r\n            case dataObject.SDtype === SDData_1.SD_DATA_TYPE.MATERIAL:\r\n                break;\r\n            case dataObject.SDtype === SDData_1.SD_DATA_TYPE.LIGHT:\r\n                dataObject.traverse((o) => {\r\n                    if (o instanceof THREE.Light)\r\n                        o.dispose();\r\n                });\r\n                break;\r\n            case dataObject.SDtype === SDData_1.SD_DATA_TYPE.HTML_ELEMENT_ANCHOR:\r\n                this._renderingEngine.htmlElementAnchorLoader.removeData(dataObject.SDid, dataObject.SDversion);\r\n                break;\r\n            case dataObject.SDtype === SDData_1.SD_DATA_TYPE.ANIMATION:\r\n                break;\r\n            default:\r\n                // if there is no valid conversion here, call the convertData of the implementation\r\n                break;\r\n        }\r\n    }\r\n}\r\nexports.SceneTreeManager = SceneTreeManager;\r\n// #endregion Classes (1)\r\n//# sourceMappingURL=SceneTreeManager.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GodRaysManager = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nclass GodRaysManager {\r\n    // #endregion Properties (2)\r\n    // #region Constructors (1)\r\n    constructor(_renderingEngine) {\r\n        this._renderingEngine = _renderingEngine;\r\n        this._lightSource = null;\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (3)\r\n    removeLightSource() {\r\n        this._godRaysEffect.lightSource = new THREE.Mesh();\r\n    }\r\n    setEffect(godRaysEffect) {\r\n        this._godRaysEffect = godRaysEffect;\r\n        this._godRaysEffect.lightSource = this._lightSource;\r\n    }\r\n    setLightSource(node) {\r\n        this._lightSource = null;\r\n        node.convertedObject[this._renderingEngine.id].traverse(o => {\r\n            if (o instanceof THREE.Mesh || o instanceof THREE.Points)\r\n                this._lightSource = o;\r\n        });\r\n        if (this._lightSource) {\r\n            if (Array.isArray(this._lightSource.material)) {\r\n                this._lightSource.material.forEach(m => m.transparent = true);\r\n                this._lightSource.material.forEach(m => m.depthWrite = false);\r\n            }\r\n            else {\r\n                this._lightSource.material.transparent = true;\r\n                this._lightSource.material.depthWrite = false;\r\n            }\r\n        }\r\n        this._godRaysEffect.lightSource = this._lightSource;\r\n    }\r\n}\r\nexports.GodRaysManager = GodRaysManager;\r\n//# sourceMappingURL=GodRaysManager.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.OutlineManager = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nclass OutlineManager {\r\n    // #endregion Properties (2)\r\n    // #region Constructors (1)\r\n    constructor(_renderingEngine) {\r\n        this._renderingEngine = _renderingEngine;\r\n        this._outlineNodes = [];\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (5)\r\n    addSelection(node) {\r\n        this._outlineNodes.push(node);\r\n        this.updateOutlineEffectObjects();\r\n    }\r\n    clearSelection() {\r\n        this._outlineNodes = [];\r\n        this.updateOutlineEffectObjects();\r\n    }\r\n    removeSelection(node) {\r\n        const index = this._outlineNodes.indexOf(node);\r\n        if (index !== -1)\r\n            this._outlineNodes.splice(index, 1);\r\n        this.updateOutlineEffectObjects();\r\n        return index !== -1;\r\n    }\r\n    setEffect(outlineEffect) {\r\n        this._outlineEffect = outlineEffect;\r\n        this.updateOutlineEffectObjects();\r\n    }\r\n    updateOutlineEffectObjects() {\r\n        this._outlineEffect.selection.clear();\r\n        for (let i = 0; i < this._outlineNodes.length; i++) {\r\n            this._outlineNodes[i].convertedObject[this._renderingEngine.id].traverse(o => {\r\n                if (o instanceof THREE.Mesh)\r\n                    this._outlineEffect.selection.add(o);\r\n            });\r\n        }\r\n    }\r\n}\r\nexports.OutlineManager = OutlineManager;\r\n//# sourceMappingURL=OutlineManager.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SSAARenderPass = void 0;\r\nconst postprocessing_1 = require(\"postprocessing\");\r\nconst three_1 = require(\"three\");\r\nconst CopyShader_1 = require(\"./utils/CopyShader\");\r\nconst FullScreenQuad_1 = require(\"./utils/FullScreenQuad\");\r\nconst CopyMaterial_1 = require(\"./utils/CopyMaterial\");\r\nlet geometry = null;\r\n/**\r\n * Returns a shared fullscreen triangle.\r\n *\r\n * The screen size is 2x2 units (NDC). A triangle needs to be 4x4 units to fill the screen.\r\n *\r\n * @private\r\n * @return {BufferGeometry} The fullscreen geometry.\r\n */\r\nconst getFullscreenTriangle = () => {\r\n    if (geometry === null) {\r\n        const vertices = new Float32Array([-1, -1, 0, 3, -1, 0, -1, 3, 0]);\r\n        const uvs = new Float32Array([0, 0, 2, 0, 0, 2]);\r\n        geometry = new three_1.BufferGeometry();\r\n        geometry.setAttribute(\"position\", new three_1.BufferAttribute(vertices, 3));\r\n        geometry.setAttribute(\"uv\", new three_1.BufferAttribute(uvs, 2));\r\n    }\r\n    return geometry;\r\n};\r\n/**\r\n*\r\n* Supersample Anti-Aliasing Render Pass\r\n*\r\n* This manual approach to SSAA re-renders the scene once for each sample with camera jitter and accumulates the results.\r\n*\r\n* References: https://en.wikipedia.org/wiki/Supersampling\r\n*\r\n* original implementation from three.js@0.152.2 was modified to work with the postprocessing library\r\n*\r\n*/\r\nclass SSAARenderPass extends postprocessing_1.Pass {\r\n    // #endregion Properties (9)\r\n    // #region Constructors (1)\r\n    constructor(scene, camera) {\r\n        super(\"SSAARenderPass\", scene, camera);\r\n        this._clearColor = new three_1.Color();\r\n        this._oldClearColor = new three_1.Color();\r\n        this._sampleLevel = 2;\r\n        this._unbiased = true;\r\n        this.needsSwap = false;\r\n        this._sampleRenderTarget = new three_1.WebGLRenderTarget(1, 1, {\r\n            type: three_1.HalfFloatType,\r\n        });\r\n        this._sampleRenderTarget.texture.name = \"SSAARender.Target\";\r\n        this._sampleRenderTarget.texture.colorSpace = three_1.SRGBColorSpace;\r\n        const copyShader = CopyShader_1.CopyShader;\r\n        this._copyUniforms = three_1.UniformsUtils.clone(copyShader.uniforms);\r\n        // Create a copy material to render the ssaa sample render target to.\r\n        this._ssaaCopyMaterial = new three_1.ShaderMaterial({\r\n            uniforms: this._copyUniforms,\r\n            vertexShader: copyShader.vertexShader,\r\n            fragmentShader: copyShader.fragmentShader,\r\n            transparent: true,\r\n            depthTest: false,\r\n            depthWrite: false,\r\n            // do not use AdditiveBlending because it mixes the alpha channel instead of adding\r\n            blending: three_1.CustomBlending,\r\n            blendEquation: three_1.AddEquation,\r\n            blendDst: three_1.OneFactor,\r\n            blendDstAlpha: three_1.OneFactor,\r\n            blendSrc: three_1.SrcAlphaFactor,\r\n            blendSrcAlpha: three_1.OneFactor,\r\n        });\r\n        this._fsQuad = new FullScreenQuad_1.FullScreenQuad(this._ssaaCopyMaterial);\r\n        // create a second copy material to render the final results to\r\n        this._copyMaterial = new CopyMaterial_1.CopyMaterial();\r\n        this._fullScreen = new three_1.Mesh(getFullscreenTriangle(), this._copyMaterial);\r\n        this._fullScreen.frustumCulled = false;\r\n        // clear pass for color and depth\r\n        this._clearPass = new postprocessing_1.ClearPass(true, true, false);\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (6)\r\n    set mainCamera(value) {\r\n        this.camera = value;\r\n    }\r\n    set mainScene(value) {\r\n        this.scene = value;\r\n    }\r\n    get renderToScreen() {\r\n        return super.renderToScreen;\r\n    }\r\n    set renderToScreen(value) {\r\n        super.renderToScreen = value;\r\n    }\r\n    get sampleLevel() {\r\n        return this._sampleLevel;\r\n    }\r\n    /**\r\n     * specified as n, where the number of samples is 2^n, so sampleLevel = 4, is 2^4 samples, 16.\r\n     */\r\n    set sampleLevel(value) {\r\n        this._sampleLevel = value;\r\n    }\r\n    /**\r\n     * to cancel out rounding errors\r\n     */\r\n    set unbiased(value) {\r\n        this._unbiased = value;\r\n    }\r\n    // #endregion Public Accessors (6)\r\n    // #region Public Methods (3)\r\n    dispose() {\r\n        this._sampleRenderTarget.dispose();\r\n        this._ssaaCopyMaterial.dispose();\r\n        this._fsQuad.dispose();\r\n    }\r\n    /**\r\n     * Renders the scene.\r\n     *\r\n     * @param {WebGLRenderer} renderer - The renderer.\r\n     * @param {WebGLRenderTarget} inputBuffer - A frame buffer that contains the result of the previous pass.\r\n     * @param {WebGLRenderTarget} outputBuffer - A frame buffer that serves as the output render target unless this pass renders to screen.\r\n     * @param {Number} [deltaTime] - The time between the last frame and the current one in seconds.\r\n     * @param {Boolean} [stencilTest] - Indicates whether a stencil mask is active.\r\n     */\r\n    render(renderer, inputBuffer, outputBuffer, deltaTime, stencilTest) {\r\n        // set clear color / clear alpha / color space from the current renderer\r\n        this._clearColor = renderer.getClearColor(new three_1.Color());\r\n        this._clearAlpha = renderer.getClearAlpha();\r\n        this._sampleRenderTarget.texture.colorSpace = renderer.outputColorSpace;\r\n        const jitterOffsets = _JitterVectors[Math.max(0, Math.min(this._sampleLevel, 5))];\r\n        // save the original auto clear and set to false\r\n        const autoClear = renderer.autoClear;\r\n        renderer.autoClear = false;\r\n        // save the original clear color and alpha\r\n        renderer.getClearColor(this._oldClearColor);\r\n        const oldClearAlpha = renderer.getClearAlpha();\r\n        const baseSampleWeight = 1.0 / jitterOffsets.length;\r\n        const roundingRange = 1 / 32;\r\n        this._copyUniforms[\"tDiffuse\"].value = this._sampleRenderTarget.texture;\r\n        const viewOffset = {\r\n            fullWidth: inputBuffer.width,\r\n            fullHeight: inputBuffer.height,\r\n            offsetX: 0,\r\n            offsetY: 0,\r\n            width: inputBuffer.width,\r\n            height: inputBuffer.height,\r\n        };\r\n        const originalViewOffset = Object.assign({}, this.camera.view);\r\n        if (originalViewOffset.enabled)\r\n            Object.assign(viewOffset, originalViewOffset);\r\n        // render the scene multiple times, each slightly jitter offset from the last and accumulate the results.\r\n        for (let i = 0; i < jitterOffsets.length; i++) {\r\n            const jitterOffset = jitterOffsets[i];\r\n            if (this.camera.setViewOffset) {\r\n                this.camera.setViewOffset(viewOffset.fullWidth, viewOffset.fullHeight, viewOffset.offsetX + jitterOffset[0] * 0.0625, viewOffset.offsetY + jitterOffset[1] * 0.0625, // 0.0625 = 1 / 16\r\n                viewOffset.width, viewOffset.height);\r\n            }\r\n            let sampleWeight = baseSampleWeight;\r\n            if (this._unbiased) {\r\n                // the theory is that equal weights for each sample lead to an accumulation of rounding errors.\r\n                // The following equation varies the sampleWeight per sample so that it is uniformly distributed\r\n                // across a range of values whose rounding errors cancel each other out.\r\n                const uniformCenteredDistribution = -0.5 + (i + 0.5) / jitterOffsets.length;\r\n                sampleWeight += roundingRange * uniformCenteredDistribution;\r\n            }\r\n            renderer.setClearColor(this._clearColor, this._clearAlpha);\r\n            renderer.setRenderTarget(this._sampleRenderTarget);\r\n            renderer.clear();\r\n            renderer.render(this.scene, this.camera);\r\n            renderer.setRenderTarget(this.renderToScreen ? null : outputBuffer);\r\n            if (i === 0) {\r\n                renderer.setClearColor(0x000000, 0.0);\r\n                renderer.clear();\r\n            }\r\n            // set the weight of the current samples in the ssaaCopyMaterial\r\n            this._copyUniforms[\"opacity\"].value = sampleWeight;\r\n            // render the sampleRenderTarget to fullscreen\r\n            this._fsQuad.render(renderer);\r\n        }\r\n        // clear color and depth\r\n        this._clearPass.render(renderer, inputBuffer, inputBuffer);\r\n        // render to the final result to fullscreen\r\n        this._copyMaterial.uniforms.inputBuffer.value = outputBuffer.texture;\r\n        this._copyMaterial.uniforms.opacity.value = 1;\r\n        renderer.setRenderTarget(this.renderToScreen ? null : inputBuffer);\r\n        this.scene.add(this._fullScreen);\r\n        renderer.render(this.scene, this.camera);\r\n        this.scene.remove(this._fullScreen);\r\n        if (this.camera.setViewOffset && originalViewOffset.enabled) {\r\n            this.camera.setViewOffset(originalViewOffset.fullWidth, originalViewOffset.fullHeight, originalViewOffset.offsetX, originalViewOffset.offsetY, originalViewOffset.width, originalViewOffset.height);\r\n        }\r\n        else if (this.camera.clearViewOffset) {\r\n            this.camera.clearViewOffset();\r\n        }\r\n        renderer.autoClear = autoClear;\r\n        renderer.setClearColor(this._oldClearColor, oldClearAlpha);\r\n    }\r\n    setSize(width, height) {\r\n        this._sampleRenderTarget.setSize(width, height);\r\n    }\r\n}\r\nexports.SSAARenderPass = SSAARenderPass;\r\nconst _JitterVectors = [\r\n    [\r\n        [0, 0]\r\n    ],\r\n    [\r\n        [4, 4], [-4, -4]\r\n    ],\r\n    [\r\n        [-2, -6], [6, -2], [-6, 2], [2, 6]\r\n    ],\r\n    [\r\n        [1, -3], [-1, 3], [5, 1], [-3, -5],\r\n        [-5, 5], [-7, -1], [3, 7], [7, -7]\r\n    ],\r\n    [\r\n        [1, 1], [-1, -3], [-3, 2], [4, -1],\r\n        [-5, -2], [2, 5], [5, 3], [3, -5],\r\n        [-2, 6], [0, -7], [-4, -6], [-6, 4],\r\n        [-8, 0], [7, -4], [6, 7], [-7, -8]\r\n    ],\r\n    [\r\n        [-4, -7], [-7, -5], [-3, -5], [-5, -4],\r\n        [-1, -4], [-2, -2], [-6, -1], [-4, 0],\r\n        [-7, 1], [-1, 2], [-6, 3], [-3, 3],\r\n        [-7, 6], [-3, 6], [-5, 7], [-1, 7],\r\n        [5, -7], [1, -6], [6, -5], [4, -4],\r\n        [2, -3], [7, -2], [1, -1], [4, -1],\r\n        [2, 1], [6, 2], [0, 4], [4, 4],\r\n        [2, 5], [7, 5], [5, 6], [3, 7]\r\n    ]\r\n];\r\n//# sourceMappingURL=SSAARenderPass.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SelectiveBloomManager = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nclass SelectiveBloomManager {\r\n    // #endregion Properties (2)\r\n    // #region Constructors (1)\r\n    constructor(_renderingEngine) {\r\n        this._renderingEngine = _renderingEngine;\r\n        this._selectiveBloomNodes = [];\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (5)\r\n    addSelection(node) {\r\n        this._selectiveBloomNodes.push(node);\r\n        this.updateSelectiveBloomEffectObjects();\r\n    }\r\n    clearSelection() {\r\n        this._selectiveBloomNodes = [];\r\n        this.updateSelectiveBloomEffectObjects();\r\n    }\r\n    removeSelection(node) {\r\n        const index = this._selectiveBloomNodes.indexOf(node);\r\n        if (index !== -1)\r\n            this._selectiveBloomNodes.splice(index, 1);\r\n        this.updateSelectiveBloomEffectObjects();\r\n        return index !== -1;\r\n    }\r\n    setEffect(selectiveBloomEffect) {\r\n        this._selectiveBloomEffect = selectiveBloomEffect;\r\n        this.updateSelectiveBloomEffectObjects();\r\n    }\r\n    updateSelectiveBloomEffectObjects() {\r\n        this._selectiveBloomEffect.selection.clear();\r\n        for (let i = 0; i < this._selectiveBloomNodes.length; i++) {\r\n            this._selectiveBloomNodes[i].convertedObject[this._renderingEngine.id].traverse(o => {\r\n                if (o instanceof THREE.Mesh)\r\n                    this._selectiveBloomEffect.selection.add(o);\r\n            });\r\n        }\r\n    }\r\n}\r\nexports.SelectiveBloomManager = SelectiveBloomManager;\r\n//# sourceMappingURL=SelectiveBloomManager.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AOEffect = void 0;\r\nconst postprocessing_1 = require(\"postprocessing\");\r\nconst three_1 = require(\"three\");\r\nconst PoissionDenoisePass_1 = require(\"../poissionDenoise/PoissionDenoisePass\");\r\nconst ao_compose_1 = require(\"./shader/ao_compose\");\r\nconst NormalPass_1 = require(\"../../utils/NormalPass\");\r\nconst defaultAOOptions = Object.assign({ resolutionScale: 1, spp: 8, distancePower: 1, power: 2, bias: 40, thickness: 0.075, color: new three_1.Color('black'), useNormalPass: false, velocityDepthNormalPass: null }, PoissionDenoisePass_1.PoissionDenoisePass.DefaultOptions);\r\nclass AOEffect extends postprocessing_1.Effect {\r\n    // #endregion Properties (7)\r\n    // #region Constructors (1)\r\n    constructor(composer, camera, scene, aoPass, options = defaultAOOptions) {\r\n        var _a, _b;\r\n        super('AOEffect', ao_compose_1.ao_compose, {\r\n            uniforms: new Map([\r\n                ['inputTexture', new three_1.Uniform(null)],\r\n                ['depthTexture', new three_1.Uniform(null)],\r\n                ['power', new three_1.Uniform(0)],\r\n                ['color', new three_1.Uniform(new three_1.Color('black'))]\r\n            ])\r\n        });\r\n        this.lastSize = { width: 0, height: 0, resolutionScale: 0 };\r\n        this.resolutionScale = 1;\r\n        this.composer = composer;\r\n        this.aoPass = aoPass;\r\n        options = Object.assign(Object.assign({}, defaultAOOptions), options);\r\n        this.normalPass = new NormalPass_1.NormalPass(scene, camera);\r\n        const normalTexture = (_a = options.normalTexture) !== null && _a !== void 0 ? _a : (_b = this.normalPass) === null || _b === void 0 ? void 0 : _b.texture;\r\n        this.aoPass.fullscreenMaterial.uniforms.normalTexture.value = normalTexture;\r\n        this.aoPass.fullscreenMaterial.defines.useNormalTexture = '';\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        this.aoPass.fullscreenMaterial.uniforms.depthTexture.value = this.normalPass.depthTexture;\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        this.uniforms.get('depthTexture').value = this.normalPass.depthTexture;\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        this.poissionDenoisePass = new PoissionDenoisePass_1.PoissionDenoisePass(camera, this.aoPass.texture, this.normalPass.depthTexture);\r\n        this.makeOptionsReactive(options);\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (3)\r\n    makeOptionsReactive(options) {\r\n        for (const key of Object.keys(options)) {\r\n            Object.defineProperty(this, key, {\r\n                get() {\r\n                    return options[key];\r\n                },\r\n                set(value) {\r\n                    if (value === null || value === undefined)\r\n                        return;\r\n                    options[key] = value;\r\n                    switch (key) {\r\n                        case 'spp':\r\n                            this.aoPass.fullscreenMaterial.defines.spp = value.toFixed(0);\r\n                            this.aoPass.fullscreenMaterial.needsUpdate = true;\r\n                            break;\r\n                        case 'distance':\r\n                            this.aoPass.fullscreenMaterial.uniforms.aoDistance.value = value;\r\n                            this.poissionDenoisePass.fullscreenMaterial.uniforms['distance'].value = Math.max(value, 0.0001);\r\n                            break;\r\n                        case 'resolutionScale':\r\n                            this.setSize(this.lastSize.width, this.lastSize.height);\r\n                            break;\r\n                        case 'power':\r\n                            this.uniforms.get('power').value = value;\r\n                            break;\r\n                        case 'color':\r\n                            this.uniforms.get('color').value.copy(new three_1.Color(value));\r\n                            break;\r\n                        // denoiser\r\n                        case 'iterations':\r\n                        case 'radius':\r\n                        case 'rings':\r\n                        case 'samples':\r\n                            this.poissionDenoisePass[key] = value;\r\n                            break;\r\n                        case 'lumaPhi':\r\n                        case 'depthPhi':\r\n                        case 'normalPhi':\r\n                            this.poissionDenoisePass.fullscreenMaterial.uniforms[key].value = Math.max(value, 0.0001);\r\n                            break;\r\n                        default:\r\n                            if (key in this.aoPass.fullscreenMaterial.uniforms) {\r\n                                this.aoPass.fullscreenMaterial.uniforms[key].value = value;\r\n                            }\r\n                    }\r\n                },\r\n                configurable: true\r\n            });\r\n            // apply all uniforms and defines\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this[key] = options[key];\r\n        }\r\n    }\r\n    setSize(width, height) {\r\n        var _a;\r\n        if (width === undefined || height === undefined)\r\n            return;\r\n        if (width === this.lastSize.width &&\r\n            height === this.lastSize.height &&\r\n            this.resolutionScale === this.lastSize.resolutionScale) {\r\n            return;\r\n        }\r\n        (_a = this.normalPass) === null || _a === void 0 ? void 0 : _a.setSize(width, height);\r\n        this.aoPass.setSize(width * this.resolutionScale, height * this.resolutionScale);\r\n        this.poissionDenoisePass.setSize(width, height);\r\n        this.lastSize = {\r\n            width,\r\n            height,\r\n            resolutionScale: this.resolutionScale\r\n        };\r\n    }\r\n    update(renderer) {\r\n        var _a;\r\n        if ('animatedNoise' in this.aoPass.fullscreenMaterial.defines) {\r\n            delete this.aoPass.fullscreenMaterial.defines.animatedNoise;\r\n            this.aoPass.fullscreenMaterial.needsUpdate = true;\r\n        }\r\n        // set input texture\r\n        if (this.poissionDenoisePass.iterations > 0) {\r\n            this.uniforms.get('inputTexture').value = this.poissionDenoisePass.texture;\r\n        }\r\n        else {\r\n            this.uniforms.get('inputTexture').value = this.aoPass.texture;\r\n        }\r\n        (_a = this.normalPass) === null || _a === void 0 ? void 0 : _a.render(renderer);\r\n        this.aoPass.render(renderer);\r\n        this.poissionDenoisePass.render(renderer);\r\n    }\r\n}\r\nexports.AOEffect = AOEffect;\r\n// #region Properties (7)\r\nAOEffect.DefaultOptions = defaultAOOptions;\r\n//# sourceMappingURL=AOEffect.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AOPass = void 0;\r\nconst postprocessing_1 = require(\"postprocessing\");\r\nconst three_1 = require(\"three\");\r\nconst basic_1 = require(\"../utils/shader/basic\");\r\nconst sampleBlueNoise_1 = require(\"../utils/shader/sampleBlueNoise\");\r\nconst PoissionDenoisePass_1 = require(\"../poissionDenoise/PoissionDenoisePass\");\r\n// a general AO pass that can be used for any AO algorithm\r\nclass AOPass extends postprocessing_1.Pass {\r\n    // #endregion Properties (3)\r\n    // #region Constructors (1)\r\n    constructor(camera, scene, fragmentShader) {\r\n        super();\r\n        this._camera = camera;\r\n        this._scene = scene;\r\n        this.renderTarget = new three_1.WebGLRenderTarget(1, 1, {\r\n            type: three_1.HalfFloatType,\r\n            depthBuffer: false\r\n        });\r\n        const finalFragmentShader = fragmentShader.replace('#include <sampleBlueNoise>', sampleBlueNoise_1.sampleBlueNoise);\r\n        this.fullscreenMaterial = new three_1.ShaderMaterial({\r\n            fragmentShader: finalFragmentShader,\r\n            vertexShader: basic_1.basic,\r\n            uniforms: {\r\n                depthTexture: { value: null },\r\n                normalTexture: { value: null },\r\n                cameraNear: { value: 0 },\r\n                cameraFar: { value: 0 },\r\n                viewMatrix: { value: this._camera.matrixWorldInverse },\r\n                projectionViewMatrix: { value: new three_1.Matrix4() },\r\n                projectionMatrixInverse: { value: this._camera.projectionMatrixInverse },\r\n                cameraMatrixWorld: { value: this._camera.matrixWorld },\r\n                texSize: { value: new three_1.Vector2() },\r\n                blueNoiseTexture: { value: null },\r\n                blueNoiseRepeat: { value: new three_1.Vector2() },\r\n                aoDistance: { value: 0 },\r\n                distancePower: { value: 0 },\r\n                bias: { value: 0 },\r\n                thickness: { value: 0 },\r\n                power: { value: 0 },\r\n                frame: { value: 0 }\r\n            },\r\n            blending: three_1.NoBlending,\r\n            depthWrite: false,\r\n            depthTest: false,\r\n            toneMapped: false\r\n        });\r\n        this.fullscreenMaterial.uniforms.blueNoiseTexture.value = PoissionDenoisePass_1.PoissionDenoisePass.blueNoiseTexture;\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Accessors (1)\r\n    get texture() {\r\n        return this.renderTarget.texture;\r\n    }\r\n    // #endregion Public Accessors (1)\r\n    // #region Public Methods (2)\r\n    render(renderer) {\r\n        const spp = +this.fullscreenMaterial.defines.spp;\r\n        this.fullscreenMaterial.uniforms.frame.value = (this.fullscreenMaterial.uniforms.frame.value + spp) % 65536;\r\n        this.fullscreenMaterial.uniforms.cameraNear.value = this._camera.near;\r\n        this.fullscreenMaterial.uniforms.cameraFar.value = this._camera.far;\r\n        this.fullscreenMaterial.uniforms.projectionViewMatrix.value.multiplyMatrices(this._camera.projectionMatrix, this._camera.matrixWorldInverse);\r\n        const noiseTexture = this.fullscreenMaterial.uniforms.blueNoiseTexture.value;\r\n        if (noiseTexture) {\r\n            const { width, height } = noiseTexture.source.data;\r\n            this.fullscreenMaterial.uniforms.blueNoiseRepeat.value.set(this.renderTarget.width / width, this.renderTarget.height / height);\r\n        }\r\n        renderer.setRenderTarget(this.renderTarget);\r\n        renderer.render(this.scene, this.camera);\r\n    }\r\n    setSize(width, height) {\r\n        this.renderTarget.setSize(width, height);\r\n        this.fullscreenMaterial.uniforms.texSize.value.set(this.renderTarget.width, this.renderTarget.height);\r\n    }\r\n}\r\nexports.AOPass = AOPass;\r\n//# sourceMappingURL=AOPass.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ao_compose = void 0;\r\nexports.ao_compose = `\r\nuniform sampler2D inputTexture;\r\nuniform highp sampler2D depthTexture;\r\nuniform float power;\r\nuniform vec3 color;\r\n\r\nvoid mainImage(const in vec4 inputColor, const in vec2 uv, out vec4 outputColor) {\r\n    float unpackedDepth = textureLod(depthTexture, uv, 0.).r;\r\n\r\n    float ao = unpackedDepth > 0.9999 ? 1.0 : textureLod(inputTexture, uv, 0.0).a;\r\n    ao = pow(ao, power);\r\n\r\n    vec3 aoColor = mix(color, vec3(1.), ao);\r\n\r\n    aoColor *= inputColor.rgb;\r\n\r\n    outputColor = vec4(aoColor, inputColor.a);\r\n}\r\n`;\r\n//# sourceMappingURL=ao_compose.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.HBAOEffect = void 0;\r\nconst AOEffect_1 = require(\"../ao/AOEffect\");\r\nconst AOPass_1 = require(\"../ao/AOPass\");\r\nconst hbao_1 = require(\"./shader/hbao\");\r\nconst hbao_utils_1 = require(\"./shader/hbao_utils\");\r\nconst finalFragmentShader = hbao_1.hbao.replace('#include <hbao_utils>', hbao_utils_1.hbao_utils);\r\nclass HBAOPass extends AOPass_1.AOPass {\r\n    // #region Constructors (1)\r\n    constructor(camera, scene) {\r\n        super(camera, scene, finalFragmentShader);\r\n    }\r\n}\r\nclass HBAOEffect extends AOEffect_1.AOEffect {\r\n    // #endregion Properties (1)\r\n    // #region Constructors (1)\r\n    constructor(composer, camera, scene, options = AOEffect_1.AOEffect.DefaultOptions) {\r\n        super(composer, camera, scene, new HBAOPass(camera, scene), Object.assign(Object.assign(Object.assign({}, AOEffect_1.AOEffect.DefaultOptions), HBAOEffect.DefaultOptions), options));\r\n        // #region Properties (1)\r\n        this.lastSize = { width: 0, height: 0, resolutionScale: 0 };\r\n    }\r\n}\r\nexports.HBAOEffect = HBAOEffect;\r\n//# sourceMappingURL=HBAOEffect.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.hbao = void 0;\r\nexports.hbao = `\r\nvarying vec2 vUv;\r\n\r\nuniform highp sampler2D depthTexture;\r\n\r\nuniform mat4 projectionViewMatrix;\r\nuniform int frame;\r\n\r\nuniform sampler2D blueNoiseTexture;\r\nuniform vec2 blueNoiseRepeat;\r\nuniform vec2 texSize;\r\n\r\nuniform float aoDistance;\r\nuniform float distancePower;\r\nuniform float bias;\r\nuniform float thickness;\r\n\r\n#include <packing>\r\n// HBAO Utils\r\n#include <hbao_utils>\r\n\r\nfloat getOcclusion(const vec3 cameraPosition, const vec3 worldPos, const vec3 worldNormal, const float depth, const int seed, inout float totalWeight) {\r\n    vec4 blueNoise = sampleBlueNoise(blueNoiseTexture, seed, blueNoiseRepeat, texSize);\r\n\r\n    vec3 sampleWorldDir = cosineSampleHemisphere(worldNormal, blueNoise.rg);\r\n\r\n    vec3 sampleWorldPos = worldPos + aoDistance * pow(blueNoise.b, distancePower + 1.0) * sampleWorldDir;\r\n\r\n    // Project the sample position to screen space\r\n    vec4 sampleUv = projectionViewMatrix * vec4(sampleWorldPos, 1.);\r\n    sampleUv.xy /= sampleUv.w;\r\n    sampleUv.xy = sampleUv.xy * 0.5 + 0.5;\r\n\r\n    // Get the depth of the sample position\r\n    float sampleDepth = textureLod(depthTexture, sampleUv.xy, 0.0).r;\r\n\r\n    // Compute the horizon line\r\n    float deltaDepth = depth - sampleDepth;\r\n\r\n    // distance based bias\r\n    float d = distance(sampleWorldPos, cameraPosition) / aoDistance;\r\n    deltaDepth *= 0.001 * d * d;\r\n\r\n    float th = thickness * 0.01;\r\n\r\n    float theta = dot(worldNormal, sampleWorldDir);\r\n    totalWeight += theta;\r\n\r\n    if (deltaDepth < th) {\r\n        float horizon = sampleDepth + deltaDepth * bias * 1000.;\r\n\r\n        float occlusion = max(0.0, horizon - depth) * theta;\r\n\r\n        float m = max(0., 1. - deltaDepth / th);\r\n        occlusion = 10. * occlusion * m / d;\r\n\r\n        occlusion = max(0.0, occlusion);\r\n        occlusion = sqrt(occlusion);\r\n        return occlusion;\r\n    }\r\n\r\n    return 0.;\r\n}\r\n\r\nvoid main() {\r\n    float depth = textureLod(depthTexture, vUv, 0.0).r;\r\n\r\n    // filter out background\r\n    if (depth == 1.0) {\r\n        discard;\r\n        return;\r\n    }\r\n\r\n    vec4 cameraPosition = cameraMatrixWorld * vec4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    vec3 worldPos = getWorldPos(depth, vUv);\r\n    vec3 worldNormal = getWorldNormal(vUv);\r\n\r\n    float ao = 0.0, totalWeight = 0.0;\r\n\r\n    for (int i = 0; i < spp; i++) {\r\n        int seed = i;\r\n#ifdef animatedNoise\r\n        seed += frame;\r\n#endif\r\n\r\n        float occlusion = getOcclusion(cameraPosition.xyz, worldPos, worldNormal, depth, seed, totalWeight);\r\n        ao += occlusion;\r\n    }\r\n\r\n    if (totalWeight > 0.) ao /= totalWeight;\r\n\r\n    // clamp ao to [0, 1]\r\n    ao = clamp(1. - ao, 0., 1.);\r\n\r\n    gl_FragColor = vec4(worldNormal, ao);\r\n}\r\n`;\r\n//# sourceMappingURL=hbao.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.hbao_utils = void 0;\r\nexports.hbao_utils = `\r\n#include <sampleBlueNoise>\r\n\r\nuniform sampler2D normalTexture;\r\nuniform float cameraNear;\r\nuniform float cameraFar;\r\nuniform mat4 projectionMatrixInverse;\r\nuniform mat4 cameraMatrixWorld;\r\n\r\n// source: https://github.com/mrdoob/three.js/blob/342946c8392639028da439b6dc0597e58209c696/examples/js/shaders/SAOShader.js#L123\r\nfloat getViewZ(const float depth) {\r\n#ifdef PERSPECTIVE_CAMERA\r\n    return perspectiveDepthToViewZ(depth, cameraNear, cameraFar);\r\n#else\r\n    return orthographicDepthToViewZ(depth, cameraNear, cameraFar);\r\n#endif\r\n}\r\n\r\n// source: https://github.com/N8python/ssao/blob/master/EffectShader.js#L52\r\nvec3 getWorldPos(const float depth, const vec2 coord) {\r\n    float z = depth * 2.0 - 1.0;\r\n    vec4 clipSpacePosition = vec4(coord * 2.0 - 1.0, z, 1.0);\r\n    vec4 viewSpacePosition = projectionMatrixInverse * clipSpacePosition;\r\n\r\n    // Perspective division\r\n    vec4 worldSpacePosition = cameraMatrixWorld * viewSpacePosition;\r\n    worldSpacePosition.xyz /= worldSpacePosition.w;\r\n\r\n    return worldSpacePosition.xyz;\r\n}\r\n\r\nvec3 slerp(const vec3 a, const vec3 b, const float t) {\r\n    float cosAngle = dot(a, b);\r\n    float angle = acos(cosAngle);\r\n\r\n    if (abs(angle) < 0.001) {\r\n        return mix(a, b, t);\r\n    }\r\n\r\n    float sinAngle = sin(angle);\r\n    float t1 = sin((1.0 - t) * angle) / sinAngle;\r\n    float t2 = sin(t * angle) / sinAngle;\r\n\r\n    return (a * t1) + (b * t2);\r\n}\r\n\r\nvec3 computeWorldNormal() {\r\n    vec2 size = vec2(textureSize(depthTexture, 0));\r\n    ivec2 p = ivec2(vUv * size);\r\n    float c0 = texelFetch(depthTexture, p, 0).x;\r\n    float l2 = texelFetch(depthTexture, p - ivec2(2, 0), 0).x;\r\n    float l1 = texelFetch(depthTexture, p - ivec2(1, 0), 0).x;\r\n    float r1 = texelFetch(depthTexture, p + ivec2(1, 0), 0).x;\r\n    float r2 = texelFetch(depthTexture, p + ivec2(2, 0), 0).x;\r\n    float b2 = texelFetch(depthTexture, p - ivec2(0, 2), 0).x;\r\n    float b1 = texelFetch(depthTexture, p - ivec2(0, 1), 0).x;\r\n    float t1 = texelFetch(depthTexture, p + ivec2(0, 1), 0).x;\r\n    float t2 = texelFetch(depthTexture, p + ivec2(0, 2), 0).x;\r\n    float dl = abs((2.0 * l1 - l2) - c0);\r\n    float dr = abs((2.0 * r1 - r2) - c0);\r\n    float db = abs((2.0 * b1 - b2) - c0);\r\n    float dt = abs((2.0 * t1 - t2) - c0);\r\n    vec3 ce = getWorldPos(c0, vUv).xyz;\r\n    vec3 dpdx = (dl < dr) ? ce - getWorldPos(l1, (vUv - vec2(1.0 / size.x, 0.0))).xyz\r\n                          : -ce + getWorldPos(r1, (vUv + vec2(1.0 / size.x, 0.0))).xyz;\r\n    vec3 dpdy = (db < dt) ? ce - getWorldPos(b1, (vUv - vec2(0.0, 1.0 / size.y))).xyz\r\n                          : -ce + getWorldPos(t1, (vUv + vec2(0.0, 1.0 / size.y))).xyz;\r\n    return normalize(cross(dpdx, dpdy));\r\n}\r\n\r\nvec3 getWorldNormal(const vec2 uv) {\r\n#ifdef useNormalTexture\r\n    vec3 worldNormal = unpackRGBToNormal(textureLod(normalTexture, uv, 0.).rgb);\r\n\r\n    worldNormal = (vec4(worldNormal, 1.) * viewMatrix).xyz;  // view-space to world-space\r\n    return normalize(worldNormal);\r\n#else\r\n    return computeWorldNormal();  // compute world normal from depth\r\n#endif\r\n}\r\n\r\n#define PI 3.14159265358979323846264338327950288\r\n\r\n// source: https://www.shadertoy.com/view/cll3R4\r\nvec3 cosineSampleHemisphere(const vec3 n, const vec2 u) {\r\n    float r = sqrt(u.x);\r\n    float theta = 2.0 * PI * u.y;\r\n\r\n    vec3 b = normalize(cross(n, vec3(0.0, 1.0, 1.0)));\r\n    vec3 t = cross(b, n);\r\n\r\n    return normalize(r * sin(theta) * b + sqrt(1.0 - u.x) * n + r * cos(theta) * t);\r\n}\r\n\r\n`;\r\n//# sourceMappingURL=hbao_utils.js.map","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.PoissionDenoisePass = void 0;\r\nconst basic_1 = require(\"../utils/shader/basic\");\r\nconst three_1 = require(\"three\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst postprocessing_1 = require(\"postprocessing\");\r\nconst poissionDenoise_1 = require(\"./shader/poissionDenoise\");\r\nconst sampleBlueNoise_1 = require(\"../utils/shader/sampleBlueNoise\");\r\nconst finalFragmentShader = poissionDenoise_1.poissionDenoise.replace('#include <sampleBlueNoise>', sampleBlueNoise_1.sampleBlueNoise);\r\nconst defaultPoissonBlurOptions = {\r\n    iterations: 1,\r\n    radius: 8,\r\n    rings: 5.625,\r\n    lumaPhi: 10,\r\n    depthPhi: 2,\r\n    normalPhi: 3.25,\r\n    samples: 16,\r\n    distance: 1,\r\n    normalTexture: null\r\n};\r\nclass PoissionDenoisePass extends postprocessing_1.Pass {\r\n    // #endregion Properties (11)\r\n    // #region Constructors (1)\r\n    constructor(camera, inputTexture, depthTexture, options = defaultPoissonBlurOptions) {\r\n        super('PoissionBlurPass');\r\n        this.index = 0;\r\n        this.iterations = defaultPoissonBlurOptions.iterations;\r\n        this.radius = 8;\r\n        this.rings = 5.625;\r\n        this.samples = 16;\r\n        if (PoissionDenoisePass.blueNoiseTexture === undefined)\r\n            this.loadBlueNoiseTexture();\r\n        options = Object.assign(Object.assign({}, defaultPoissonBlurOptions), options);\r\n        this.inputTexture = inputTexture;\r\n        this.fullscreenMaterial = new three_1.ShaderMaterial({\r\n            fragmentShader: finalFragmentShader,\r\n            vertexShader: basic_1.basic,\r\n            uniforms: {\r\n                depthTexture: { value: null },\r\n                inputTexture: { value: null },\r\n                projectionMatrixInverse: { value: new three_1.Matrix4() },\r\n                cameraMatrixWorld: { value: new three_1.Matrix4() },\r\n                lumaPhi: { value: 5.0 },\r\n                depthPhi: { value: 5.0 },\r\n                normalPhi: { value: 5.0 },\r\n                distance: { value: 1.0 },\r\n                resolution: { value: new three_1.Vector2() },\r\n                blueNoiseTexture: { value: null },\r\n                index: { value: 0 },\r\n                blueNoiseRepeat: { value: new three_1.Vector2() }\r\n            }\r\n        });\r\n        const renderTargetOptions = {\r\n            type: three_1.HalfFloatType,\r\n            depthBuffer: false\r\n        };\r\n        this.renderTargetA = new three_1.WebGLRenderTarget(1, 1, renderTargetOptions);\r\n        this.renderTargetB = new three_1.WebGLRenderTarget(1, 1, renderTargetOptions);\r\n        const { uniforms } = this.fullscreenMaterial;\r\n        uniforms['inputTexture'].value = this.inputTexture;\r\n        uniforms['depthTexture'].value = depthTexture;\r\n        uniforms['projectionMatrixInverse'].value = camera.projectionMatrixInverse;\r\n        uniforms['cameraMatrixWorld'].value = camera.matrixWorld;\r\n        uniforms['depthPhi'].value = options.depthPhi;\r\n        uniforms['normalPhi'].value = options.normalPhi;\r\n        uniforms['distance'].value = options.distance;\r\n        if (options.normalTexture) {\r\n            uniforms['normalTexture'] = { value: options.normalTexture };\r\n        }\r\n        else {\r\n            this.fullscreenMaterial.defines.NORMAL_IN_RGB = '';\r\n        }\r\n        // these properties need the shader to be recompiled\r\n        for (const prop of ['radius', 'rings', 'samples']) {\r\n            Object.defineProperty(this, prop, {\r\n                get: () => options[prop],\r\n                set: value => {\r\n                    options[prop] = value;\r\n                    this.setSize(this.renderTargetA.width, this.renderTargetA.height);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    loadBlueNoiseTexture() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const result = yield viewer_shared_services_1.HttpClient.instance.loadTexture('https://viewer.shapediver.com/v3/graphics/LDR_RGBA_0.png');\r\n            if (result) {\r\n                const url = URL.createObjectURL(result.data.blob);\r\n                new three_1.TextureLoader().load(url, texture => {\r\n                    URL.revokeObjectURL(url);\r\n                    PoissionDenoisePass.blueNoiseTexture = texture;\r\n                    PoissionDenoisePass.blueNoiseTexture.minFilter = three_1.NearestFilter;\r\n                    PoissionDenoisePass.blueNoiseTexture.magFilter = three_1.NearestFilter;\r\n                    PoissionDenoisePass.blueNoiseTexture.wrapS = three_1.RepeatWrapping;\r\n                    PoissionDenoisePass.blueNoiseTexture.wrapT = three_1.RepeatWrapping;\r\n                    PoissionDenoisePass.blueNoiseTexture.colorSpace = three_1.NoColorSpace;\r\n                    PoissionDenoisePass.blueNoiseTexture.needsUpdate = true;\r\n                    this.fullscreenMaterial.uniforms.blueNoiseTexture.value = PoissionDenoisePass.blueNoiseTexture;\r\n                });\r\n            }\r\n            else {\r\n                viewer_shared_services_1.Logger.instance.warn('The blue noise texture could not be loaded. This may result in a suboptimal denoising quality. Retrying in 1 second...');\r\n                // if there was an issue loading the texture\r\n                // set a timeout with 1 second to try again\r\n                setTimeout(() => {\r\n                    this.loadBlueNoiseTexture();\r\n                }, 1000);\r\n            }\r\n        });\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Getters And Setters (1)\r\n    get texture() {\r\n        return this.renderTargetB.texture;\r\n    }\r\n    // #endregion Public Getters And Setters (1)\r\n    // #region Public Methods (4)\r\n    generateDenoiseSamples(numSamples, numRings, r, texelSize) {\r\n        const angleStep = (2 * Math.PI * numRings) / numSamples;\r\n        const invNumSamples = 1.0 / numSamples;\r\n        const radiusStep = invNumSamples;\r\n        const samples = [];\r\n        let radius = invNumSamples;\r\n        let angle = 0;\r\n        for (let i = 0; i < numSamples; i++) {\r\n            const v = new three_1.Vector2(Math.cos(angle), Math.sin(angle))\r\n                .multiplyScalar(Math.pow(radius, 0.75))\r\n                .multiply(texelSize)\r\n                .multiplyScalar(r);\r\n            if (isNaN(v.x) || v.x === Infinity || v.x === -Infinity)\r\n                v.x = 0;\r\n            if (isNaN(v.y) || v.y === Infinity || v.y === -Infinity)\r\n                v.y = 0;\r\n            samples.push(v);\r\n            radius += radiusStep;\r\n            angle += angleStep;\r\n        }\r\n        return samples;\r\n    }\r\n    generatePoissonDiskConstant(poissonDisk) {\r\n        const samples = poissonDisk.length;\r\n        let glslCode = 'const vec2 poissonDisk[samples] = vec2[samples](\\n';\r\n        for (let i = 0; i < samples; i++) {\r\n            const sample = poissonDisk[i];\r\n            glslCode += `    vec2(${sample.x}, ${sample.y})`;\r\n            if (i < samples - 1) {\r\n                glslCode += ',';\r\n            }\r\n            glslCode += '\\n';\r\n        }\r\n        glslCode += ');';\r\n        return glslCode;\r\n    }\r\n    render(renderer) {\r\n        this.fullscreenMaterial.uniforms.index.value = 0;\r\n        const noiseTexture = this.fullscreenMaterial.uniforms.blueNoiseTexture.value;\r\n        if (noiseTexture !== undefined && noiseTexture !== null && noiseTexture instanceof three_1.Texture) {\r\n            const { width, height } = noiseTexture.source.data;\r\n            this.fullscreenMaterial.uniforms.blueNoiseRepeat.value.set(this.renderTargetA.width / width, this.renderTargetA.height / height);\r\n        }\r\n        for (let i = 0; i < 2 * this.iterations; i++) {\r\n            const horizontal = i % 2 === 0;\r\n            const inputRenderTarget = horizontal ? this.renderTargetB : this.renderTargetA;\r\n            this.fullscreenMaterial.uniforms['inputTexture'].value = i === 0 ? this.inputTexture : inputRenderTarget.texture;\r\n            const renderTarget = horizontal ? this.renderTargetA : this.renderTargetB;\r\n            renderer.setRenderTarget(renderTarget);\r\n            renderer.render(this.scene, this.camera);\r\n            this.fullscreenMaterial.uniforms.index.value = (this.fullscreenMaterial.uniforms.index.value + 1) % 4;\r\n        }\r\n    }\r\n    setSize(width, height) {\r\n        this.renderTargetA.setSize(width, height);\r\n        this.renderTargetB.setSize(width, height);\r\n        this.fullscreenMaterial.uniforms.resolution.value.set(width, height);\r\n        const poissonDisk = this.generateDenoiseSamples(this.samples, this.rings, this.radius, new three_1.Vector2(1 / width, 1 / height));\r\n        const sampleDefine = `const int samples = ${this.samples};\\n`;\r\n        const poissonDiskConstant = this.generatePoissonDiskConstant(poissonDisk);\r\n        this.fullscreenMaterial.fragmentShader = sampleDefine + poissonDiskConstant + '\\n' + finalFragmentShader;\r\n        this.fullscreenMaterial.needsUpdate = true;\r\n    }\r\n}\r\nexports.PoissionDenoisePass = PoissionDenoisePass;\r\n// #region Properties (11)\r\nPoissionDenoisePass.DefaultOptions = defaultPoissonBlurOptions;\r\n//# sourceMappingURL=PoissionDenoisePass.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.poissionDenoise = void 0;\r\nexports.poissionDenoise = `\r\nvarying vec2 vUv;\r\n\r\nuniform sampler2D inputTexture;\r\nuniform highp sampler2D depthTexture;\r\nuniform sampler2D normalTexture;\r\nuniform mat4 projectionMatrixInverse;\r\nuniform mat4 cameraMatrixWorld;\r\nuniform float lumaPhi;\r\nuniform float depthPhi;\r\nuniform float normalPhi;\r\nuniform float distance;\r\nuniform sampler2D blueNoiseTexture;\r\nuniform vec2 blueNoiseRepeat;\r\nuniform int index;\r\nuniform vec2 resolution;\r\n\r\n#include <common>\r\n#include <sampleBlueNoise>\r\n\r\nvec3 getWorldPos(float depth, vec2 coord) {\r\n    float z = depth * 2.0 - 1.0;\r\n    vec4 clipSpacePosition = vec4(coord * 2.0 - 1.0, z, 1.0);\r\n    vec4 viewSpacePosition = projectionMatrixInverse * clipSpacePosition;\r\n\r\n    // Perspective division\r\n    vec4 worldSpacePosition = cameraMatrixWorld * viewSpacePosition;\r\n    worldSpacePosition.xyz /= worldSpacePosition.w;\r\n    return worldSpacePosition.xyz;\r\n}\r\n\r\n#define luminance(a) dot(vec3(0.2125, 0.7154, 0.0721), a)\r\n\r\nvec3 getNormal(vec2 uv, vec4 texel) {\r\n#ifdef NORMAL_IN_RGB\r\n    // in case the normal is stored in the RGB channels of the texture\r\n    return texel.rgb;\r\n#else\r\n    return normalize(textureLod(normalTexture, uv, 0.).xyz * 2.0 - 1.0);\r\n#endif\r\n}\r\n\r\nfloat distToPlane(const vec3 worldPos, const vec3 neighborWorldPos, const vec3 worldNormal) {\r\n    vec3 toCurrent = worldPos - neighborWorldPos;\r\n    float distToPlane = abs(dot(toCurrent, worldNormal));\r\n\r\n    return distToPlane;\r\n}\r\n\r\nvoid main() {\r\n    vec4 depthTexel = textureLod(depthTexture, vUv, 0.);\r\n\r\n    if (depthTexel.r == 1.0 || dot(depthTexel.rgb, depthTexel.rgb) == 0.) {\r\n        discard;\r\n        return;\r\n    }\r\n\r\n    vec4 texel = textureLod(inputTexture, vUv, 0.0);\r\n\r\n    vec3 normal = getNormal(vUv, texel);\r\n\r\n#ifdef NORMAL_IN_RGB\r\n    float denoised = texel.a;\r\n    float center = texel.a;\r\n#else\r\n    vec3 denoised = texel.rgb;\r\n    vec3 center = texel.rgb;\r\n#endif\r\n\r\n    float depth = depthTexel.x;\r\n    vec3 worldPos = getWorldPos(depth, vUv);\r\n\r\n    float totalWeight = 1.0;\r\n\r\n    vec4 blueNoise = sampleBlueNoise(blueNoiseTexture, 0, blueNoiseRepeat, resolution);\r\n    float angle = blueNoise[index];\r\n\r\n    float s = sin(angle), c = cos(angle);\r\n\r\n    mat2 rotationMatrix = mat2(c, -s, s, c);\r\n\r\n    for (int i = 0; i < samples; i++) {\r\n        vec2 offset = rotationMatrix * poissonDisk[i];\r\n        vec2 neighborUv = vUv + offset;\r\n\r\n        vec4 neighborTexel = textureLod(inputTexture, neighborUv, 0.0);\r\n\r\n        vec3 neighborNormal = getNormal(neighborUv, neighborTexel);\r\n#ifdef NORMAL_IN_RGB\r\n        float neighborColor = neighborTexel.a;\r\n#else\r\n        vec3 neighborColor = neighborTexel.rgb;\r\n#endif\r\n\r\n        float sampleDepth = textureLod(depthTexture, neighborUv, 0.0).x;\r\n\r\n        vec3 worldPosSample = getWorldPos(sampleDepth, neighborUv);\r\n        float tangentPlaneDist = abs(dot(worldPos - worldPosSample, normal));\r\n\r\n        float normalDiff = dot(normal, neighborNormal);\r\n        float normalSimilarity = pow(max(normalDiff, 0.), normalPhi);\r\n\r\n#ifdef NORMAL_IN_RGB\r\n        float lumaDiff = abs(neighborColor - center);\r\n#else\r\n        float lumaDiff = abs(luminance(neighborColor) - luminance(center));\r\n#endif\r\n        float lumaSimilarity = max(1.0 - lumaDiff / lumaPhi, 0.0);\r\n\r\n        float depthDiff = 1. - (distToPlane(worldPos, worldPosSample, normal) / distance);\r\n        float depthSimilarity = max(depthDiff / depthPhi, 0.);\r\n\r\n        float w = lumaSimilarity * depthSimilarity * normalSimilarity;\r\n\r\n        denoised += w * neighborColor;\r\n        totalWeight += w;\r\n    }\r\n\r\n    if (totalWeight > 0.) denoised /= totalWeight;\r\n\r\n#ifdef NORMAL_IN_RGB\r\n    gl_FragColor = vec4(normal, denoised);\r\n#else\r\n    gl_FragColor = vec4(denoised, 1.);\r\n#endif\r\n}\r\n`;\r\n//# sourceMappingURL=poissionDenoise.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SSAOEffect = void 0;\r\nconst three_1 = require(\"three\");\r\nconst AOEffect_1 = require(\"../ao/AOEffect\");\r\nconst AOPass_1 = require(\"../ao/AOPass\");\r\nconst ssao_1 = require(\"./shader/ssao\");\r\nclass SSAOPass extends AOPass_1.AOPass {\r\n    // #region Constructors (1)\r\n    constructor(camera, scene) {\r\n        super(camera, scene, ssao_1.ssao);\r\n    }\r\n}\r\nclass SSAOEffect extends AOEffect_1.AOEffect {\r\n    // #endregion Properties (1)\r\n    // #region Constructors (1)\r\n    constructor(composer, camera, scene, options) {\r\n        super(composer, camera, scene, new SSAOPass(camera, scene), options);\r\n        // #region Properties (1)\r\n        this.spp = 16;\r\n        SSAOEffect.DefaultOptions = Object.assign(Object.assign({}, AOEffect_1.AOEffect.DefaultOptions), {\r\n            spp: 16,\r\n            distance: 1,\r\n            distancePower: 0.25,\r\n            power: 2\r\n        });\r\n        options = Object.assign(Object.assign({}, SSAOEffect.DefaultOptions), options);\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (2)\r\n    getPointsOnSphere(n) {\r\n        const points = [];\r\n        const inc = Math.PI * (3 - Math.sqrt(5));\r\n        const off = 2 / n;\r\n        for (let k = 0; k < n; k++) {\r\n            const y = k * off - 1 + off / 2;\r\n            const r = Math.sqrt(1 - y * y);\r\n            const phi = k * inc;\r\n            points.push(new three_1.Vector3(Math.cos(phi) * r, y, Math.sin(phi) * r));\r\n        }\r\n        return points;\r\n    }\r\n    makeOptionsReactive(options) {\r\n        super.makeOptionsReactive(options);\r\n        for (const key of ['spp']) {\r\n            Object.defineProperty(this, key, {\r\n                get() {\r\n                    return options[key];\r\n                },\r\n                set(value) {\r\n                    if (value === null || value === undefined)\r\n                        return;\r\n                    options[key] = value;\r\n                    switch (key) {\r\n                        case 'spp': {\r\n                            this.aoPass.fullscreenMaterial.defines.spp = value.toFixed(0);\r\n                            const samples = this.getPointsOnSphere(value);\r\n                            const samplesR = [];\r\n                            for (let i = 0; i < value; i++) {\r\n                                samplesR.push((i + 1) / value);\r\n                            }\r\n                            this.aoPass.fullscreenMaterial.uniforms.samples = { value: samples };\r\n                            this.aoPass.fullscreenMaterial.uniforms.samplesR = { value: samplesR };\r\n                            this.aoPass.fullscreenMaterial.needsUpdate = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                },\r\n                configurable: true\r\n            });\r\n        }\r\n        this.spp = options['spp'];\r\n    }\r\n}\r\nexports.SSAOEffect = SSAOEffect;\r\n//# sourceMappingURL=SSAOEffect.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ssao = void 0;\r\nexports.ssao = `\r\nvarying vec2 vUv;\r\n\r\nuniform highp sampler2D depthTexture;\r\nuniform sampler2D normalTexture;\r\nuniform mat4 projectionViewMatrix;\r\nuniform mat4 cameraMatrixWorld;\r\n\r\nuniform sampler2D blueNoiseTexture;\r\nuniform vec2 blueNoiseRepeat;\r\nuniform vec2 texSize;\r\nuniform mat4 projectionMatrixInverse;\r\n\r\nuniform float aoDistance;\r\nuniform float distancePower;\r\nuniform float cameraNear;\r\nuniform float cameraFar;\r\nuniform int frame;\r\n\r\nuniform vec3[spp] samples;\r\nuniform float[spp] samplesR;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <sampleBlueNoise>\r\n\r\n// source: https://github.com/N8python/ssao/blob/master/EffectShader.js#L52\r\nvec3 getWorldPos(const float depth, const vec2 coord) {\r\n    float z = depth * 2.0 - 1.0;\r\n    vec4 clipSpacePosition = vec4(coord * 2.0 - 1.0, z, 1.0);\r\n    vec4 viewSpacePosition = projectionMatrixInverse * clipSpacePosition;\r\n\r\n    // Perspective division\r\n    vec4 worldSpacePosition = cameraMatrixWorld * viewSpacePosition;\r\n    worldSpacePosition.xyz /= worldSpacePosition.w;\r\n\r\n    return worldSpacePosition.xyz;\r\n}\r\n\r\nvec3 computeNormal(vec3 worldPos, vec2 vUv) {\r\n    vec2 size = vec2(textureSize(depthTexture, 0));\r\n    ivec2 p = ivec2(vUv * size);\r\n    float c0 = texelFetch(depthTexture, p, 0).x;\r\n    float l2 = texelFetch(depthTexture, p - ivec2(2, 0), 0).x;\r\n    float l1 = texelFetch(depthTexture, p - ivec2(1, 0), 0).x;\r\n    float r1 = texelFetch(depthTexture, p + ivec2(1, 0), 0).x;\r\n    float r2 = texelFetch(depthTexture, p + ivec2(2, 0), 0).x;\r\n    float b2 = texelFetch(depthTexture, p - ivec2(0, 2), 0).x;\r\n    float b1 = texelFetch(depthTexture, p - ivec2(0, 1), 0).x;\r\n    float t1 = texelFetch(depthTexture, p + ivec2(0, 1), 0).x;\r\n    float t2 = texelFetch(depthTexture, p + ivec2(0, 2), 0).x;\r\n    float dl = abs((2.0 * l1 - l2) - c0);\r\n    float dr = abs((2.0 * r1 - r2) - c0);\r\n    float db = abs((2.0 * b1 - b2) - c0);\r\n    float dt = abs((2.0 * t1 - t2) - c0);\r\n    vec3 ce = getWorldPos(c0, vUv).xyz;\r\n    vec3 dpdx = (dl < dr) ? ce - getWorldPos(l1, (vUv - vec2(1.0 / size.x, 0.0))).xyz\r\n                          : -ce + getWorldPos(r1, (vUv + vec2(1.0 / size.x, 0.0))).xyz;\r\n    vec3 dpdy = (db < dt) ? ce - getWorldPos(b1, (vUv - vec2(0.0, 1.0 / size.y))).xyz\r\n                          : -ce + getWorldPos(t1, (vUv + vec2(0.0, 1.0 / size.y))).xyz;\r\n    return normalize(cross(dpdx, dpdy));\r\n}\r\n\r\nhighp float linearize_depth(highp float d, highp float zNear, highp float zFar) {\r\n    highp float z_n = 2.0 * d - 1.0;\r\n    return 2.0 * zNear * zFar / (zFar + zNear - z_n * (zFar - zNear));\r\n}\r\n\r\nvoid main() {\r\n    float depth = textureLod(depthTexture, vUv, 0.).x;\r\n\r\n    // filter out background\r\n    if (depth == 1.0) {\r\n        discard;\r\n        return;\r\n    }\r\n\r\n    vec3 worldPos = getWorldPos(depth, vUv);\r\n    vec3 normal = computeNormal(worldPos, vUv);\r\n\r\n#ifdef animatedNoise\r\n    int seed = frame;\r\n#else\r\n    int seed = 0;\r\n#endif\r\n\r\n    vec4 noise = sampleBlueNoise(blueNoiseTexture, seed, blueNoiseRepeat, texSize);\r\n\r\n    vec3 randomVec = normalize(noise.rgb * 2.0 - 1.0);\r\n    vec3 tangent = normalize(randomVec - normal * dot(randomVec, normal));\r\n    vec3 bitangent = cross(normal, tangent);\r\n    mat3 tbn = mat3(tangent, bitangent, normal);\r\n\r\n    float occluded = 0.0;\r\n    float totalWeight = 0.0;\r\n\r\n    vec3 samplePos;\r\n\r\n    float sppF = float(spp);\r\n\r\n    for (float i = 0.0; i < sppF; i++) {\r\n        vec3 sampleDirection = tbn * samples[int(i)];\r\n\r\n        // make sure sample direction is in the same hemisphere as the normal\r\n        if (dot(sampleDirection, normal) < 0.0) sampleDirection *= -1.0;\r\n\r\n        float moveAmt = samplesR[int(mod(i + noise.a * sppF, sppF))];\r\n        samplePos = worldPos + aoDistance * moveAmt * sampleDirection;\r\n\r\n        vec4 offset = projectionViewMatrix * vec4(samplePos, 1.0);\r\n        offset.xyz /= offset.w;\r\n        offset.xyz = offset.xyz * 0.5 + 0.5;\r\n\r\n        float sampleDepth = textureLod(depthTexture, offset.xy, 0.0).x;\r\n\r\n        float distSample = linearize_depth(sampleDepth, cameraNear, cameraFar);\r\n        float distWorld = linearize_depth(offset.z, cameraNear, cameraFar);\r\n\r\n        float rangeCheck = smoothstep(0.0, 1.0, aoDistance / abs(distSample - distWorld));\r\n        rangeCheck = pow(rangeCheck, distancePower);\r\n        float weight = dot(sampleDirection, normal);\r\n\r\n        occluded += rangeCheck * weight * (distSample < distWorld ? 1.0 : 0.0);\r\n        totalWeight += weight;\r\n    }\r\n\r\n    float occ = clamp(1.0 - occluded / totalWeight, 0.0, 1.0);\r\n    gl_FragColor = vec4(normal, occ);\r\n}\r\n`;\r\n//# sourceMappingURL=ssao.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.basic = void 0;\r\nexports.basic = `\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n    vUv = position.xy * 0.5 + 0.5;\r\n    gl_Position = vec4(position.xy, 1.0, 1.0);\r\n}\r\n`;\r\n//# sourceMappingURL=basic.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.sampleBlueNoise = void 0;\r\nexports.sampleBlueNoise = `\r\nconst float g = 1.6180339887498948482;\r\nconst float a1 = 1.0 / g;\r\n\r\n// reference: https://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/\r\nfloat r1(float n) {\r\n    // 7th harmonious number\r\n    return fract(1.1127756842787055 + a1 * n);\r\n}\r\n\r\nconst vec4 hn = vec4(0.618033988749895, 0.3247179572447458, 0.2207440846057596, 0.1673039782614187);\r\n\r\nvec4 sampleBlueNoise(sampler2D texture, int seed, vec2 repeat, vec2 texSize) {\r\n    vec2 size = vUv * texSize;\r\n    vec2 blueNoiseSize = texSize / repeat;\r\n    float blueNoiseIndex = floor(floor(size.y / blueNoiseSize.y) * repeat.x) + floor(size.x / blueNoiseSize.x);\r\n\r\n    // get the offset of this pixel's blue noise tile\r\n    // int blueNoiseTileOffset = int(r1(blueNoiseIndex + 1.0) * 65536.);\r\n\r\n    vec2 blueNoiseUv = vUv * repeat;\r\n\r\n    // fetch blue noise for this pixel\r\n    vec4 blueNoise = textureLod(texture, blueNoiseUv, 0.);\r\n\r\n    // animate blue noise\r\n    if (seed != 0) {\r\n        blueNoise = fract(blueNoise + hn * float(seed));\r\n\r\n        blueNoise.r = (blueNoise.r > 0.5 ? 1.0 - blueNoise.r : blueNoise.r) * 2.0;\r\n        blueNoise.g = (blueNoise.g > 0.5 ? 1.0 - blueNoise.g : blueNoise.g) * 2.0;\r\n        blueNoise.b = (blueNoise.b > 0.5 ? 1.0 - blueNoise.b : blueNoise.b) * 2.0;\r\n        blueNoise.a = (blueNoise.a > 0.5 ? 1.0 - blueNoise.a : blueNoise.a) * 2.0;\r\n    }\r\n\r\n    return blueNoise;\r\n}\r\n`;\r\n//# sourceMappingURL=sampleBlueNoise.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CopyMaterial = void 0;\r\nconst three_1 = require(\"three\");\r\nconst vertexShader = `\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvUv = position.xy * 0.5 + 0.5;\r\n\tgl_Position = vec4(position.xy, 1.0, 1.0);\r\n\r\n}\r\n`;\r\nconst fragmentShader = `\r\n#include <common>\r\n#include <dithering_pars_fragment>\r\n\r\n#ifdef FRAMEBUFFER_PRECISION_HIGH\r\n\r\n\tuniform mediump sampler2D inputBuffer;\r\n\r\n#else\r\n\r\n\tuniform lowp sampler2D inputBuffer;\r\n\r\n#endif\r\n\r\nuniform float opacity;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D(inputBuffer, vUv);\r\n\tgl_FragColor = opacity * texel;\r\n\r\n\t#include <colorspace_fragment>\r\n\t#include <dithering_fragment>\r\n\r\n}\r\n`;\r\n/**\r\n * A simple copy shader material.\r\n */\r\nclass CopyMaterial extends three_1.ShaderMaterial {\r\n    /**\r\n     * Constructs a new copy material.\r\n     */\r\n    constructor() {\r\n        super({\r\n            name: \"CopyMaterial\",\r\n            uniforms: {\r\n                inputBuffer: new three_1.Uniform(null),\r\n                opacity: new three_1.Uniform(1.0)\r\n            },\r\n            blending: three_1.CustomBlending,\r\n            blendEquation: three_1.AddEquation,\r\n            blendDst: three_1.ZeroFactor,\r\n            blendSrc: three_1.OneFactor,\r\n            toneMapped: false,\r\n            depthWrite: false,\r\n            depthTest: false,\r\n            transparent: true,\r\n            fragmentShader,\r\n            vertexShader\r\n        });\r\n    }\r\n    /**\r\n     * The input buffer.\r\n     *\r\n     * @type {Texture}\r\n     */\r\n    set inputBuffer(value) {\r\n        this.uniforms.inputBuffer.value = value;\r\n    }\r\n    /**\r\n     * Sets the input buffer.\r\n     *\r\n     * @deprecated Use inputBuffer instead.\r\n     * @param {Number} value - The buffer.\r\n     */\r\n    setInputBuffer(value) {\r\n        this.uniforms.inputBuffer.value = value;\r\n    }\r\n    /**\r\n     * Returns the opacity.\r\n     *\r\n     * @deprecated Use opacity instead.\r\n     * @return {Number} The opacity.\r\n     */\r\n    getOpacity(value) {\r\n        return this.uniforms.opacity.value;\r\n    }\r\n    /**\r\n     * Sets the opacity.\r\n     *\r\n     * @deprecated Use opacity instead.\r\n     * @param {Number} value - The opacity.\r\n     */\r\n    setOpacity(value) {\r\n        this.uniforms.opacity.value = value;\r\n    }\r\n}\r\nexports.CopyMaterial = CopyMaterial;\r\n//# sourceMappingURL=CopyMaterial.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CopyShader = void 0;\r\nexports.CopyShader = {\r\n    name: 'CopyShader',\r\n    uniforms: {\r\n        'tDiffuse': { value: null },\r\n        'opacity': { value: 1.0 }\r\n    },\r\n    vertexShader: /* glsl */ `\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvUv = uv;\r\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t}`,\r\n    fragmentShader: /* glsl */ `\r\n\r\n\t\tuniform float opacity;\r\n\r\n\t\tuniform sampler2D tDiffuse;\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tgl_FragColor = texture2D( tDiffuse, vUv );\r\n\t\t\tgl_FragColor.a *= opacity;\r\n\r\n\r\n\t\t}`\r\n};\r\n//# sourceMappingURL=CopyShader.js.map","\"use strict\";\r\n// Helper for passes that need to fill the viewport with a single quad.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FullScreenQuad = void 0;\r\nconst three_1 = require(\"three\");\r\nconst _camera = new three_1.OrthographicCamera(-1, 1, 1, -1, 0, 1);\r\n// https://github.com/mrdoob/three.js/pull/21358\r\nconst _geometry = new three_1.BufferGeometry();\r\n_geometry.setAttribute('position', new three_1.Float32BufferAttribute([-1, 3, 0, -1, -1, 0, 3, -1, 0], 3));\r\n_geometry.setAttribute('uv', new three_1.Float32BufferAttribute([0, 2, 0, 0, 2, 0], 2));\r\nclass FullScreenQuad {\r\n    constructor(material) {\r\n        this._mesh = new three_1.Mesh(_geometry, material);\r\n    }\r\n    dispose() {\r\n        this._mesh.geometry.dispose();\r\n    }\r\n    render(renderer) {\r\n        renderer.render(this._mesh, _camera);\r\n    }\r\n    get material() {\r\n        return this._mesh.material;\r\n    }\r\n    set material(value) {\r\n        this._mesh.material = value;\r\n    }\r\n}\r\nexports.FullScreenQuad = FullScreenQuad;\r\n//# sourceMappingURL=FullScreenQuad.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NormalPass = void 0;\r\nconst postprocessing_1 = require(\"postprocessing\");\r\nconst three_1 = require(\"three\");\r\nconst RenderPass_1 = require(\"./RenderPass\");\r\n/**\r\n * A pass that renders the normals of a given scene.\r\n */\r\nclass NormalPass extends postprocessing_1.Pass {\r\n    /**\r\n     * Constructs a new normal pass.\r\n     *\r\n     * @param {Scene} scene - The scene to render.\r\n     * @param {Camera} camera - The camera to use to render the scene.\r\n     * @param {Object} [options] - The options.\r\n     * @param {WebGLRenderTarget} [options.renderTarget] - A custom render target.\r\n     * @param {Number} [options.resolutionScale=1.0] - The resolution scale.\r\n     * @param {Number} [options.resolutionX=Resolution.AUTO_SIZE] - The horizontal resolution.\r\n     * @param {Number} [options.resolutionY=Resolution.AUTO_SIZE] - The vertical resolution.\r\n     * @param {Number} [options.width=Resolution.AUTO_SIZE] - Deprecated. Use resolutionX instead.\r\n     * @param {Number} [options.height=Resolution.AUTO_SIZE] - Deprecated. Use resolutionY instead.\r\n     */\r\n    constructor(scene, camera, { renderTarget, resolutionScale = 1.0, width = postprocessing_1.Resolution.AUTO_SIZE, height = postprocessing_1.Resolution.AUTO_SIZE, resolutionX = width, resolutionY = height } = {}) {\r\n        super(\"NormalPass\");\r\n        this.needsSwap = false;\r\n        /**\r\n         * A render pass.\r\n         *\r\n         * @type {RenderPass}\r\n         * @private\r\n         */\r\n        this.renderPass = new RenderPass_1.RenderPass(scene, camera, new three_1.MeshNormalMaterial());\r\n        const renderPass = this.renderPass;\r\n        renderPass.ignoreBackground = true;\r\n        renderPass.skipShadowMapUpdate = true;\r\n        const clearPass = renderPass.getClearPass();\r\n        clearPass.overrideClearColor = new three_1.Color(0x7777ff);\r\n        clearPass.overrideClearAlpha = 1.0;\r\n        /**\r\n         * A render target for the scene normals.\r\n         *\r\n         * @type {WebGLRenderTarget}\r\n         * @readonly\r\n         */\r\n        this.renderTarget = renderTarget;\r\n        if (this.renderTarget === undefined) {\r\n            this.renderTarget = new three_1.WebGLRenderTarget(1, 1, {\r\n                minFilter: three_1.NearestFilter,\r\n                magFilter: three_1.NearestFilter\r\n            });\r\n            this.renderTarget.texture.name = \"NormalPass.Target\";\r\n        }\r\n        this.dTexture = new three_1.DepthTexture(1, 1);\r\n        // Hack: Make sure the input buffer uses the depth texture.\r\n        this.renderTarget.depthTexture = this.dTexture;\r\n        this.renderTarget.dispose();\r\n        if (this.renderTarget.stencilBuffer) {\r\n            this.dTexture.format = three_1.DepthStencilFormat;\r\n            this.dTexture.type = three_1.UnsignedInt248Type;\r\n        }\r\n        else {\r\n            this.dTexture.type = three_1.UnsignedIntType;\r\n        }\r\n        /**\r\n         * The resolution.\r\n         *\r\n         * @type {Resolution}\r\n         * @readonly\r\n         */\r\n        const resolution = this.resolution = new postprocessing_1.Resolution(this, resolutionX, resolutionY, resolutionScale);\r\n        resolution.addEventListener(\"change\", (e) => this.setSize(resolution.baseWidth, resolution.baseHeight));\r\n    }\r\n    set mainScene(value) {\r\n        this.renderPass.mainScene = value;\r\n    }\r\n    set mainCamera(value) {\r\n        this.renderPass.mainCamera = value;\r\n    }\r\n    /**\r\n     * The normal texture.\r\n     *\r\n     * @type {Texture}\r\n     */\r\n    get texture() {\r\n        var _a;\r\n        return (_a = this.renderTarget) === null || _a === void 0 ? void 0 : _a.texture;\r\n    }\r\n    get depthTexture() {\r\n        var _a;\r\n        return (_a = this.renderTarget) === null || _a === void 0 ? void 0 : _a.depthTexture;\r\n    }\r\n    /**\r\n     * The normal texture.\r\n     *\r\n     * @deprecated Use texture instead.\r\n     * @return {Texture} The texture.\r\n     */\r\n    getTexture() {\r\n        var _a;\r\n        return (_a = this.renderTarget) === null || _a === void 0 ? void 0 : _a.texture;\r\n    }\r\n    /**\r\n     * Returns the resolution settings.\r\n     *\r\n     * @deprecated Use resolution instead.\r\n     * @return {Resolution} The resolution.\r\n     */\r\n    getResolution() {\r\n        return this.resolution;\r\n    }\r\n    /**\r\n     * Returns the current resolution scale.\r\n     *\r\n     * @return {Number} The resolution scale.\r\n     * @deprecated Use resolution.preferredWidth or resolution.preferredHeight instead.\r\n     */\r\n    getResolutionScale() {\r\n        return this.resolution.scale;\r\n    }\r\n    /**\r\n     * Sets the resolution scale.\r\n     *\r\n     * @param {Number} scale - The new resolution scale.\r\n     * @deprecated Use resolution.preferredWidth or resolution.preferredHeight instead.\r\n     */\r\n    setResolutionScale(scale) {\r\n        this.resolution.scale = scale;\r\n    }\r\n    /**\r\n     * Renders the scene normals.\r\n     *\r\n     * @param {WebGLRenderer} renderer - The renderer.\r\n     * @param {WebGLRenderTarget} inputBuffer - A frame buffer that contains the result of the previous pass.\r\n     * @param {WebGLRenderTarget} outputBuffer - A frame buffer that serves as the output render target unless this pass renders to screen.\r\n     * @param {Number} [deltaTime] - The time between the last frame and the current one in seconds.\r\n     * @param {Boolean} [stencilTest] - Indicates whether a stencil mask is active.\r\n     */\r\n    render(renderer) {\r\n        const renderTarget = this.renderToScreen ? null : this.renderTarget;\r\n        this.renderPass.render(renderer, renderTarget, renderTarget, 0, true);\r\n    }\r\n    /**\r\n     * Updates the size of this pass.\r\n     *\r\n     * @param {Number} width - The width.\r\n     * @param {Number} height - The height.\r\n     */\r\n    setSize(width, height) {\r\n        var _a;\r\n        const resolution = this.resolution;\r\n        resolution.setBaseSize(width, height);\r\n        (_a = this.renderTarget) === null || _a === void 0 ? void 0 : _a.setSize(resolution.width, resolution.height);\r\n    }\r\n}\r\nexports.NormalPass = NormalPass;\r\n//# sourceMappingURL=NormalPass.js.map","\"use strict\";\r\n/**\r\n * A pass that renders a given scene into the input buffer or to screen.\r\n *\r\n * This pass uses a {@link ClearPass} to clear the target buffer.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RenderPass = void 0;\r\nconst postprocessing_1 = require(\"postprocessing\");\r\nconst three_1 = require(\"three\");\r\nconst GemMaterial_1 = require(\"../../../materials/GemMaterial\");\r\nclass RenderPass extends postprocessing_1.Pass {\r\n    /**\r\n     * Constructs a new render pass.\r\n     *\r\n     * @param {Scene} scene - The scene to render.\r\n     * @param {Camera} camera - The camera to use to render the scene.\r\n     * @param {Material} [overrideMaterial=null] - An override material.\r\n     */\r\n    constructor(scene, camera, overrideMaterial = null) {\r\n        super(\"RenderPass\", scene, camera);\r\n        this.needsSwap = false;\r\n        /**\r\n         * A clear pass.\r\n         *\r\n         * @type {ClearPass}\r\n         * @readonly\r\n         */\r\n        this.clearPass = new postprocessing_1.ClearPass();\r\n        /**\r\n         * An override material manager.\r\n         *\r\n         * @type {OverrideMaterialManager}\r\n         * @private\r\n         */\r\n        this.overrideMaterialManager = (overrideMaterial === null) ? null : new postprocessing_1.OverrideMaterialManager(overrideMaterial);\r\n        /**\r\n         * Indicates whether the scene background should be ignored.\r\n         *\r\n         * @type {Boolean}\r\n         */\r\n        this.ignoreBackground = false;\r\n        /**\r\n         * Indicates whether the shadow map auto update should be skipped.\r\n         *\r\n         * @type {Boolean}\r\n         */\r\n        this.skipShadowMapUpdate = false;\r\n        /**\r\n         * A selection of objects to render.\r\n         *\r\n         * @type {Selection}\r\n         * @readonly\r\n         */\r\n        this.selection = null;\r\n    }\r\n    set mainScene(value) {\r\n        this.scene = value;\r\n    }\r\n    set mainCamera(value) {\r\n        this.camera = value;\r\n    }\r\n    get renderToScreen() {\r\n        return super.renderToScreen;\r\n    }\r\n    set renderToScreen(value) {\r\n        super.renderToScreen = value;\r\n        this.clearPass.renderToScreen = value;\r\n    }\r\n    /**\r\n     * The current override material.\r\n     *\r\n     * @type {Material}\r\n     */\r\n    get overrideMaterial() {\r\n        const manager = this.overrideMaterialManager;\r\n        return (manager !== null) ? manager.material : null;\r\n    }\r\n    set overrideMaterial(value) {\r\n        const manager = this.overrideMaterialManager;\r\n        if (value !== null) {\r\n            if (manager !== null) {\r\n                manager.setMaterial(value);\r\n            }\r\n            else {\r\n                this.overrideMaterialManager = new postprocessing_1.OverrideMaterialManager(value);\r\n            }\r\n        }\r\n        else if (manager !== null) {\r\n            manager.dispose();\r\n            this.overrideMaterialManager = null;\r\n        }\r\n    }\r\n    /**\r\n     * Returns the current override material.\r\n     *\r\n     * @deprecated Use overrideMaterial instead.\r\n     * @return {Material} The material.\r\n     */\r\n    getOverrideMaterial() {\r\n        return this.overrideMaterial;\r\n    }\r\n    /**\r\n     * Sets the override material.\r\n     *\r\n     * @deprecated Use overrideMaterial instead.\r\n     * @return {Material} value - The material.\r\n     */\r\n    setOverrideMaterial(value) {\r\n        this.overrideMaterial = value;\r\n    }\r\n    /**\r\n     * Indicates whether the target buffer should be cleared before rendering.\r\n     *\r\n     * @type {Boolean}\r\n     * @deprecated Use clearPass.enabled instead.\r\n     */\r\n    get clear() {\r\n        return this.clearPass.enabled;\r\n    }\r\n    set clear(value) {\r\n        this.clearPass.enabled = value;\r\n    }\r\n    /**\r\n     * Returns the selection. Default is `null` (no restriction).\r\n     *\r\n     * @deprecated Use selection instead.\r\n     * @return {Selection} The selection.\r\n     */\r\n    getSelection() {\r\n        return this.selection;\r\n    }\r\n    /**\r\n     * Sets the selection. Set to `null` to disable.\r\n     *\r\n     * @deprecated Use selection instead.\r\n     * @param {Selection} value - The selection.\r\n     */\r\n    setSelection(value) {\r\n        this.selection = value;\r\n    }\r\n    /**\r\n     * Indicates whether the scene background is disabled.\r\n     *\r\n     * @deprecated Use ignoreBackground instead.\r\n     * @return {Boolean} Whether the scene background is disabled.\r\n     */\r\n    isBackgroundDisabled() {\r\n        return this.ignoreBackground;\r\n    }\r\n    /**\r\n     * Enables or disables the scene background.\r\n     *\r\n     * @deprecated Use ignoreBackground instead.\r\n     * @param {Boolean} value - Whether the scene background should be disabled.\r\n     */\r\n    setBackgroundDisabled(value) {\r\n        this.ignoreBackground = value;\r\n    }\r\n    /**\r\n     * Indicates whether the shadow map auto update is disabled.\r\n     *\r\n     * @deprecated Use skipShadowMapUpdate instead.\r\n     * @return {Boolean} Whether the shadow map update is disabled.\r\n     */\r\n    isShadowMapDisabled() {\r\n        return this.skipShadowMapUpdate;\r\n    }\r\n    /**\r\n     * Enables or disables the shadow map auto update.\r\n     *\r\n     * @deprecated Use skipShadowMapUpdate instead.\r\n     * @param {Boolean} value - Whether the shadow map auto update should be disabled.\r\n     */\r\n    setShadowMapDisabled(value) {\r\n        this.skipShadowMapUpdate = value;\r\n    }\r\n    /**\r\n     * Returns the clear pass.\r\n     *\r\n     * @deprecated Use clearPass.enabled instead.\r\n     * @return {ClearPass} The clear pass.\r\n     */\r\n    getClearPass() {\r\n        return this.clearPass;\r\n    }\r\n    /**\r\n     * Renders the scene.\r\n     *\r\n     * @param {WebGLRenderer} renderer - The renderer.\r\n     * @param {WebGLRenderTarget} inputBuffer - A frame buffer that contains the result of the previous pass.\r\n     * @param {WebGLRenderTarget} outputBuffer - A frame buffer that serves as the output render target unless this pass renders to screen.\r\n     * @param {Number} [deltaTime] - The time between the last frame and the current one in seconds.\r\n     * @param {Boolean} [stencilTest] - Indicates whether a stencil mask is active.\r\n     */\r\n    render(renderer, inputBuffer, outputBuffer, deltaTime, stencilTest) {\r\n        const materialsNotRenderer = [];\r\n        this.scene.traverse(function (object) {\r\n            if (object.visible === true) {\r\n                if (object instanceof three_1.Mesh && object.material) {\r\n                    if (object.material instanceof three_1.MeshPhysicalMaterial && !(object.material instanceof GemMaterial_1.GemMaterial) && object.material.transparent) {\r\n                        materialsNotRenderer.push(object);\r\n                        object.visible = false;\r\n                    }\r\n                }\r\n                if (object instanceof three_1.Line || object instanceof three_1.LineLoop || object instanceof three_1.LineSegments || object instanceof three_1.Points) {\r\n                    materialsNotRenderer.push(object);\r\n                    object.visible = false;\r\n                }\r\n                if (object.userData.ambientOcclusion === false) {\r\n                    materialsNotRenderer.push(object);\r\n                    object.visible = false;\r\n                }\r\n            }\r\n        });\r\n        const scene = this.scene;\r\n        const camera = this.camera;\r\n        const selection = this.selection;\r\n        const mask = camera.layers.mask;\r\n        const background = scene.background;\r\n        const shadowMapAutoUpdate = renderer.shadowMap.autoUpdate;\r\n        const renderTarget = this.renderToScreen ? null : inputBuffer;\r\n        if (selection !== null) {\r\n            camera.layers.set(selection.getLayer());\r\n        }\r\n        if (this.skipShadowMapUpdate) {\r\n            renderer.shadowMap.autoUpdate = false;\r\n        }\r\n        if (this.ignoreBackground || this.clearPass.overrideClearColor !== null) {\r\n            scene.background = null;\r\n        }\r\n        if (this.clearPass.enabled) {\r\n            this.clearPass.render(renderer, inputBuffer, inputBuffer);\r\n        }\r\n        renderer.setRenderTarget(renderTarget);\r\n        if (this.overrideMaterialManager !== null) {\r\n            this.overrideMaterialManager.render(renderer, scene, camera);\r\n        }\r\n        else {\r\n            renderer.render(scene, camera);\r\n        }\r\n        // Restore original values.\r\n        camera.layers.mask = mask;\r\n        scene.background = background;\r\n        renderer.shadowMap.autoUpdate = shadowMapAutoUpdate;\r\n        for (let i = 0; i < materialsNotRenderer.length; i++)\r\n            materialsNotRenderer[i].visible = true;\r\n    }\r\n}\r\nexports.RenderPass = RenderPass;\r\n//# sourceMappingURL=RenderPass.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GemMaterial = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nconst three_1 = require(\"three\");\r\nconst gem_1 = require(\"../shaders/gem\");\r\nclass GemMaterial extends three_1.MeshPhysicalMaterial {\r\n    // #endregion Properties (1)\r\n    // #region Constructors (1)\r\n    constructor(params) {\r\n        super();\r\n        this.refractionIndex = 2.4;\r\n        this.impurityMap = null;\r\n        this.impurityScale = 1.0;\r\n        this.colorTransferBegin = new THREE.Color(0xffffff);\r\n        this.colorTransferEnd = new THREE.Color(0xffffff);\r\n        this.center = new THREE.Vector3(0, 0, 0);\r\n        this.tracingDepth = 5;\r\n        this.radius = 1.0;\r\n        this.sphericalNormalMap = null;\r\n        this.gamma = 1.0;\r\n        this.contrast = 1.0;\r\n        this.brightness = 0.0;\r\n        this.dispersion = 0.0;\r\n        this.tracingOpacity = 0.0;\r\n        this.isGemMaterial = true;\r\n        const uniforms = {\r\n            refractionIndex: { value: 2.4 },\r\n            impurityMap: { value: null },\r\n            impurityScale: { value: 1.0 },\r\n            colorTransferBegin: { value: new THREE.Color(0xffffff) },\r\n            colorTransferEnd: { value: new THREE.Color(0xffffff) },\r\n            center: { value: new THREE.Vector3(0, 0, 0) },\r\n            tracingDepth: { value: 5 },\r\n            radius: { value: 1.0 },\r\n            sphericalNormalMap: { value: null },\r\n            gamma: { value: 1.0 },\r\n            contrast: { value: 1.0 },\r\n            brightness: { value: 0.0 },\r\n            dispersion: { value: 0.0 },\r\n            tracingOpacity: { value: 0.0 }\r\n        };\r\n        this._extraUniforms = uniforms;\r\n        this.onBeforeCompile = function (shader) {\r\n            for (const uniformName in uniforms) {\r\n                shader.uniforms[uniformName] = uniforms[uniformName];\r\n            }\r\n            shader.vertexShader = gem_1.vert;\r\n            shader.fragmentShader = gem_1.frag;\r\n        };\r\n        Object.defineProperties(this, {\r\n            tracingDepth: {\r\n                get: function () {\r\n                    return uniforms.tracingDepth.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.tracingDepth.value = v;\r\n                    if (v) {\r\n                        this.defines.TRACING_DEPTH = Math.floor(v);\r\n                    }\r\n                    else {\r\n                        delete this.defines.TRACING_DEPTH;\r\n                    }\r\n                }\r\n            },\r\n            refractionIndex: {\r\n                get: function () {\r\n                    return uniforms.refractionIndex.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.refractionIndex.value = v;\r\n                }\r\n            },\r\n            impurityMap: {\r\n                get: function () {\r\n                    return uniforms.impurityMap.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.impurityMap.value = v;\r\n                    if (v) {\r\n                        this.defines.USE_IMPURITYMAP = '';\r\n                        this.defines.USE_UV = '';\r\n                    }\r\n                    else {\r\n                        delete this.defines.USE_IMPURITYMAP;\r\n                        delete this.defines.USE_UV;\r\n                    }\r\n                }\r\n            },\r\n            impurityScale: {\r\n                get: function () {\r\n                    return uniforms.impurityScale.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.impurityScale.value = v;\r\n                }\r\n            },\r\n            colorTransferBegin: {\r\n                get: function () {\r\n                    return uniforms.colorTransferBegin.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.colorTransferBegin.value = v;\r\n                }\r\n            },\r\n            colorTransferEnd: {\r\n                get: function () {\r\n                    return uniforms.colorTransferEnd.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.colorTransferEnd.value = v;\r\n                }\r\n            },\r\n            center: {\r\n                get: function () {\r\n                    return uniforms.center.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.center.value = v;\r\n                }\r\n            },\r\n            radius: {\r\n                get: function () {\r\n                    return uniforms.radius.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.radius.value = v;\r\n                }\r\n            },\r\n            sphericalNormalMap: {\r\n                get: function () {\r\n                    return uniforms.sphericalNormalMap.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.sphericalNormalMap.value = v;\r\n                    if (v) {\r\n                        this.defines.USE_UV = '';\r\n                    }\r\n                    else {\r\n                        delete this.defines.USE_UV;\r\n                    }\r\n                }\r\n            },\r\n            gamma: {\r\n                get: function () {\r\n                    return uniforms.gamma.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.gamma.value = v;\r\n                }\r\n            },\r\n            contrast: {\r\n                get: function () {\r\n                    return uniforms.contrast.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.contrast.value = v;\r\n                }\r\n            },\r\n            brightness: {\r\n                get: function () {\r\n                    return uniforms.brightness.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.brightness.value = v;\r\n                }\r\n            },\r\n            dispersion: {\r\n                get: function () {\r\n                    return uniforms.dispersion.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.dispersion.value = v;\r\n                    if (v !== 0) {\r\n                        this.defines.DISPERSION = '';\r\n                    }\r\n                    else {\r\n                        delete this.defines.DISPERSION;\r\n                    }\r\n                }\r\n            },\r\n            tracingOpacity: {\r\n                get: function () {\r\n                    return uniforms.tracingOpacity.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.tracingOpacity.value = v;\r\n                }\r\n            }\r\n        });\r\n        this.refractionIndex = params.refractionIndex || 2.4;\r\n        this.impurityMap = params.impurityMap || null;\r\n        this.impurityScale = params.impurityScale || 1;\r\n        this.colorTransferBegin.copy(params.colorTransferBegin || new THREE.Color(0xffffff));\r\n        this.colorTransferEnd.copy(params.colorTransferEnd || new THREE.Color(0xffffff));\r\n        this.center.copy(params.center || new THREE.Vector3(0, 0, 0));\r\n        this.tracingDepth = params.tracingDepth || 5;\r\n        this.radius = params.radius || 1;\r\n        this.sphericalNormalMap = params.sphericalNormalMap || null;\r\n        this.gamma = params.gamma || 1;\r\n        this.contrast = params.contrast || 1;\r\n        this.brightness = params.brightness || 0;\r\n        this.dispersion = params.dispersion || 0;\r\n        this.tracingOpacity = params.tracingOpacity || 0;\r\n        this.setValues(params);\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (1)\r\n    copy(s) {\r\n        super.copy(s);\r\n        const source = s;\r\n        this.refractionIndex = source.refractionIndex;\r\n        this.impurityMap = source.impurityMap;\r\n        this.impurityScale = source.impurityScale;\r\n        this.colorTransferBegin.copy(source.colorTransferBegin);\r\n        this.colorTransferEnd.copy(source.colorTransferEnd);\r\n        this.center.copy(source.center);\r\n        this.tracingDepth = source.tracingDepth;\r\n        this.radius = source.radius;\r\n        this.sphericalNormalMap = source.sphericalNormalMap;\r\n        this.gamma = source.gamma;\r\n        this.contrast = source.contrast;\r\n        this.brightness = source.brightness;\r\n        this.dispersion = source.dispersion;\r\n        this.tracingOpacity = source.tracingOpacity;\r\n        return this;\r\n    }\r\n}\r\nexports.GemMaterial = GemMaterial;\r\n//# sourceMappingURL=GemMaterial.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MultiPointsMaterial = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nconst multi_points_1 = require(\"../shaders/multi_points\");\r\n// #endregion Interfaces (1)\r\n// #region Classes (1)\r\nclass MultiPointsMaterial extends THREE.PointsMaterial {\r\n    // #endregion Properties (22)\r\n    // #region Constructors (1)\r\n    constructor(params) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17;\r\n        super();\r\n        // #region Properties (22)\r\n        this.alphaMap_0 = null;\r\n        this.alphaMap_1 = null;\r\n        this.alphaMap_2 = null;\r\n        this.alphaMap_3 = null;\r\n        this.alphaMap_4 = null;\r\n        this.alphaMap_5 = null;\r\n        this.alphaMap_6 = null;\r\n        this.alphaMap_7 = null;\r\n        this.color_0 = new THREE.Color(0xffffff);\r\n        this.color_1 = new THREE.Color(0xffffff);\r\n        this.color_2 = new THREE.Color(0xffffff);\r\n        this.color_3 = new THREE.Color(0xffffff);\r\n        this.color_4 = new THREE.Color(0xffffff);\r\n        this.color_5 = new THREE.Color(0xffffff);\r\n        this.color_6 = new THREE.Color(0xffffff);\r\n        this.color_7 = new THREE.Color(0xffffff);\r\n        this.map_0 = null;\r\n        this.map_1 = null;\r\n        this.map_2 = null;\r\n        this.map_3 = null;\r\n        this.map_4 = null;\r\n        this.map_5 = null;\r\n        this.map_6 = null;\r\n        this.map_7 = null;\r\n        this.materialIndexDataTexture = null;\r\n        this.materialIndexDataTextureSize = 1024;\r\n        this.sizeAttenuation_0 = false;\r\n        this.sizeAttenuation_1 = false;\r\n        this.sizeAttenuation_2 = false;\r\n        this.sizeAttenuation_3 = false;\r\n        this.sizeAttenuation_4 = false;\r\n        this.sizeAttenuation_5 = false;\r\n        this.sizeAttenuation_6 = false;\r\n        this.sizeAttenuation_7 = false;\r\n        this.size_0 = 1.0;\r\n        this.size_1 = 1.0;\r\n        this.size_2 = 1.0;\r\n        this.size_3 = 1.0;\r\n        this.size_4 = 1.0;\r\n        this.size_5 = 1.0;\r\n        this.size_6 = 1.0;\r\n        this.size_7 = 1.0;\r\n        this.isMultiPointsMaterial = true;\r\n        const uniforms = {\r\n            materialIndexDataTexture: { value: null },\r\n            materialIndexDataTextureSize: { value: 1024 },\r\n            map_0: { value: null },\r\n            color_0: { value: new THREE.Color(0xff0000) },\r\n            alphaMap_0: { value: null },\r\n            size_0: { value: 1.0 },\r\n            sizeAttenuation_0: { value: false },\r\n            map_1: { value: null },\r\n            color_1: { value: new THREE.Color(0x00ff00) },\r\n            alphaMap_1: { value: null },\r\n            size_1: { value: 1.0 },\r\n            sizeAttenuation_1: { value: false },\r\n            map_2: { value: null },\r\n            color_2: { value: new THREE.Color(0x0000ff) },\r\n            alphaMap_2: { value: null },\r\n            size_2: { value: 1.0 },\r\n            sizeAttenuation_2: { value: false },\r\n            map_3: { value: null },\r\n            color_3: { value: new THREE.Color(0x0000ff) },\r\n            alphaMap_3: { value: null },\r\n            size_3: { value: 1.0 },\r\n            sizeAttenuation_3: { value: false },\r\n            map_4: { value: null },\r\n            color_4: { value: new THREE.Color(0x0000ff) },\r\n            alphaMap_4: { value: null },\r\n            size_4: { value: 1.0 },\r\n            sizeAttenuation_4: { value: false },\r\n            map_5: { value: null },\r\n            color_5: { value: new THREE.Color(0x0000ff) },\r\n            alphaMap_5: { value: null },\r\n            size_5: { value: 1.0 },\r\n            sizeAttenuation_5: { value: false },\r\n            map_6: { value: null },\r\n            color_6: { value: new THREE.Color(0x0000ff) },\r\n            alphaMap_6: { value: null },\r\n            size_6: { value: 1.0 },\r\n            sizeAttenuation_6: { value: false },\r\n            map_7: { value: null },\r\n            color_7: { value: new THREE.Color(0x0000ff) },\r\n            alphaMap_7: { value: null },\r\n            size_7: { value: 1.0 },\r\n            sizeAttenuation_7: { value: false }\r\n        };\r\n        this._extraUniforms = uniforms;\r\n        this.onBeforeCompile = function (shader) {\r\n            for (const uniformName in uniforms) {\r\n                shader.uniforms[uniformName] = uniforms[uniformName];\r\n            }\r\n            shader.vertexShader = multi_points_1.vert;\r\n            shader.fragmentShader = multi_points_1.frag;\r\n        };\r\n        Object.defineProperties(this, {\r\n            materialIndexDataTexture: {\r\n                get: function () {\r\n                    return uniforms.materialIndexDataTexture.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.materialIndexDataTexture.value = v;\r\n                }\r\n            },\r\n            materialIndexDataTextureSize: {\r\n                get: function () {\r\n                    return uniforms.materialIndexDataTextureSize.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.materialIndexDataTextureSize.value = v;\r\n                }\r\n            },\r\n            map_0: {\r\n                get: function () {\r\n                    return uniforms.map_0.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.map_0.value = v;\r\n                }\r\n            },\r\n            color_0: {\r\n                get: function () {\r\n                    return uniforms.color_0.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.color_0.value = v;\r\n                }\r\n            },\r\n            alphaMap_0: {\r\n                get: function () {\r\n                    return uniforms.alphaMap_0.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.alphaMap_0.value = v;\r\n                }\r\n            },\r\n            size_0: {\r\n                get: function () {\r\n                    return uniforms.size_0.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.size_0.value = v;\r\n                }\r\n            },\r\n            sizeAttenuation_0: {\r\n                get: function () {\r\n                    return uniforms.sizeAttenuation_0.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.sizeAttenuation_0.value = v;\r\n                }\r\n            },\r\n            map_1: {\r\n                get: function () {\r\n                    return uniforms.map_1.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.map_1.value = v;\r\n                }\r\n            },\r\n            color_1: {\r\n                get: function () {\r\n                    return uniforms.color_1.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.color_1.value = v;\r\n                }\r\n            },\r\n            alphaMap_1: {\r\n                get: function () {\r\n                    return uniforms.alphaMap_1.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.alphaMap_1.value = v;\r\n                }\r\n            },\r\n            size_1: {\r\n                get: function () {\r\n                    return uniforms.size_1.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.size_1.value = v;\r\n                }\r\n            },\r\n            sizeAttenuation_1: {\r\n                get: function () {\r\n                    return uniforms.sizeAttenuation_1.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.sizeAttenuation_1.value = v;\r\n                }\r\n            },\r\n            map_2: {\r\n                get: function () {\r\n                    return uniforms.map_2.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.map_2.value = v;\r\n                }\r\n            },\r\n            color_2: {\r\n                get: function () {\r\n                    return uniforms.color_2.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.color_2.value = v;\r\n                }\r\n            },\r\n            alphaMap_2: {\r\n                get: function () {\r\n                    return uniforms.alphaMap_2.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.alphaMap_2.value = v;\r\n                }\r\n            },\r\n            size_2: {\r\n                get: function () {\r\n                    return uniforms.size_2.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.size_2.value = v;\r\n                }\r\n            },\r\n            sizeAttenuation_2: {\r\n                get: function () {\r\n                    return uniforms.sizeAttenuation_2.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.sizeAttenuation_2.value = v;\r\n                }\r\n            },\r\n            map_3: {\r\n                get: function () {\r\n                    return uniforms.map_3.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.map_3.value = v;\r\n                }\r\n            },\r\n            color_3: {\r\n                get: function () {\r\n                    return uniforms.color_3.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.color_3.value = v;\r\n                }\r\n            },\r\n            alphaMap_3: {\r\n                get: function () {\r\n                    return uniforms.alphaMap_3.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.alphaMap_3.value = v;\r\n                }\r\n            },\r\n            size_3: {\r\n                get: function () {\r\n                    return uniforms.size_3.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.size_3.value = v;\r\n                }\r\n            },\r\n            sizeAttenuation_3: {\r\n                get: function () {\r\n                    return uniforms.sizeAttenuation_3.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.sizeAttenuation_3.value = v;\r\n                }\r\n            },\r\n            map_4: {\r\n                get: function () {\r\n                    return uniforms.map_4.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.map_4.value = v;\r\n                }\r\n            },\r\n            color_4: {\r\n                get: function () {\r\n                    return uniforms.color_4.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.color_4.value = v;\r\n                }\r\n            },\r\n            alphaMap_4: {\r\n                get: function () {\r\n                    return uniforms.alphaMap_4.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.alphaMap_4.value = v;\r\n                }\r\n            },\r\n            size_4: {\r\n                get: function () {\r\n                    return uniforms.size_4.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.size_4.value = v;\r\n                }\r\n            },\r\n            sizeAttenuation_4: {\r\n                get: function () {\r\n                    return uniforms.sizeAttenuation_4.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.sizeAttenuation_4.value = v;\r\n                }\r\n            },\r\n            map_5: {\r\n                get: function () {\r\n                    return uniforms.map_5.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.map_5.value = v;\r\n                }\r\n            },\r\n            color_5: {\r\n                get: function () {\r\n                    return uniforms.color_5.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.color_5.value = v;\r\n                }\r\n            },\r\n            alphaMap_5: {\r\n                get: function () {\r\n                    return uniforms.alphaMap_5.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.alphaMap_5.value = v;\r\n                }\r\n            },\r\n            size_5: {\r\n                get: function () {\r\n                    return uniforms.size_5.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.size_5.value = v;\r\n                }\r\n            },\r\n            sizeAttenuation_5: {\r\n                get: function () {\r\n                    return uniforms.sizeAttenuation_5.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.sizeAttenuation_5.value = v;\r\n                }\r\n            },\r\n            map_6: {\r\n                get: function () {\r\n                    return uniforms.map_6.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.map_6.value = v;\r\n                }\r\n            },\r\n            color_6: {\r\n                get: function () {\r\n                    return uniforms.color_6.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.color_6.value = v;\r\n                }\r\n            },\r\n            alphaMap_6: {\r\n                get: function () {\r\n                    return uniforms.alphaMap_6.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.alphaMap_6.value = v;\r\n                }\r\n            },\r\n            size_6: {\r\n                get: function () {\r\n                    return uniforms.size_6.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.size_6.value = v;\r\n                }\r\n            },\r\n            sizeAttenuation_6: {\r\n                get: function () {\r\n                    return uniforms.sizeAttenuation_6.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.sizeAttenuation_6.value = v;\r\n                }\r\n            },\r\n            map_7: {\r\n                get: function () {\r\n                    return uniforms.map_7.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.map_7.value = v;\r\n                }\r\n            },\r\n            color_7: {\r\n                get: function () {\r\n                    return uniforms.color_7.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.color_7.value = v;\r\n                }\r\n            },\r\n            alphaMap_7: {\r\n                get: function () {\r\n                    return uniforms.alphaMap_7.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.alphaMap_7.value = v;\r\n                }\r\n            },\r\n            size_7: {\r\n                get: function () {\r\n                    return uniforms.size_7.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.size_7.value = v;\r\n                }\r\n            },\r\n            sizeAttenuation_7: {\r\n                get: function () {\r\n                    return uniforms.sizeAttenuation_7.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.sizeAttenuation_7.value = v;\r\n                }\r\n            }\r\n        });\r\n        this.materialIndexDataTexture = (_a = params.materialIndexDataTexture) !== null && _a !== void 0 ? _a : null;\r\n        this.materialIndexDataTextureSize = (_b = params.materialIndexDataTextureSize) !== null && _b !== void 0 ? _b : 1024;\r\n        this.map_0 = (_c = params.map_0) !== null && _c !== void 0 ? _c : null;\r\n        this.color_0 = new THREE.Color((_d = params.color_0) !== null && _d !== void 0 ? _d : 0xffffff);\r\n        this.alphaMap_0 = (_e = params.alphaMap_0) !== null && _e !== void 0 ? _e : null;\r\n        this.size_0 = (_f = params.size_0) !== null && _f !== void 0 ? _f : 1.0;\r\n        this.sizeAttenuation_0 = (_g = params.sizeAttenuation_0) !== null && _g !== void 0 ? _g : false;\r\n        this.map_1 = (_h = params.map_1) !== null && _h !== void 0 ? _h : null;\r\n        this.color_1 = new THREE.Color((_j = params.color_1) !== null && _j !== void 0 ? _j : 0xffffff);\r\n        this.alphaMap_1 = (_k = params.alphaMap_1) !== null && _k !== void 0 ? _k : null;\r\n        this.size_1 = (_l = params.size_1) !== null && _l !== void 0 ? _l : 1.0;\r\n        this.sizeAttenuation_1 = (_m = params.sizeAttenuation_1) !== null && _m !== void 0 ? _m : false;\r\n        this.map_2 = (_o = params.map_2) !== null && _o !== void 0 ? _o : null;\r\n        this.color_2 = new THREE.Color((_p = params.color_2) !== null && _p !== void 0 ? _p : 0xffffff);\r\n        this.alphaMap_2 = (_q = params.alphaMap_2) !== null && _q !== void 0 ? _q : null;\r\n        this.size_2 = (_r = params.size_2) !== null && _r !== void 0 ? _r : 1.0;\r\n        this.sizeAttenuation_2 = (_s = params.sizeAttenuation_2) !== null && _s !== void 0 ? _s : false;\r\n        this.map_3 = (_t = params.map_3) !== null && _t !== void 0 ? _t : null;\r\n        this.color_3 = new THREE.Color((_u = params.color_3) !== null && _u !== void 0 ? _u : 0xffffff);\r\n        this.alphaMap_3 = (_v = params.alphaMap_3) !== null && _v !== void 0 ? _v : null;\r\n        this.size_3 = (_w = params.size_3) !== null && _w !== void 0 ? _w : 1.0;\r\n        this.sizeAttenuation_3 = (_x = params.sizeAttenuation_3) !== null && _x !== void 0 ? _x : false;\r\n        this.map_4 = (_y = params.map_4) !== null && _y !== void 0 ? _y : null;\r\n        this.color_4 = new THREE.Color((_z = params.color_4) !== null && _z !== void 0 ? _z : 0xffffff);\r\n        this.alphaMap_4 = (_0 = params.alphaMap_4) !== null && _0 !== void 0 ? _0 : null;\r\n        this.size_4 = (_1 = params.size_4) !== null && _1 !== void 0 ? _1 : 1.0;\r\n        this.sizeAttenuation_4 = (_2 = params.sizeAttenuation_4) !== null && _2 !== void 0 ? _2 : false;\r\n        this.map_5 = (_3 = params.map_5) !== null && _3 !== void 0 ? _3 : null;\r\n        this.color_5 = new THREE.Color((_4 = params.color_5) !== null && _4 !== void 0 ? _4 : 0xffffff);\r\n        this.alphaMap_5 = (_5 = params.alphaMap_5) !== null && _5 !== void 0 ? _5 : null;\r\n        this.size_5 = (_6 = params.size_5) !== null && _6 !== void 0 ? _6 : 1.0;\r\n        this.sizeAttenuation_5 = (_7 = params.sizeAttenuation_5) !== null && _7 !== void 0 ? _7 : false;\r\n        this.map_6 = (_8 = params.map_6) !== null && _8 !== void 0 ? _8 : null;\r\n        this.color_6 = new THREE.Color((_9 = params.color_6) !== null && _9 !== void 0 ? _9 : 0xffffff);\r\n        this.alphaMap_6 = (_10 = params.alphaMap_6) !== null && _10 !== void 0 ? _10 : null;\r\n        this.size_6 = (_11 = params.size_6) !== null && _11 !== void 0 ? _11 : 1.0;\r\n        this.sizeAttenuation_6 = (_12 = params.sizeAttenuation_6) !== null && _12 !== void 0 ? _12 : false;\r\n        this.map_7 = (_13 = params.map_7) !== null && _13 !== void 0 ? _13 : null;\r\n        this.color_7 = new THREE.Color((_14 = params.color_7) !== null && _14 !== void 0 ? _14 : 0xffffff);\r\n        this.alphaMap_7 = (_15 = params.alphaMap_7) !== null && _15 !== void 0 ? _15 : null;\r\n        this.size_7 = (_16 = params.size_7) !== null && _16 !== void 0 ? _16 : 1.0;\r\n        this.sizeAttenuation_7 = (_17 = params.sizeAttenuation_7) !== null && _17 !== void 0 ? _17 : false;\r\n        this.setValues(params);\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (1)\r\n    copy(s) {\r\n        super.copy(s);\r\n        const source = s;\r\n        this.materialIndexDataTexture = source.materialIndexDataTexture;\r\n        this.materialIndexDataTextureSize = source.materialIndexDataTextureSize;\r\n        this.map_0 = source.map_0;\r\n        this.color_0.copy(source.color_0);\r\n        this.alphaMap_0 = source.alphaMap_0;\r\n        this.size_0 = source.size_0;\r\n        this.sizeAttenuation_0 = source.sizeAttenuation_0;\r\n        this.map_1 = source.map_1;\r\n        this.color_1.copy(source.color_1);\r\n        this.alphaMap_1 = source.alphaMap_1;\r\n        this.size_1 = source.size_1;\r\n        this.sizeAttenuation_1 = source.sizeAttenuation_1;\r\n        this.map_2 = source.map_2;\r\n        this.color_2.copy(source.color_2);\r\n        this.alphaMap_2 = source.alphaMap_2;\r\n        this.size_2 = source.size_2;\r\n        this.sizeAttenuation_2 = source.sizeAttenuation_2;\r\n        this.map_3 = source.map_3;\r\n        this.color_3.copy(source.color_3);\r\n        this.alphaMap_3 = source.alphaMap_3;\r\n        this.size_3 = source.size_3;\r\n        this.sizeAttenuation_3 = source.sizeAttenuation_3;\r\n        this.map_4 = source.map_4;\r\n        this.color_4.copy(source.color_4);\r\n        this.alphaMap_4 = source.alphaMap_4;\r\n        this.size_4 = source.size_4;\r\n        this.sizeAttenuation_4 = source.sizeAttenuation_4;\r\n        this.map_5 = source.map_5;\r\n        this.color_5.copy(source.color_5);\r\n        this.alphaMap_5 = source.alphaMap_5;\r\n        this.size_5 = source.size_5;\r\n        this.sizeAttenuation_5 = source.sizeAttenuation_5;\r\n        this.map_6 = source.map_6;\r\n        this.color_6.copy(source.color_6);\r\n        this.alphaMap_6 = source.alphaMap_6;\r\n        this.size_6 = source.size_6;\r\n        this.sizeAttenuation_6 = source.sizeAttenuation_6;\r\n        this.map_7 = source.map_7;\r\n        this.color_7.copy(source.color_7);\r\n        this.alphaMap_7 = source.alphaMap_7;\r\n        this.size_7 = source.size_7;\r\n        this.sizeAttenuation_7 = source.sizeAttenuation_7;\r\n        return this;\r\n    }\r\n}\r\nexports.MultiPointsMaterial = MultiPointsMaterial;\r\n// #endregion Classes (1)\r\n//# sourceMappingURL=MultiPointsMaterial.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SpecularGlossinessMaterial = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nconst three_1 = require(\"three\");\r\nclass SpecularGlossinessMaterial extends three_1.MeshStandardMaterial {\r\n    // #endregion Properties (1)\r\n    // #region Constructors (1)\r\n    constructor(params) {\r\n        super();\r\n        this.isGLTFSpecularGlossinessMaterial = true;\r\n        //various chunks that need replacing\r\n        const specularMap2ParsFragmentChunk = [\r\n            '#ifdef USE_SPECULARMAP2',\r\n            '\tuniform sampler2D specularMap2;',\r\n            '#endif'\r\n        ].join('\\n');\r\n        const glossinessMapParsFragmentChunk = [\r\n            '#ifdef USE_GLOSSINESSMAP',\r\n            '\tuniform sampler2D glossinessMap;',\r\n            '#endif'\r\n        ].join('\\n');\r\n        const specularMap2FragmentChunk = [\r\n            'vec3 specularFactor = specular;',\r\n            '#ifdef USE_SPECULARMAP2',\r\n            '\tvec4 texelSpecular = texture2D( specularMap2, vUv );',\r\n            '\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',\r\n            '\tspecularFactor *= texelSpecular.rgb;',\r\n            '#endif'\r\n        ].join('\\n');\r\n        const glossinessMapFragmentChunk = [\r\n            'float glossinessFactor = glossiness;',\r\n            '#ifdef USE_GLOSSINESSMAP',\r\n            '\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );',\r\n            '\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',\r\n            '\tglossinessFactor *= texelGlossiness.a;',\r\n            '#endif'\r\n        ].join('\\n');\r\n        const lightPhysicalFragmentChunk = [\r\n            'PhysicalMaterial material;',\r\n            'material.diffuseColor = diffuseColor.rgb * ( 1. - max( specularFactor.r, max( specularFactor.g, specularFactor.b ) ) );',\r\n            'vec3 dxy = max( abs( dFdx( nonPerturbedNormal  ) ), abs( dFdy( nonPerturbedNormal ) ) );',\r\n            'float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );',\r\n            'material.roughness = max( 1.0 - glossinessFactor, 0.0525 ); // 0.0525 corresponds to the base mip of a 256 cubemap.',\r\n            'material.roughness += geometryRoughness;',\r\n            'material.roughness = min( material.roughness, 1.0 );',\r\n            'material.specularColor = specularFactor;',\r\n        ].join('\\n');\r\n        const uniforms = {\r\n            specular: { value: new THREE.Color().setHex(0xffffff) },\r\n            glossiness: { value: 1 },\r\n            specularMap2: { value: null },\r\n            glossinessMap: { value: null }\r\n        };\r\n        this._extraUniforms = uniforms;\r\n        this.onBeforeCompile = function (shader) {\r\n            for (const uniformName in uniforms) {\r\n                shader.uniforms[uniformName] = uniforms[uniformName];\r\n            }\r\n            shader.fragmentShader = shader.fragmentShader\r\n                .replace('uniform float roughness;', 'uniform vec3 specular;')\r\n                .replace('uniform float metalness;', 'uniform float glossiness;')\r\n                .replace('#include <roughnessmap_pars_fragment>', specularMap2ParsFragmentChunk)\r\n                .replace('#include <metalnessmap_pars_fragment>', glossinessMapParsFragmentChunk)\r\n                .replace('#include <roughnessmap_fragment>', specularMap2FragmentChunk)\r\n                .replace('#include <metalnessmap_fragment>', glossinessMapFragmentChunk)\r\n                .replace('#include <lights_physical_fragment>', lightPhysicalFragmentChunk);\r\n        };\r\n        Object.defineProperties(this, {\r\n            specular: {\r\n                get: function () {\r\n                    return uniforms.specular.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.specular.value = v;\r\n                }\r\n            },\r\n            specularMap2: {\r\n                get: function () {\r\n                    return uniforms.specularMap2.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.specularMap2.value = v;\r\n                    if (v) {\r\n                        this.defines.USE_SPECULARMAP2 = ''; // USE_UV is set by the renderer for specular maps\r\n                    }\r\n                    else {\r\n                        delete this.defines.USE_SPECULARMAP2;\r\n                    }\r\n                }\r\n            },\r\n            glossiness: {\r\n                get: function () {\r\n                    return uniforms.glossiness.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.glossiness.value = v;\r\n                }\r\n            },\r\n            glossinessMap: {\r\n                get: function () {\r\n                    return uniforms.glossinessMap.value;\r\n                },\r\n                set: function (v) {\r\n                    uniforms.glossinessMap.value = v;\r\n                    if (v) {\r\n                        this.defines.USE_GLOSSINESSMAP = '';\r\n                        this.defines.USE_UV = '';\r\n                    }\r\n                    else {\r\n                        delete this.defines.USE_GLOSSINESSMAP;\r\n                        delete this.defines.USE_UV;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        delete this.metalness;\r\n        delete this.roughness;\r\n        delete this.metalnessMap;\r\n        delete this.roughnessMap;\r\n        this.setValues(params);\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Methods (1)\r\n    copy(source) {\r\n        super.copy(source);\r\n        this.specularMap2 = source.specularMap2;\r\n        this.specular.copy(source.specular);\r\n        this.glossinessMap = source.glossinessMap;\r\n        this.glossiness = source.glossiness;\r\n        delete this.metalness;\r\n        delete this.roughness;\r\n        delete this.metalnessMap;\r\n        delete this.roughnessMap;\r\n        return this;\r\n    }\r\n}\r\nexports.SpecularGlossinessMaterial = SpecularGlossinessMaterial;\r\n//# sourceMappingURL=SpecularGlossinessMaterial.js.map"],"names":[],"sourceRoot":""}