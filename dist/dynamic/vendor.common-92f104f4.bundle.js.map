{"version":3,"file":"vendor.common-92f104f4.bundle.js","mappings":";;;;;;AAAa;AACb;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,2BAA2B,mBAAO,CAAC,KAAO;AAC1C,yBAAyB,mBAAO,CAAC,KAA0B;AAC3D,mDAAmD,mBAAO,CAAC,KAAsD;AACjH,wBAAwB,mBAAO,CAAC,KAA0B;AAC1D,gDAAgD,mBAAO,CAAC,KAAmD;AAC3G,qCAAqC,mBAAO,CAAC,KAAuC;AACpF,+BAA+B,mBAAO,CAAC,KAAgC;AACvE,yBAAyB,mBAAO,CAAC,KAA0B;AAC3D,kCAAkC,mBAAO,CAAC,IAAmC;AAC7E,sDAAsD,mBAAO,CAAC,KAAyD;AACvH,kCAAkC,mBAAO,CAAC,KAAqC;AAC/E,+CAA+C,mBAAO,CAAC,IAAkD;AACzG,sBAAsB,mBAAO,CAAC,KAAuB;AACrD,gCAAgC,mBAAO,CAAC,KAAkC;AAC1E,oBAAoB,mBAAO,CAAC,KAAW;AACvC,2BAA2B,mBAAO,CAAC,IAA6B;AAChE,8BAA8B,mBAAO,CAAC,KAAgC;AACtE,2BAA2B,mBAAO,CAAC,KAA6B;AAChE,kBAAkB,mBAAO,CAAC,IAAmB;AAC7C,gDAAgD,mBAAO,CAAC,KAAmD;AAC3G,mDAAmD,mBAAO,CAAC,KAAsD;AACjH,iCAAiC,mBAAO,CAAC,IAAoC;AAC7E,8BAA8B,mBAAO,CAAC,KAAiC;AACvE,uBAAuB,mBAAO,CAAC,KAAwB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,2BAA2B,IAAI;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,yCAAyC;AACzgIAAgI,qBAAqB;AACrJ;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,oHAAoH,qBAAqB;AACzI;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE,gDAAgD,SAAS;AACzD;AACA;AACA,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yCAAyC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4GAA4G,qBAAqB;AACjI;AACA;AACA;AACA;AACA;AACA;AACA,6GAA6G,qBAAqB;AAClI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,mBAAmB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D,8DAA8D;AAC9D,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oGAAoG,qBAAqB;AACzH;AACA;AACA;AACA;AACA,+BAA+B,6DAA6D;AAC5F;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,uCAAuC,QAAQ,KAAK,qBAAqB,aAAa,2BAA2B,kCAAkC,IAAI;AACvO;AACA;AACA,6BAA6B;AAC7B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA","sources":["webpack://spinlio-workspace/./node_modules/@shapediver/viewer.rendering-engine.rendering-engine-threejs/dist/RenderingEngine.js"],"sourcesContent":["\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _RenderingEngine_defaultLogo, _RenderingEngine_defaultLogoStatic, _RenderingEngine_defaultSpinner, _RenderingEngine_animations, _RenderingEngine_flags;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RenderingEngine = void 0;\r\nconst THREE = __importStar(require(\"three\"));\r\nconst MaterialLoader_1 = require(\"./loaders/MaterialLoader\");\r\nconst viewer_rendering_engine_animation_engine_1 = require(\"@shapediver/viewer.rendering-engine.animation-engine\");\r\nconst CameraManager_1 = require(\"./managers/CameraManager\");\r\nconst viewer_rendering_engine_canvas_engine_1 = require(\"@shapediver/viewer.rendering-engine.canvas-engine\");\r\nconst EnvironmentGeometryManager_1 = require(\"./managers/EnvironmentGeometryManager\");\r\nconst EnvironmentMapLoader_1 = require(\"./loaders/EnvironmentMapLoader\");\r\nconst GeometryLoader_1 = require(\"./loaders/GeometryLoader\");\r\nconst HTMLElementAnchorLoader_1 = require(\"./loaders/HTMLElementAnchorLoader\");\r\nconst viewer_rendering_engine_intersection_engine_1 = require(\"@shapediver/viewer.rendering-engine.intersection-engine\");\r\nconst viewer_shared_node_tree_1 = require(\"@shapediver/viewer.shared.node-tree\");\r\nconst viewer_rendering_engine_light_engine_1 = require(\"@shapediver/viewer.rendering-engine.light-engine\");\r\nconst LightLoader_1 = require(\"./loaders/LightLoader\");\r\nconst PostProcessingManager_1 = require(\"./managers/PostProcessingManager\");\r\nconst gl_matrix_1 = require(\"gl-matrix\");\r\nconst RenderingManager_1 = require(\"./managers/RenderingManager\");\r\nconst SceneTracingManager_1 = require(\"./managers/SceneTracingManager\");\r\nconst SceneTreeManager_1 = require(\"./managers/SceneTreeManager\");\r\nconst SDColor_1 = require(\"./objects/SDColor\");\r\nconst viewer_rendering_engine_camera_engine_1 = require(\"@shapediver/viewer.rendering-engine.camera-engine\");\r\nconst viewer_rendering_engine_rendering_engine_1 = require(\"@shapediver/viewer.rendering-engine.rendering-engine\");\r\nconst viewer_shared_services_1 = require(\"@shapediver/viewer.shared.services\");\r\nconst viewer_shared_types_1 = require(\"@shapediver/viewer.shared.types\");\r\nconst viewport_css_1 = require(\"./styling/viewport-css\");\r\nclass RenderingEngine {\r\n    // #endregion Properties (75)\r\n    // #region Constructors (1)\r\n    constructor(properties) {\r\n        // #region Properties (75)\r\n        _RenderingEngine_defaultLogo.set(this, 'https://viewer.shapediver.com/v3/graphics/logo_animated_breath.svg');\r\n        _RenderingEngine_defaultLogoStatic.set(this, 'https://viewer.shapediver.com/v3/graphics/logo.png');\r\n        _RenderingEngine_defaultSpinner.set(this, 'https://viewer.shapediver.com/v3/graphics/spinner_ripple.svg');\r\n        this._animationEngine = viewer_rendering_engine_animation_engine_1.AnimationEngine.instance;\r\n        this._canvasEngine = viewer_rendering_engine_canvas_engine_1.CanvasEngine.instance;\r\n        this._colorCache = [];\r\n        // utils\r\n        this._converter = viewer_shared_services_1.Converter.instance;\r\n        this._eventEngine = viewer_shared_services_1.EventEngine.instance;\r\n        this._intersectionManager = viewer_rendering_engine_intersection_engine_1.IntersectionEngine.instance;\r\n        this._logger = viewer_shared_services_1.Logger.instance;\r\n        this._stateEngine = viewer_shared_services_1.StateEngine.instance;\r\n        this._systemInfo = viewer_shared_services_1.SystemInfo.instance;\r\n        this._tree = viewer_shared_node_tree_1.Tree.instance;\r\n        this._uuidGenerator = viewer_shared_services_1.UuidGenerator.instance;\r\n        _RenderingEngine_animations.set(this, {});\r\n        _RenderingEngine_flags.set(this, {\r\n            [viewer_rendering_engine_rendering_engine_1.FLAG_TYPE.CAMERA_FREEZE]: [],\r\n            [viewer_rendering_engine_rendering_engine_1.FLAG_TYPE.CONTINUOUS_RENDERING]: [],\r\n            [viewer_rendering_engine_rendering_engine_1.FLAG_TYPE.CONTINUOUS_SHADOW_MAP_UPDATE]: [],\r\n        });\r\n        // settings\r\n        this._arRotation = gl_matrix_1.vec3.create();\r\n        this._arScale = gl_matrix_1.vec3.fromValues(1, 1, 1);\r\n        this._arTranslation = gl_matrix_1.vec3.create();\r\n        this._automaticColorAdjustment = true;\r\n        this._automaticResizing = true;\r\n        this._beautyRenderBlendingDuration = 1500;\r\n        this._beautyRenderDelay = 50;\r\n        this._busy = false;\r\n        this._busyModeDisplay = viewer_rendering_engine_rendering_engine_1.BUSY_MODE_DISPLAY.SPINNER;\r\n        this._clearAlpha = 1.0;\r\n        this._clearColor = '#ffffff';\r\n        // viewer global vars\r\n        this._closed = false;\r\n        this._enableAR = true;\r\n        this._environmentMap = 'null';\r\n        this._environmentMapAsBackground = false;\r\n        this._environmentMapBlurriness = 0;\r\n        this._environmentMapForUnlitMaterials = false;\r\n        this._environmentMapIntensity = 1;\r\n        this._environmentMapResolution = '1024';\r\n        this._environmentMapRotation = gl_matrix_1.quat.create();\r\n        this._gridVisibility = true;\r\n        this._groundPlaneShadowVisibility = false;\r\n        this._groundPlaneVisibility = true;\r\n        this._lights = true;\r\n        this._maximumRenderingSize = this._systemInfo.isMobile ? { width: 1280, height: 720 } : { width: 1920, height: 1080 };\r\n        this._pause = false;\r\n        this._shadows = true;\r\n        this._show = false;\r\n        this._showStatistics = false;\r\n        this._softShadows = true;\r\n        this._type = viewer_rendering_engine_rendering_engine_1.RENDERER_TYPE.STANDARD;\r\n        // THREE object has default Y, we change that (although it doesn't work everywhere)\r\n        THREE.Object3D.DEFAULT_UP = new THREE.Vector3(0, 0, 1);\r\n        THREE.ColorManagement.enabled = false;\r\n        // adapt some of the three.js shaders according to our needs\r\n        (0, MaterialLoader_1.adaptShaders)();\r\n        // add css to the document\r\n        const style = document.createElement('style');\r\n        style.innerHTML = viewport_css_1.css;\r\n        document.head.appendChild(style);\r\n        const prop = Object.assign({}, properties);\r\n        const branding = Object.assign({}, prop.branding);\r\n        // setting some of the provided properties\r\n        this._id = prop.id || (viewer_shared_services_1.UuidGenerator.instance).create();\r\n        this._visibility = prop.visibility || viewer_rendering_engine_rendering_engine_1.VISIBILITY_MODE.SESSION;\r\n        this._sessionSettingsMode = prop.sessionSettingsMode || viewer_shared_services_1.SESSION_SETTINGS_MODE.FIRST;\r\n        this._sessionSettingsId = prop.sessionSettingsId;\r\n        this._branding = {\r\n            logo: branding.logo === undefined ? __classPrivateFieldGet(this, _RenderingEngine_defaultLogo, \"f\") : branding.logo,\r\n            backgroundColor: branding.backgroundColor || '#393a45FF',\r\n            busyModeSpinner: branding.busyModeSpinner === undefined ? __classPrivateFieldGet(this, _RenderingEngine_defaultSpinner, \"f\") : branding.busyModeSpinner,\r\n            busyModeDisplay: branding.busyModeDisplay || viewer_rendering_engine_rendering_engine_1.BUSY_MODE_DISPLAY.SPINNER,\r\n            spinnerPositioning: branding.spinnerPositioning || viewer_rendering_engine_rendering_engine_1.SPINNER_POSITIONING.BOTTOM_RIGHT\r\n        };\r\n        // creation of viewer essentials\r\n        this._canvas = this._canvasEngine.getCanvas(this._canvasEngine.createCanvasObject(prop.canvas));\r\n        // creation of the engines (all singleton engines were created already)\r\n        this._domEventEngine = new viewer_shared_services_1.DomEventEngine(this._canvas.canvasElement);\r\n        this._cameraEngine = new viewer_rendering_engine_camera_engine_1.CameraEngine(this);\r\n        this._lightEngine = new viewer_rendering_engine_light_engine_1.LightEngine(this);\r\n        // creation of the managers (all singleton engines were created already)\r\n        this._cameraManager = new CameraManager_1.CameraManager(this);\r\n        this._environmentGeometryManager = new EnvironmentGeometryManager_1.EnvironmentGeometryManager(this);\r\n        this._sceneTracingManager = new SceneTracingManager_1.SceneTracingManager(this);\r\n        this._sceneTreeManager = new SceneTreeManager_1.SceneTreeManager(this);\r\n        this._renderingManager = new RenderingManager_1.RenderingManager(this);\r\n        this._postProcessingManager = new PostProcessingManager_1.PostProcessingManager(this);\r\n        // loaders\r\n        this._environmentMapLoader = new EnvironmentMapLoader_1.EnvironmentMapLoader(this);\r\n        this._materialLoader = new MaterialLoader_1.MaterialLoader(this);\r\n        this._geometryLoader = new GeometryLoader_1.GeometryLoader(this);\r\n        this._htmlElementAnchorLoader = new HTMLElementAnchorLoader_1.HTMLElementAnchorLoader(this);\r\n        this._lightLoader = new LightLoader_1.LightLoader(this);\r\n        // start the creation and initialization process \r\n        this._renderer = this.renderingManager.createRenderer(this._canvas.canvasElement);\r\n        this._spinnerDivElement = this.renderingManager.addSpinner(this._canvas.canvasElement, this._branding);\r\n        this._logoDivElement = this.renderingManager.addLogo(this._canvas.canvasElement, this._branding);\r\n        // creation of the managers (all singleton engines were created already)\r\n        this._cameraManager.init();\r\n        this._environmentGeometryManager.init();\r\n        this._sceneTracingManager.init();\r\n        this._sceneTreeManager.init();\r\n        this._renderingManager.init();\r\n        this._postProcessingManager.init();\r\n        // loaders\r\n        this._environmentMapLoader.init();\r\n        this._materialLoader.init();\r\n        this._geometryLoader.init();\r\n        this._htmlElementAnchorLoader.init();\r\n        this._lightLoader.init();\r\n    }\r\n    // #endregion Constructors (1)\r\n    // #region Public Getters And Setters (133)\r\n    get arRotation() {\r\n        return this._arRotation;\r\n    }\r\n    set arRotation(value) {\r\n        this._arRotation = value;\r\n    }\r\n    get arScale() {\r\n        return this._arScale;\r\n    }\r\n    set arScale(value) {\r\n        this._arScale = value;\r\n    }\r\n    get arTranslation() {\r\n        return this._arTranslation;\r\n    }\r\n    set arTranslation(value) {\r\n        this._arTranslation = value;\r\n    }\r\n    get automaticColorAdjustment() {\r\n        return this._automaticColorAdjustment;\r\n    }\r\n    set automaticColorAdjustment(value) {\r\n        if (this._automaticColorAdjustment === value)\r\n            return;\r\n        this._automaticColorAdjustment = value;\r\n        this._colorCache.forEach(c => c.colorCorrection(value));\r\n        this._materialLoader.assignColorCorrection(value);\r\n    }\r\n    get automaticResizing() {\r\n        return this._automaticResizing;\r\n    }\r\n    set automaticResizing(value) {\r\n        this._automaticResizing = value;\r\n    }\r\n    get beautyRenderBlendingDuration() {\r\n        return this._beautyRenderBlendingDuration;\r\n    }\r\n    set beautyRenderBlendingDuration(value) {\r\n        this._beautyRenderBlendingDuration = value;\r\n    }\r\n    get beautyRenderDelay() {\r\n        return this._beautyRenderDelay;\r\n    }\r\n    set beautyRenderDelay(value) {\r\n        this._beautyRenderDelay = value;\r\n    }\r\n    get branding() {\r\n        return this._branding;\r\n    }\r\n    get busy() {\r\n        return this._busy;\r\n    }\r\n    set busy(value) {\r\n        this._busy = value;\r\n    }\r\n    get busyModeDisplay() {\r\n        return this._busyModeDisplay;\r\n    }\r\n    set busyModeDisplay(value) {\r\n        this._busyModeDisplay = value;\r\n    }\r\n    get camera() {\r\n        return this._cameraManager.camera;\r\n    }\r\n    get cameraEngine() {\r\n        return this._cameraEngine;\r\n    }\r\n    get cameraManager() {\r\n        return this._cameraManager;\r\n    }\r\n    get canvas() {\r\n        return this._canvas.canvasElement;\r\n    }\r\n    get canvasEngine() {\r\n        return this._canvasEngine;\r\n    }\r\n    get clearAlpha() {\r\n        return this._clearAlpha;\r\n    }\r\n    set clearAlpha(value) {\r\n        this._clearAlpha = value;\r\n    }\r\n    get clearColor() {\r\n        return this._clearColor;\r\n    }\r\n    set clearColor(value) {\r\n        this._clearColor = value;\r\n    }\r\n    get closed() {\r\n        return this._closed;\r\n    }\r\n    get colorCache() {\r\n        return this._colorCache;\r\n    }\r\n    get continuousRendering() {\r\n        return this._renderingManager.continuousRendering;\r\n    }\r\n    set continuousRendering(value) {\r\n        this._renderingManager.continuousRendering = value;\r\n    }\r\n    get continuousShadowMapUpdate() {\r\n        return this._renderingManager.continuousShadowMapUpdate;\r\n    }\r\n    set continuousShadowMapUpdate(value) {\r\n        this._renderingManager.continuousShadowMapUpdate = value;\r\n    }\r\n    get defaultLineMaterial() {\r\n        return this.materialLoader.defaultLineMaterialData;\r\n    }\r\n    set defaultLineMaterial(value) {\r\n        this.materialLoader.defaultLineMaterialData = value;\r\n    }\r\n    get defaultMaterial() {\r\n        return this.materialLoader.defaultMaterialData;\r\n    }\r\n    set defaultMaterial(value) {\r\n        this.materialLoader.defaultMaterialData = value;\r\n    }\r\n    get defaultMaterialColor() {\r\n        return this.materialLoader.defaultMaterialData.color;\r\n    }\r\n    set defaultMaterialColor(value) {\r\n        this.materialLoader.defaultMaterialData.color = value;\r\n        this.materialLoader.assignDefaultMaterial();\r\n        this.materialLoader.defaultLineMaterialData.color = value;\r\n        this.materialLoader.assignDefaultLineMaterial();\r\n        this.materialLoader.defaultPointMaterialData.color = value;\r\n        this.materialLoader.assignDefaultPointMaterial();\r\n    }\r\n    get defaultPointMaterial() {\r\n        return this.materialLoader.defaultPointMaterialData;\r\n    }\r\n    set defaultPointMaterial(value) {\r\n        this.materialLoader.defaultPointMaterialData = value;\r\n    }\r\n    get domEventEngine() {\r\n        return this._domEventEngine;\r\n    }\r\n    get enableAR() {\r\n        return this._enableAR;\r\n    }\r\n    set enableAR(value) {\r\n        this._enableAR = value;\r\n    }\r\n    get environmentMap() {\r\n        return this._environmentMap;\r\n    }\r\n    set environmentMap(value) {\r\n        this._environmentMap = value;\r\n        this._environmentMapLoader.load(this.environmentMap);\r\n    }\r\n    get environmentMapAsBackground() {\r\n        return this._environmentMapAsBackground;\r\n    }\r\n    set environmentMapAsBackground(value) {\r\n        this._environmentMapAsBackground = value;\r\n    }\r\n    get environmentMapBlurriness() {\r\n        return this._environmentMapBlurriness;\r\n    }\r\n    set environmentMapBlurriness(value) {\r\n        this._environmentMapBlurriness = value;\r\n        this._sceneTreeManager.scene.backgroundBlurriness = this._environmentMapBlurriness;\r\n    }\r\n    get environmentMapForUnlitMaterials() {\r\n        return this._environmentMapForUnlitMaterials;\r\n    }\r\n    set environmentMapForUnlitMaterials(value) {\r\n        this._environmentMapForUnlitMaterials = value;\r\n        this._materialLoader.assignEnvironmentMapForUnlitMaterials(value);\r\n    }\r\n    get environmentMapIntensity() {\r\n        return this._environmentMapIntensity;\r\n    }\r\n    set environmentMapIntensity(value) {\r\n        this._environmentMapIntensity = value;\r\n        this._sceneTreeManager.scene.backgroundIntensity = value;\r\n        this._materialLoader.assignEnvironmentMapIntensity(value);\r\n    }\r\n    get environmentMapLoader() {\r\n        return this._environmentMapLoader;\r\n    }\r\n    get environmentMapResolution() {\r\n        return this._environmentMapResolution;\r\n    }\r\n    set environmentMapResolution(value) {\r\n        this._environmentMapResolution = value;\r\n        this._environmentMapLoader.load(this.environmentMap);\r\n    }\r\n    get environmentMapRotation() {\r\n        return this._environmentMapRotation;\r\n    }\r\n    set environmentMapRotation(value) {\r\n        this._environmentMapRotation = value;\r\n        this._materialLoader.assignEnvironmentMapRotation(value);\r\n    }\r\n    get eventEngine() {\r\n        return this._eventEngine;\r\n    }\r\n    get geometryLoader() {\r\n        return this._geometryLoader;\r\n    }\r\n    get gridColor() {\r\n        return this._environmentGeometryManager.gridColor;\r\n    }\r\n    set gridColor(value) {\r\n        this._environmentGeometryManager.gridColor = value;\r\n    }\r\n    get gridVisibility() {\r\n        return this._gridVisibility;\r\n    }\r\n    set gridVisibility(value) {\r\n        if (this._environmentGeometryManager.grid)\r\n            this._environmentGeometryManager.grid.visible = value;\r\n        this._gridVisibility = value;\r\n    }\r\n    get groundPlaneColor() {\r\n        return this._environmentGeometryManager.groundPlaneColor;\r\n    }\r\n    set groundPlaneColor(value) {\r\n        this._environmentGeometryManager.groundPlaneColor = value;\r\n    }\r\n    get groundPlaneShadowColor() {\r\n        return this._environmentGeometryManager.groundPlaneShadowColor;\r\n    }\r\n    set groundPlaneShadowColor(value) {\r\n        this._environmentGeometryManager.groundPlaneShadowColor = value;\r\n    }\r\n    get groundPlaneShadowVisibility() {\r\n        return this._groundPlaneShadowVisibility;\r\n    }\r\n    set groundPlaneShadowVisibility(value) {\r\n        if (this._environmentGeometryManager.groundPlaneShadow)\r\n            this._environmentGeometryManager.groundPlaneShadow.visible = value;\r\n        this._groundPlaneShadowVisibility = value;\r\n    }\r\n    get groundPlaneVisibility() {\r\n        return this._groundPlaneVisibility;\r\n    }\r\n    set groundPlaneVisibility(value) {\r\n        if (this._environmentGeometryManager.groundPlane)\r\n            this._environmentGeometryManager.groundPlane.visible = value;\r\n        this._groundPlaneVisibility = value;\r\n    }\r\n    get htmlElementAnchorLoader() {\r\n        return this._htmlElementAnchorLoader;\r\n    }\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    get lightEngine() {\r\n        return this._lightEngine;\r\n    }\r\n    get lightLoader() {\r\n        return this._lightLoader;\r\n    }\r\n    get lightScene() {\r\n        return this.lightEngine.lightScene ? this.lightEngine.lightScene.id : '';\r\n    }\r\n    get lightSceneId() {\r\n        return this.lightEngine.lightScene ? this.lightEngine.lightScene.id : '';\r\n    }\r\n    get lights() {\r\n        return this._lights;\r\n    }\r\n    set lights(value) {\r\n        this._lights = value;\r\n    }\r\n    get logoDivElement() {\r\n        return this._logoDivElement;\r\n    }\r\n    get materialLoader() {\r\n        return this._materialLoader;\r\n    }\r\n    get maximumRenderingSize() {\r\n        return this._maximumRenderingSize;\r\n    }\r\n    set maximumRenderingSize(value) {\r\n        this._maximumRenderingSize = value;\r\n    }\r\n    get minimalRendering() {\r\n        return this.renderingManager.minimalRendering;\r\n    }\r\n    get outputEncoding() {\r\n        switch (this._renderer.outputColorSpace) {\r\n            case (THREE.SRGBColorSpace):\r\n                return viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.SRGB;\r\n            case (THREE.LinearSRGBColorSpace):\r\n            default:\r\n                return viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.LINEAR;\r\n        }\r\n    }\r\n    set outputEncoding(value) {\r\n        switch (value) {\r\n            case (viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.SRGB):\r\n                this._renderer.outputColorSpace = THREE.SRGBColorSpace;\r\n                break;\r\n            case (viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.LINEAR):\r\n            default:\r\n                this._renderer.outputColorSpace = THREE.LinearSRGBColorSpace;\r\n                break;\r\n        }\r\n    }\r\n    get pause() {\r\n        return this._pause;\r\n    }\r\n    set pause(value) {\r\n        this._pause = value;\r\n    }\r\n    get physicallyCorrectLights() {\r\n        return !this._renderer.useLegacyLights;\r\n    }\r\n    set physicallyCorrectLights(value) {\r\n        this._renderer.useLegacyLights = !value;\r\n    }\r\n    get pointSize() {\r\n        return this.materialLoader.defaultPointMaterialData.size || 1;\r\n    }\r\n    set pointSize(value) {\r\n        this.materialLoader.defaultPointMaterialData.size = value;\r\n        this.materialLoader.assignDefaultPointMaterial();\r\n    }\r\n    get postProcessingManager() {\r\n        return this._postProcessingManager;\r\n    }\r\n    get postRenderingCallback() {\r\n        return this._postRenderingCallback;\r\n    }\r\n    set postRenderingCallback(value) {\r\n        this._postRenderingCallback = value;\r\n    }\r\n    get preRenderingCallback() {\r\n        return this._preRenderingCallback;\r\n    }\r\n    set preRenderingCallback(value) {\r\n        this._preRenderingCallback = value;\r\n    }\r\n    get renderer() {\r\n        return this._renderer;\r\n    }\r\n    get renderingManager() {\r\n        return this._renderingManager;\r\n    }\r\n    get scene() {\r\n        return this._sceneTreeManager.scene;\r\n    }\r\n    get sceneTracingManager() {\r\n        return this._sceneTracingManager;\r\n    }\r\n    get sceneTreeManager() {\r\n        return this._sceneTreeManager;\r\n    }\r\n    get sessionSettingsId() {\r\n        return this._sessionSettingsId;\r\n    }\r\n    set sessionSettingsId(value) {\r\n        this._sessionSettingsId = value;\r\n    }\r\n    get sessionSettingsMode() {\r\n        return this._sessionSettingsMode;\r\n    }\r\n    set sessionSettingsMode(value) {\r\n        this._sessionSettingsMode = value;\r\n    }\r\n    get settingsEngine() {\r\n        return this._settingsEngine;\r\n    }\r\n    set settingsEngine(value) {\r\n        this._settingsEngine = value;\r\n    }\r\n    get shadows() {\r\n        return this._shadows;\r\n    }\r\n    set shadows(value) {\r\n        this._shadows = value;\r\n    }\r\n    get show() {\r\n        return this._show;\r\n    }\r\n    set show(value) {\r\n        this._show = value;\r\n    }\r\n    get showStatistics() {\r\n        return this._showStatistics;\r\n    }\r\n    set showStatistics(value) {\r\n        this._showStatistics = value;\r\n    }\r\n    get softShadows() {\r\n        return this._softShadows;\r\n    }\r\n    set softShadows(value) {\r\n        this._softShadows = value;\r\n    }\r\n    get spinnerDivElement() {\r\n        return this._spinnerDivElement;\r\n    }\r\n    get stateEngine() {\r\n        return this._stateEngine;\r\n    }\r\n    get textureEncoding() {\r\n        switch (this.materialLoader.textureEncoding) {\r\n            case (THREE.SRGBColorSpace):\r\n                return viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.SRGB;\r\n            case (THREE.LinearSRGBColorSpace):\r\n            default:\r\n                return viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.LINEAR;\r\n        }\r\n    }\r\n    set textureEncoding(value) {\r\n        switch (value) {\r\n            case (viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.SRGB):\r\n                this.environmentMapLoader.textureEncoding = THREE.SRGBColorSpace;\r\n                this.materialLoader.textureEncoding = THREE.SRGBColorSpace;\r\n                break;\r\n            case (viewer_rendering_engine_rendering_engine_1.TEXTURE_ENCODING.LINEAR):\r\n            default:\r\n                this.environmentMapLoader.textureEncoding = THREE.LinearSRGBColorSpace;\r\n                this.materialLoader.textureEncoding = THREE.LinearSRGBColorSpace;\r\n        }\r\n    }\r\n    get toneMapping() {\r\n        switch (this._renderer.toneMapping) {\r\n            case (THREE.LinearToneMapping):\r\n                return viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.LINEAR;\r\n            case (THREE.ReinhardToneMapping):\r\n                return viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.REINHARD;\r\n            case (THREE.CineonToneMapping):\r\n                return viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.CINEON;\r\n            case (THREE.ACESFilmicToneMapping):\r\n                return viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.ACES_FILMIC;\r\n            case (THREE.NoToneMapping):\r\n            default:\r\n                return viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.NONE;\r\n        }\r\n    }\r\n    set toneMapping(value) {\r\n        switch (value) {\r\n            case (viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.LINEAR):\r\n                this._renderer.toneMapping = THREE.LinearToneMapping;\r\n                break;\r\n            case (viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.REINHARD):\r\n                this._renderer.toneMapping = THREE.ReinhardToneMapping;\r\n                break;\r\n            case (viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.CINEON):\r\n                this._renderer.toneMapping = THREE.CineonToneMapping;\r\n                break;\r\n            case (viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.ACES_FILMIC):\r\n                this._renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n                break;\r\n            case (viewer_rendering_engine_rendering_engine_1.TONE_MAPPING.NONE):\r\n            default:\r\n                this._renderer.toneMapping = THREE.NoToneMapping;\r\n        }\r\n        this.materialLoader.updateMaterials();\r\n    }\r\n    get toneMappingExposure() {\r\n        return this._renderer.toneMappingExposure;\r\n    }\r\n    set toneMappingExposure(value) {\r\n        this._renderer.toneMappingExposure = value;\r\n    }\r\n    get type() {\r\n        return this._type;\r\n    }\r\n    set type(value) {\r\n        this._type = value;\r\n    }\r\n    get usingSwiftShader() {\r\n        return this.renderingManager.usingSwiftShader;\r\n    }\r\n    get visibility() {\r\n        return this._visibility;\r\n    }\r\n    get visualizeAttributes() {\r\n        return this._visualizeAttributes;\r\n    }\r\n    set visualizeAttributes(value) {\r\n        this._visualizeAttributes = value;\r\n    }\r\n    // #endregion Public Getters And Setters (133)\r\n    // #region Public Methods (25)\r\n    addFlag(flag) {\r\n        var _a;\r\n        const token = this._uuidGenerator.create();\r\n        if (flag === viewer_rendering_engine_rendering_engine_1.FLAG_TYPE.BUSY_MODE) {\r\n            (_a = this.stateEngine.viewportEngines[this.id]) === null || _a === void 0 ? void 0 : _a.busy.push(token);\r\n        }\r\n        else {\r\n            __classPrivateFieldGet(this, _RenderingEngine_flags, \"f\")[flag].push(token);\r\n        }\r\n        this.evaluateFlagState();\r\n        return token;\r\n    }\r\n    applySettings(sections = {\r\n        ar: true,\r\n        scene: true,\r\n        camera: true,\r\n        light: true,\r\n        environment: true,\r\n        general: true,\r\n        postprocessing: true\r\n    }, settingsEngine, updateViewport = true) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            settingsEngine = settingsEngine || this._settingsEngine;\r\n            if (!settingsEngine)\r\n                return;\r\n            if (sections.environment) {\r\n                // as the environment map is the only thing that needs time to load, load it first\r\n                yield new Promise((resolve, reject) => {\r\n                    var _a;\r\n                    (_a = this._stateEngine.viewportEngines[this.id]) === null || _a === void 0 ? void 0 : _a.environmentMapLoaded.then(() => {\r\n                        try {\r\n                            if (!settingsEngine)\r\n                                return;\r\n                            this.environmentMapAsBackground = settingsEngine.environment.mapAsBackground;\r\n                            this.clearAlpha = settingsEngine.environment.clearAlpha;\r\n                            this.clearColor = this._converter.toHexColor(settingsEngine.environment.clearColor);\r\n                            this.environmentMapRotation = [settingsEngine.environment.rotation.x, settingsEngine.environment.rotation.y, settingsEngine.environment.rotation.z, settingsEngine.environment.rotation.w];\r\n                            this.environmentMapBlurriness = settingsEngine.environment.blurriness;\r\n                            this.environmentMapIntensity = settingsEngine.environment.intensity;\r\n                            this.applySyncSettings(sections, settingsEngine, updateViewport);\r\n                            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE_VIEWPORT.VIEWPORT_SETTINGS_LOADED, { viewportId: this.id });\r\n                            resolve();\r\n                        }\r\n                        catch (e) {\r\n                            reject(e);\r\n                        }\r\n                    }).catch(e => reject(e));\r\n                    // set it like this to not trigger the loading\r\n                    this.environmentMap = settingsEngine.environment.map;\r\n                });\r\n            }\r\n            else {\r\n                this.applySyncSettings(sections, settingsEngine, updateViewport);\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE_VIEWPORT.VIEWPORT_SETTINGS_LOADED, { viewportId: this.id });\r\n            }\r\n        });\r\n    }\r\n    assignSettingsEngine(settingsEngine) {\r\n        this._settingsEngine = settingsEngine;\r\n    }\r\n    close() {\r\n        var _a, _b, _c;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this._closed = true;\r\n            this._lightEngine.close();\r\n            this._renderer.clear(true, true, true);\r\n            this._renderer.dispose();\r\n            this._domEventEngine.removeAllDomEventListener();\r\n            this._domEventEngine.dispose();\r\n            (_a = this._canvas.canvasElement.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(this._logoDivElement);\r\n            (_b = this._canvas.canvasElement.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(this._spinnerDivElement);\r\n            (_c = this._canvas.canvasElement.parentNode) === null || _c === void 0 ? void 0 : _c.removeChild(this._htmlElementAnchorLoader.parentDiv);\r\n            this._canvas.reset();\r\n        });\r\n    }\r\n    continueRendering() {\r\n        this._pause = false;\r\n    }\r\n    convert3Dto2D(p) {\r\n        return this.sceneTracingManager.convert3Dto2D(p);\r\n    }\r\n    createSDTFOverview(node) {\r\n        const out = new viewer_shared_types_1.SDTFOverviewData({});\r\n        for (let i = 0, len = node.data.length; i < len; i++)\r\n            if (node.data[i] instanceof viewer_shared_types_1.SDTFOverviewData)\r\n                out.merge(node.data[i]);\r\n        for (let i = 0, len = node.children.length; i < len; i++)\r\n            out.merge(new viewer_shared_types_1.SDTFOverviewData(this.createSDTFOverview(node.children[i])));\r\n        return out.overview;\r\n    }\r\n    createThreeJsColor(color) {\r\n        const sdColor = new SDColor_1.SDColor(this._converter.toThreeJsColorInput(color), color);\r\n        sdColor.colorCorrection(this.automaticColorAdjustment);\r\n        this._colorCache.push(sdColor);\r\n        return sdColor;\r\n    }\r\n    displayErrorMessage(message) {\r\n        for (let i = 0; i < this.logoDivElement.children.length; i++)\r\n            this.logoDivElement.children[i].style.visibility = 'hidden';\r\n        const d = document.createElement('div');\r\n        d.classList.add('sdv-error-message-container');\r\n        this.logoDivElement.appendChild(d);\r\n        const p = document.createElement('p');\r\n        p.textContent = message;\r\n        p.classList.add('sdv-error-message');\r\n        p.style.color = this.logoDivElement.style.backgroundColor;\r\n        d.appendChild(p);\r\n    }\r\n    evaluateFlagState() {\r\n        // busy\r\n        {\r\n            const currentBusyState = this.busy;\r\n            if (this.stateEngine.viewportEngines[this.id] && this.stateEngine.viewportEngines[this.id].busy.length > 0) {\r\n                if (!currentBusyState) {\r\n                    this.busy = true;\r\n                    this._renderingManager.render();\r\n                    this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.VIEWPORT.BUSY_MODE_ON, { viewportId: this.id });\r\n                }\r\n            }\r\n            else {\r\n                if (currentBusyState) {\r\n                    this.busy = false;\r\n                    this._renderingManager.render();\r\n                    this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.VIEWPORT.BUSY_MODE_OFF, { viewportId: this.id });\r\n                }\r\n            }\r\n        }\r\n        // camera freeze\r\n        {\r\n            if (__classPrivateFieldGet(this, _RenderingEngine_flags, \"f\")[viewer_rendering_engine_rendering_engine_1.FLAG_TYPE.CAMERA_FREEZE].length > 0) {\r\n                this.cameraEngine.deactivateCameraEvents();\r\n            }\r\n            else {\r\n                this.cameraEngine.activateCameraEvents();\r\n            }\r\n        }\r\n        // continuous rendering\r\n        {\r\n            const currentContinuousRenderingState = this.continuousRendering;\r\n            if (__classPrivateFieldGet(this, _RenderingEngine_flags, \"f\")[viewer_rendering_engine_rendering_engine_1.FLAG_TYPE.CONTINUOUS_RENDERING].length > 0) {\r\n                if (!currentContinuousRenderingState) {\r\n                    this.continuousRendering = true;\r\n                    this._renderingManager.render();\r\n                }\r\n            }\r\n            else {\r\n                if (currentContinuousRenderingState) {\r\n                    this.continuousRendering = false;\r\n                }\r\n            }\r\n        }\r\n        // continuous shadow map update\r\n        {\r\n            const currentShadowMapUpdateState = this.continuousShadowMapUpdate;\r\n            if (__classPrivateFieldGet(this, _RenderingEngine_flags, \"f\")[viewer_rendering_engine_rendering_engine_1.FLAG_TYPE.CONTINUOUS_SHADOW_MAP_UPDATE].length > 0) {\r\n                if (!currentShadowMapUpdateState) {\r\n                    this.continuousShadowMapUpdate = true;\r\n                    this._renderingManager.render();\r\n                }\r\n            }\r\n            else {\r\n                if (currentShadowMapUpdateState) {\r\n                    this.continuousShadowMapUpdate = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getEnvironmentMapImageUrl() {\r\n        return this._environmentMapLoader.getEnvironmentMapImageUrl(this.environmentMap);\r\n    }\r\n    getScreenshot(type, encoderOptions) {\r\n        return this._renderingManager.getScreenshot(type, encoderOptions);\r\n    }\r\n    isMobileDeviceWithoutBrowserARSupport() {\r\n        // has to be a mobile device (duh)\r\n        if (this._systemInfo.isIOS === false && this._systemInfo.isAndroid === false)\r\n            return false;\r\n        // no Firefox on Android\r\n        if (this._systemInfo.isAndroid === true && this._systemInfo.isFirefox === true)\r\n            return true;\r\n        // no Instagram on iOS\r\n        if (this._systemInfo.isIOS === true && this._systemInfo.isInstagram === true)\r\n            return true;\r\n        return false;\r\n    }\r\n    pauseRendering() {\r\n        this._pause = true;\r\n    }\r\n    pointerEventToRay(event) {\r\n        return this._sceneTracingManager.pointerEventToRay(event);\r\n    }\r\n    raytraceScene(origin, direction) {\r\n        const intersect = this._intersectionManager.intersect({ origin, direction }, this.id);\r\n        return intersect.map(i => {\r\n            return {\r\n                distance: i.distance,\r\n                node: i.node,\r\n                data: i.geometryData\r\n            };\r\n        });\r\n    }\r\n    removeFlag(token) {\r\n        let success = false;\r\n        const Flags = Object.values(viewer_rendering_engine_rendering_engine_1.FLAG_TYPE);\r\n        for (const f of Flags) {\r\n            if (f === viewer_rendering_engine_rendering_engine_1.FLAG_TYPE.BUSY_MODE) {\r\n                if (this.stateEngine.viewportEngines[this.id] && this.stateEngine.viewportEngines[this.id].busy.includes(token)) {\r\n                    this.stateEngine.viewportEngines[this.id].busy.splice(this.stateEngine.viewportEngines[this.id].busy.indexOf(token), 1);\r\n                    success = true;\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                if (__classPrivateFieldGet(this, _RenderingEngine_flags, \"f\")[f].includes(token)) {\r\n                    __classPrivateFieldGet(this, _RenderingEngine_flags, \"f\")[f].splice(__classPrivateFieldGet(this, _RenderingEngine_flags, \"f\")[f].indexOf(token), 1);\r\n                    success = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this.evaluateFlagState();\r\n        return success;\r\n    }\r\n    reset() {\r\n        var _a, _b, _c, _d;\r\n        (_a = this._stateEngine.viewportEngines[this.id]) === null || _a === void 0 ? void 0 : _a.settingsAssigned.reset();\r\n        (_b = this._stateEngine.viewportEngines[this.id]) === null || _b === void 0 ? void 0 : _b.boundingBoxCreated.reset();\r\n        (_c = this._stateEngine.viewportEngines[this.id]) === null || _c === void 0 ? void 0 : _c.environmentMapLoaded.reset();\r\n        (_d = this._stateEngine.viewportEngines[this.id]) === null || _d === void 0 ? void 0 : _d.boundingBoxCreated.then(() => {\r\n            this._environmentGeometryManager.changeSceneExtents(this._sceneTreeManager.boundingBox);\r\n        });\r\n    }\r\n    resize(width, height) {\r\n        this._renderingManager.resize(width, height);\r\n        this._renderingManager.render();\r\n    }\r\n    saveSettings(settingsEngine) {\r\n        settingsEngine = settingsEngine || this._settingsEngine;\r\n        if (!settingsEngine)\r\n            return;\r\n        this.lightEngine.saveSettings(settingsEngine);\r\n        this.cameraEngine.saveSettings(settingsEngine);\r\n        this.postProcessingManager.saveSettings(settingsEngine);\r\n        settingsEngine.ar.enable = this.enableAR;\r\n        settingsEngine.environment.mapResolution = this.environmentMapResolution;\r\n        settingsEngine.environment.map = Array.isArray(this.environmentMap) ? JSON.stringify(this.environmentMap) : this.environmentMap;\r\n        settingsEngine.environment.mapAsBackground = this.environmentMapAsBackground;\r\n        settingsEngine.environment.clearAlpha = this.clearAlpha;\r\n        settingsEngine.environment.clearColor = this._converter.toHexColor(this.clearColor);\r\n        settingsEngine.environment.rotation = { x: this.environmentMapRotation[0], y: this.environmentMapRotation[1], z: this.environmentMapRotation[2], w: this.environmentMapRotation[3] };\r\n        settingsEngine.environment.blurriness = this.environmentMapBlurriness;\r\n        settingsEngine.environment.intensity = this.environmentMapIntensity;\r\n        settingsEngine.environmentGeometry.gridVisibility = this.gridVisibility;\r\n        settingsEngine.environmentGeometry.groundPlaneVisibility = this.groundPlaneVisibility;\r\n        settingsEngine.environmentGeometry.groundPlaneShadowVisibility = this.groundPlaneShadowVisibility;\r\n        settingsEngine.environmentGeometry.gridColor = this._converter.toHexColor(this.gridColor);\r\n        settingsEngine.environmentGeometry.groundPlaneColor = this._converter.toHexColor(this.groundPlaneColor);\r\n        settingsEngine.environmentGeometry.groundPlaneShadowColor = this._converter.toHexColor(this.groundPlaneShadowColor);\r\n        settingsEngine.general.pointSize = this.pointSize;\r\n        settingsEngine.general.transformation.rotation = { x: this.arRotation[0], y: this.arRotation[1], z: this.arRotation[2] };\r\n        settingsEngine.general.transformation.translation = { x: this.arTranslation[0], y: this.arTranslation[1], z: this.arTranslation[2] };\r\n        settingsEngine.general.transformation.scale = { x: this.arScale[0], y: this.arScale[1], z: this.arScale[2] };\r\n        settingsEngine.general.defaultMaterialColor = this._converter.toHexColor(this.defaultMaterialColor);\r\n        settingsEngine.rendering.automaticColorAdjustment = this.automaticColorAdjustment;\r\n        settingsEngine.rendering.lights = this.lights;\r\n        settingsEngine.rendering.outputEncoding = this.outputEncoding;\r\n        settingsEngine.rendering.physicallyCorrectLights = this.physicallyCorrectLights;\r\n        settingsEngine.rendering.textureEncoding = this.textureEncoding;\r\n        settingsEngine.rendering.toneMapping = this.toneMapping;\r\n        settingsEngine.rendering.toneMappingExposure = this.toneMappingExposure;\r\n        settingsEngine.rendering.beautyRenderBlendingDuration = this.beautyRenderBlendingDuration;\r\n        settingsEngine.rendering.beautyRenderDelay = this.beautyRenderDelay;\r\n        settingsEngine.rendering.shadows = this.shadows;\r\n        settingsEngine.rendering.softShadows = this.softShadows;\r\n    }\r\n    start() {\r\n        var _a;\r\n        this._renderingManager.start();\r\n        (_a = this._stateEngine.viewportEngines[this.id]) === null || _a === void 0 ? void 0 : _a.boundingBoxCreated.then(() => {\r\n            this._environmentGeometryManager.changeSceneExtents(this._sceneTreeManager.boundingBox);\r\n        });\r\n        if (this._sessionSettingsMode === viewer_shared_services_1.SESSION_SETTINGS_MODE.NONE) {\r\n            this.environmentMap = 'photo_studio';\r\n        }\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    update(id) {\r\n        if (this.closed)\r\n            return;\r\n        this._sceneTreeManager.updateSceneTree(this._tree.root);\r\n        this._renderingManager.updateShadowMap();\r\n        this._animationEngine.updateAnimationData();\r\n        this._renderingManager.render();\r\n        this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE_VIEWPORT.VIEWPORT_UPDATED, { viewportId: this.id });\r\n    }\r\n    updateEnvironmentGeometry() {\r\n        this._environmentGeometryManager.updateEnvironmentGeometryPosition();\r\n    }\r\n    viewInAR(file, options = { arScale: 'auto', arPlacement: 'floor', xrEnvironment: false }) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const eventId = this._uuidGenerator.create();\r\n            const event = { type: viewer_shared_types_1.TASK_TYPE.AR_LOADING, id: eventId, progress: 0, status: 'Loading AR scene' };\r\n            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_START, event);\r\n            // if this is not a supported device, throw an error\r\n            if (this.viewableInAR() === false) {\r\n                const event = { type: viewer_shared_types_1.TASK_TYPE.AR_LOADING, id: eventId, progress: 1, status: 'Stopped AR loading due to an error' };\r\n                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_CANCEL, event);\r\n                throw new viewer_shared_services_1.ShapeDiverViewerArError('Api.viewInAR: The device or browser is not supported for this functionality, please call \"viewableInAR\" for more information.');\r\n            }\r\n            const arScale = options.arScale !== 'auto' ? 'fixed' : 'auto';\r\n            // const arPlacement = options.arPlacement !== 'wall' ? 'floor' : 'wall';\r\n            // const xrEnvironment = options.xrEnvironment !== true ? false : true;\r\n            // let arEnvironment = '';\r\n            // const envMapUrl = this.getEnvironmentMapImageUrl();\r\n            // if (envMapUrl !== '') {\r\n            //   if (envMapUrl.endsWith('.hdr')) {\r\n            //     arEnvironment = 'skybox-image=' + envMapUrl;\r\n            //   } else {\r\n            //     arEnvironment = 'environment-image=' + envMapUrl;\r\n            //   }\r\n            // }\r\n            if (this._systemInfo.isIOS) {\r\n                // create the link and click it\r\n                const a = document.createElement('a');\r\n                a.href = file + (arScale === 'fixed' ? '.usdz_allowsContentScaling=0' : '.usdz');\r\n                a.rel = 'ar';\r\n                const img = document.createElement('img');\r\n                img.src = __classPrivateFieldGet(this, _RenderingEngine_defaultLogoStatic, \"f\");\r\n                a.appendChild(img);\r\n                a.click();\r\n            }\r\n            else {\r\n                const a = document.createElement('a');\r\n                a.href = `intent://arvr.google.com/scene-viewer/1.0?resizable=${arScale === 'fixed' ? 'false' : 'true'}&file=${file}&mode=ar_only#Intent;scheme=https;package=com.google.ar.core;action=android.intent.action.VIEW;end;`;\r\n                a.click();\r\n            }\r\n            const event2 = { type: viewer_shared_types_1.TASK_TYPE.AR_LOADING, id: eventId, progress: 1, status: 'Done loading AR scene, launching AR' };\r\n            this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.TASK.TASK_END, event2);\r\n        });\r\n    }\r\n    viewableInAR() {\r\n        // has to be a mobile device (duh)\r\n        if (this._systemInfo.isIOS === false && this._systemInfo.isAndroid === false)\r\n            return false;\r\n        // no Firefox on Android\r\n        if (this._systemInfo.isAndroid === true && this._systemInfo.isFirefox === true)\r\n            return false;\r\n        // no Firefox on iOS\r\n        if (this._systemInfo.isIOS === true && this._systemInfo.isFirefox === true)\r\n            return false;\r\n        // no Instagram on iOS\r\n        if (this._systemInfo.isIOS === true && this._systemInfo.isInstagram === true)\r\n            return false;\r\n        return true;\r\n    }\r\n    // #endregion Public Methods (25)\r\n    // #region Private Methods (1)\r\n    applySyncSettings(sections = {\r\n        ar: true,\r\n        scene: true,\r\n        camera: true,\r\n        light: true,\r\n        environment: true,\r\n        general: true,\r\n        postprocessing: true\r\n    }, settingsEngine, updateViewport = true) {\r\n        var _a;\r\n        settingsEngine = settingsEngine || this._settingsEngine;\r\n        if (!settingsEngine)\r\n            return;\r\n        if (sections.ar) {\r\n            this.enableAR = settingsEngine.ar.enable;\r\n            this.arScale = [settingsEngine.general.transformation.scale.x, settingsEngine.general.transformation.scale.y, settingsEngine.general.transformation.scale.z];\r\n            this.arTranslation = [settingsEngine.general.transformation.translation.x, settingsEngine.general.transformation.translation.y, settingsEngine.general.transformation.translation.z];\r\n            this.arRotation = [settingsEngine.general.transformation.rotation.x, settingsEngine.general.transformation.rotation.y, settingsEngine.general.transformation.rotation.z];\r\n        }\r\n        if (sections.scene) {\r\n            this.gridColor = settingsEngine.environmentGeometry.gridColor;\r\n            this.gridVisibility = settingsEngine.environmentGeometry.gridVisibility;\r\n            this.groundPlaneColor = settingsEngine.environmentGeometry.groundPlaneColor;\r\n            this.groundPlaneVisibility = settingsEngine.environmentGeometry.groundPlaneVisibility;\r\n            this.groundPlaneShadowColor = settingsEngine.environmentGeometry.groundPlaneShadowColor;\r\n            this.groundPlaneShadowVisibility = settingsEngine.environmentGeometry.groundPlaneShadowVisibility;\r\n            this.shadows = settingsEngine.rendering.shadows;\r\n            this.softShadows = settingsEngine.rendering.softShadows;\r\n            this.lights = settingsEngine.rendering.lights;\r\n            this.automaticColorAdjustment = settingsEngine.rendering.automaticColorAdjustment;\r\n            this.textureEncoding = settingsEngine.rendering.textureEncoding;\r\n            this.outputEncoding = settingsEngine.rendering.outputEncoding;\r\n            this.physicallyCorrectLights = settingsEngine.rendering.physicallyCorrectLights;\r\n            this.toneMapping = settingsEngine.rendering.toneMapping;\r\n            this.toneMappingExposure = settingsEngine.rendering.toneMappingExposure;\r\n        }\r\n        if (sections.general) {\r\n            this.defaultMaterialColor = settingsEngine.general.defaultMaterialColor;\r\n            this.pointSize = settingsEngine.general.pointSize;\r\n        }\r\n        if (sections.light)\r\n            this.lightEngine.applySettings(settingsEngine);\r\n        if (sections.camera)\r\n            this.cameraEngine.applySettings(settingsEngine);\r\n        if (sections.postprocessing)\r\n            this.postProcessingManager.applySettings(settingsEngine);\r\n        // call adjust camera to load the three.js camera objects\r\n        this.cameraManager.adjustCamera(1);\r\n        (_a = this._stateEngine.viewportEngines[this.id]) === null || _a === void 0 ? void 0 : _a.settingsAssigned.resolve(true);\r\n        if (updateViewport)\r\n            this.update('RenderingEngine.applySyncSettings');\r\n    }\r\n}\r\nexports.RenderingEngine = RenderingEngine;\r\n_RenderingEngine_defaultLogo = new WeakMap(), _RenderingEngine_defaultLogoStatic = new WeakMap(), _RenderingEngine_defaultSpinner = new WeakMap(), _RenderingEngine_animations = new WeakMap(), _RenderingEngine_flags = new WeakMap();\r\n//# sourceMappingURL=RenderingEngine.js.map"],"names":[],"sourceRoot":""}