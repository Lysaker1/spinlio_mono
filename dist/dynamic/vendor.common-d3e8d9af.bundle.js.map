{"version":3,"file":"vendor.common-d3e8d9af.bundle.js","mappings":";;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB,GAAG,+BAA+B,GAAG,gBAAgB,GAAG,eAAe,GAAG,uBAAuB,GAAG,gBAAgB,GAAG,kBAAkB,GAAG,oBAAoB,GAAG,oBAAoB,GAAG,oBAAoB,GAAG,oBAAoB,GAAG,oBAAoB,GAAG,oBAAoB,GAAG,kBAAkB,GAAG,kBAAkB,GAAG,kBAAkB;AACvW,mBAAmB,mBAAO,CAAC,KAAwB;AACnD,8CAA6C,EAAE,qCAAqC,+BAA+B,EAAC;AACpH,oBAAoB,mBAAO,CAAC,KAAyB;AACrD,mBAAmB,mBAAO,CAAC,KAAwB;AACnD,8CAA6C,EAAE,qCAAqC,+BAA+B,EAAC;AACpH,oBAAoB,mBAAO,CAAC,KAAyB;AACrD,oBAAoB,mBAAO,CAAC,KAAyB;AACrD,mBAAmB,mBAAO,CAAC,KAAwB;AACnD,8CAA6C,EAAE,qCAAqC,+BAA+B,EAAC;AACpH,oBAAoB,mBAAO,CAAC,IAAyB;AACrD,oBAAoB,mBAAO,CAAC,KAAyB;AACrD,mBAAmB,mBAAO,CAAC,KAA0B;AACrD,gDAA+C,EAAE,qCAAqC,+BAA+B,EAAC;AACtH,oBAAoB,mBAAO,CAAC,KAA2B;AACvD,oBAAoB,mBAAO,CAAC,KAA2B;AACvD,mBAAmB,mBAAO,CAAC,KAA0B;AACrD,gDAA+C,EAAE,qCAAqC,+BAA+B,EAAC;AACtH,oBAAoB,mBAAO,CAAC,KAA2B;AACvD,oBAAoB,mBAAO,CAAC,KAA2B;AACvD,mBAAmB,mBAAO,CAAC,KAA0B;AACrD,gDAA+C,EAAE,qCAAqC,+BAA+B,EAAC;AACtH,oBAAoB,mBAAO,CAAC,KAA2B;AACvD,oBAAoB,mBAAO,CAAC,KAA2B;AACvD,mBAAmB,mBAAO,CAAC,KAA0B;AACrD,gDAA+C,EAAE,qCAAqC,+BAA+B,EAAC;AACtH,oBAAoB,mBAAO,CAAC,KAA2B;AACvD,oBAAoB,mBAAO,CAAC,KAA2B;AACvD,mBAAmB,mBAAO,CAAC,KAA0B;AACrD,gDAA+C,EAAE,qCAAqC,+BAA+B,EAAC;AACtH,oBAAoB,mBAAO,CAAC,KAA2B;AACvD,oBAAoB,mBAAO,CAAC,KAA2B;AACvD,mBAAmB,mBAAO,CAAC,KAA0B;AACrD,gDAA+C,EAAE,qCAAqC,+BAA+B,EAAC;AACtH,oBAAoB,mBAAO,CAAC,KAA2B;AACvD,oBAAoB,mBAAO,CAAC,KAA2B;AACvD,oBAAoB,mBAAO,CAAC,KAAwB;AACpD,8CAA6C,EAAE,qCAAqC,gCAAgC,EAAC;AACrH,4CAA2C,EAAE,qCAAqC,gCAAgC,EAAC;AACnH,qBAAqB,mBAAO,CAAC,KAAyB;AACtD,oBAAoB,mBAAO,CAAC,KAAyB;AACrD,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,yDAAyD,wCAAwC;AACjG,0DAA0D,2CAA2C;AACrG;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,YAAY;AAC1C;AACA;AACA;AACA,kCAAkC,aAAa;AAC/C;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,4DAA4D,wCAAwC;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,2CAA2C;AACvG;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,8EAA8E;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,8EAA8E;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,qBAAqB;AACrB;;;;;;;AC9Ma;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C,sBAAsB,kBAAkB;AACxC,SAAS;AACT;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C,sBAAsB,kBAAkB;AACxC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;;;;;;ACtDa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB,cAAc,mBAAO,CAAC,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,+DAA+D;AACnG,mCAAmC,+DAA+D;AAClG,iCAAiC,+DAA+D;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,2BAA2B,gGAAgG,uCAAuC,gGAAgG,cAAc;AAC7S;AACA;AACA,kCAAkC,2BAA2B,gGAAgG,uCAAuC,gGAAgG,cAAc;AAClT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;;;;;;AC9Ea;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB,GAAG,2BAA2B;AACvD,mBAAmB,mBAAO,CAAC,KAAgB;AAC3C,mBAAmB,mBAAO,CAAC,KAAY;AACvyBAAyB;AACzB;;;;;;;ACrLa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,4BAA4B;AAC5B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,kBAAkB;AAC9D,0CAA0C,kBAAkB;AAC5D,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB;AACA;AACA,4CAA4C,kBAAkB;AAC9D,0CAA0C,kBAAkB;AAC5D,6BAA6B;AAC7B,yBAAyB;AACzB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ,uCAAuC,WAAW,4BAA4B,WAAW,4BAA4B,GAAG;AACrK;AACA;AACA;AACA;AACA;AACA,+CAA+C,0CAA0C;AACzF,+CAA+C,uCAAuC;AACtF,qCAAqC;AACrC;AACA,kDAAkD,kBAAkB;AACpE;AACA,qCAAqC;AACrC,iCAAiC;AACjC;AACA;AACA,+CAA+C,0CAA0C;AACzF,+CAA+C,uCAAuC;AACtF,qCAAqC;AACrC;AACA,kDAAkD,kBAAkB;AACpE;AACA,qCAAqC;AACrC,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;AACA;AACA,yBAAyB;AACzB,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ,uCAAuC,WAAW,4BAA4B,WAAW,8BAA8B;AACpK;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;;;;;;ACpKa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB,cAAc,mBAAO,CAAC,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,+DAA+D;AACnG,mCAAmC,+DAA+D;AAClG,iCAAiC,+DAA+D;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,2BAA2B,+DAA+D,4BAA4B,+DAA+D,GAAG;AAC1O;AACA;AACA,qBAAqB;AACrB;AACA,kDAAkD,2BAA2B,+DAA+D,4BAA4B,+DAA+D,GAAG;AAC1O,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,uBAAuB,+FAA+F,2BAA2B,yEAAyE,2BAA2B,yEAAyE,IAAI;AAClX;AACA;AACA;AACA;AACA,uDAAuD,sBAAsB,gGAAgG,yBAAyB,gGAAgG,GAAG;AACzS,yDAAyD,yBAAyB,+DAA+D,wCAAwC;AACzL,6BAA6B;AAC7B;AACA,uDAAuD,sBAAsB,gGAAgG,yBAAyB,gGAAgG,GAAG;AACzS,yDAAyD,yBAAyB,+DAA+D,wCAAwC;AACzL,6BAA6B;AAC7B,uDAAuD,8JAA8J;AACrN,mDAAmD,yEAAyE;AAC5H,yBAAyB;AACzB;AACA;AACA;AACA,qBAAqB;AACrB,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA,gDAAgD,uBAAuB,+FAA+F,2BAA2B,yEAAyE,2BAA2B,yEAAyE,IAAI;AAClX;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;;;;;;ACxKa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB,GAAG,2BAA2B;AACvD,mBAAmB,mBAAO,CAAC,KAAgB;AAC3C,mBAAmB,mBAAO,CAAC,KAAY;AACvC,eAAe,mBAAO,CAAC,KAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gDAAgD;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oDAAoD;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wGAAwG,OAAO,2HAA2H,SAAS,8HAA8H,IAAI,OAAO,0CAA0C,SAAS,uCAAuC;AACtd,kGAAkG,OAAO,qHAAqH,SAAS,wHAAwH,IAAI,OAAO,0CAA0C,SAAS,uCAAuC;AACpc,4GAA4G,UAAU,0IAA0I,oDAAoD,IAAI,UAAU,kBAAkB;AACpV,sGAAsG,UAAU,oIAAoI,kDAAkD,IAAI,UAAU,kBAAkB;AACtU,kEAAkE,0OAA0O,IAAI;AAChT,0DAA0D,iGAAiG,IAAI;AAC/J,+BAA+B,YAAY,mEAAmE,YAAY,+DAA+D;AACzL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uFAAuF;AACpI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,oFAAoF;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,oFAAoF;AAChI,0CAA0C,8EAA8E;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF;AACtF,oFAAoF;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,mCAAmC,mJAAmJ;AACtL,mCAAmC;AACnC,yBAAyB;AACzB;AACA,sCAAsC,kKAAkK;AACxM;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA,mCAAmC,6IAA6I;AAChL,mCAAmC;AACnC,yBAAyB;AACzB;AACA,sCAAsC,4JAA4J;AAClM;AACA,yBAAyB;AACzB,qBAAqB;AACrB,gCAAgC,wQAAwQ;AACxS,4BAA4B,gHAAgH;AAC5I,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF;AACvF,qFAAqF;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,uFAAuF;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,oFAAoF;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,oFAAoF;AAC5H,sCAAsC,8EAA8E;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,6BAA6B;AACpE;AACA,gEAAgE,kBAAkB;AAClF;AACA;AACA,yBAAyB;AACzB;;;;;;;ACniBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uBAAuB;AACvB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yBAAyB,kBAAkB;AAC3C,+BAA+B,kBAAkB;AACjD,4BAA4B;AAC5B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mBAAmB;AACnB;AACA;AACA,gBAAgB;AAChB;;;;;;;ACtDa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB,cAAc,mBAAO,CAAC,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB,+FAA+F,2BAA2B,yEAAyE,2BAA2B,yEAAyE,IAAI;AAC9V;AACA;AACA;AACA;AACA,mCAAmC,sBAAsB,gGAAgG,yBAAyB,gGAAgG,GAAG;AACrR,qCAAqC,yBAAyB,+DAA+D,wCAAwC;AACrK,SAAS;AACT;AACA,mCAAmC,sBAAsB,gGAAgG,yBAAyB,gGAAgG,GAAG;AACrR,qCAAqC,yBAAyB,+DAA+D,wCAAwC;AACrK,SAAS;AACT,mCAAmC,8JAA8J;AACjM,+BAA+B,yEAAyE;AACxG,KAAK;AACL;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB,+FAA+F,2BAA2B,yEAAyE,2BAA2B,yEAAyE,IAAI;AAC9V;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gGAAgG;AAC/H;AACA;AACA,6BAA6B,gGAAgG;AAC7H;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gGAAgG;AAC/H;AACA;AACA,6BAA6B,gGAAgG;AAC7H;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,gCAAgC,+DAA+D;AAC/F;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,+BAA+B,+DAA+D;AAC9F;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,+BAA+B,+DAA+D;AAC9F,6BAA6B,+DAA+D;AAC5F;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,oCAAoC,+DAA+D;AACnG,0CAA0C,+DAA+D;AACzG,uCAAuC,+DAA+D;AACtG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;;;;;;AC1Ka;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB,GAAG,2BAA2B;AACvD,mBAAmB,mBAAO,CAAC,KAAgB;AAC3C,mBAAmB,mBAAO,CAAC,KAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;;;;;;ACjEa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uBAAuB;AACvB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yBAAyB,kBAAkB;AAC3C,+BAA+B,kBAAkB;AACjD,4BAA4B;AAC5B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mBAAmB;AACnB;AACA;AACA,gBAAgB;AAChB;;;;;;;AC7Da;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB,cAAc,mBAAO,CAAC,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB,+FAA+F,2BAA2B,yEAAyE,2BAA2B,yEAAyE,IAAI;AAC9V;AACA;AACA;AACA;AACA,mCAAmC,sBAAsB,gGAAgG,yBAAyB,gGAAgG,GAAG;AACrR,qCAAqC,yBAAyB,+DAA+D,wCAAwC;AACrK,SAAS;AACT;AACA,mCAAmC,sBAAsB,gGAAgG,yBAAyB,gGAAgG,GAAG;AACrR,qCAAqC,yBAAyB,+DAA+D,wCAAwC;AACrK,SAAS;AACT,mCAAmC,8JAA8J;AACjM,+BAA+B,yEAAyE;AACxG,KAAK;AACL;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB,+FAA+F,2BAA2B,yEAAyE,2BAA2B,yEAAyE,IAAI;AAC9V;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gGAAgG;AAC/H;AACA;AACA,6BAA6B,gGAAgG;AAC7H;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gGAAgG;AAC/H;AACA;AACA,6BAA6B,gGAAgG;AAC7H;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,gCAAgC,+DAA+D;AAC/F;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,+BAA+B,+DAA+D;AAC9F;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,+BAA+B,+DAA+D;AAC9F,6BAA6B,+DAA+D;AAC5F;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,oCAAoC,+DAA+D;AACnG,0CAA0C,+DAA+D;AACzG,uCAAuC,+DAA+D;AACtG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;;;;;;ACjLa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB,GAAG,2BAA2B;AACvD,mBAAmB,mBAAO,CAAC,KAAkB;AAC7C,mBAAmB,mBAAO,CAAC,KAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;;;;;;ACrEa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uBAAuB;AACvB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yBAAyB,kBAAkB;AAC3C,+BAA+B,kBAAkB;AACjD,4BAA4B;AAC5B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mBAAmB;AACnB;AACA;AACA,gBAAgB;AAChB;;;;;;;AChEa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB,cAAc,mBAAO,CAAC,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB,+FAA+F,2BAA2B,yEAAyE,2BAA2B,yEAAyE,IAAI;AAC9V;AACA;AACA;AACA;AACA,mCAAmC,sBAAsB,gGAAgG,yBAAyB,gGAAgG,GAAG;AACrR,qCAAqC,yBAAyB,+DAA+D,wCAAwC;AACrK,SAAS;AACT;AACA,mCAAmC,sBAAsB,gGAAgG,yBAAyB,gGAAgG,GAAG;AACrR,qCAAqC,yBAAyB,+DAA+D,wCAAwC;AACrK,SAAS;AACT,mCAAmC,8JAA8J;AACjM,+BAA+B,yEAAyE;AACxG,KAAK;AACL;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB,+FAA+F,2BAA2B,yEAAyE,2BAA2B,yEAAyE,IAAI;AAC9V;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gGAAgG;AAC/H;AACA;AACA,6BAA6B,gGAAgG;AAC7H;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gGAAgG;AAC/H;AACA;AACA,6BAA6B,gGAAgG;AAC7H;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,gCAAgC,+DAA+D;AAC/F;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,+BAA+B,+DAA+D;AAC9F;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,+BAA+B,+DAA+D;AAC9F,6BAA6B,+DAA+D;AAC5F;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,oCAAoC,+DAA+D;AACnG,0CAA0C,+DAA+D;AACzG,uCAAuC,+DAA+D;AACtG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;;;;;;ACpLa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB,GAAG,2BAA2B;AACvD,mBAAmB,mBAAO,CAAC,KAAkB;AAC7C,mBAAmB,mBAAO,CAAC,KAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;;;;;;ACxDa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uBAAuB;AACvB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yBAAyB,kBAAkB;AAC3C,+BAA+B,kBAAkB;AACjD,4BAA4B;AAC5B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mBAAmB;AACnB;AACA;AACA,gBAAgB;AAChB;;;;;;;ACjEa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB,cAAc,mBAAO,CAAC,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB,+FAA+F,2BAA2B,yEAAyE,2BAA2B,yEAAyE,IAAI;AAC9V;AACA;AACA;AACA;AACA,mCAAmC,sBAAsB,gGAAgG,yBAAyB,gGAAgG,GAAG;AACrR,qCAAqC,yBAAyB,+DAA+D,wCAAwC;AACrK,SAAS;AACT;AACA,mCAAmC,sBAAsB,gGAAgG,yBAAyB,gGAAgG,GAAG;AACrR,qCAAqC,yBAAyB,+DAA+D,wCAAwC;AACrK,SAAS;AACT,mCAAmC,8JAA8J;AACjM,+BAA+B,yEAAyE;AACxG,KAAK;AACL;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB,+FAA+F,2BAA2B,yEAAyE,2BAA2B,yEAAyE,IAAI;AAC9V;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gGAAgG;AAC/H;AACA;AACA,6BAA6B,gGAAgG;AAC7H;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gGAAgG;AAC/H;AACA;AACA,6BAA6B,gGAAgG;AAC7H;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,gCAAgC,+DAA+D;AAC/F;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,+BAA+B,+DAA+D;AAC9F;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,+BAA+B,+DAA+D;AAC9F,6BAA6B,+DAA+D;AAC5F;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,oCAAoC,+DAA+D;AACnG,0CAA0C,+DAA+D;AACzG,uCAAuC,+DAA+D;AACtG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;;;;;;ACrLa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB,GAAG,2BAA2B;AACvD,mBAAmB,mBAAO,CAAC,KAAkB;AAC7C,mBAAmB,mBAAO,CAAC,KAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;;;;;;AC3Da;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uBAAuB;AACvB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yBAAyB,kBAAkB;AAC3C,+BAA+B,kBAAkB;AACjD,4BAA4B;AAC5B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mBAAmB;AACnB;AACA;AACA,gBAAgB;AAChB;;;;;;;ACrEa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB,cAAc,mBAAO,CAAC,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB,+FAA+F,2BAA2B,yEAAyE,2BAA2B,yEAAyE,IAAI;AAC9V;AACA;AACA;AACA;AACA,mCAAmC,sBAAsB,gGAAgG,yBAAyB,gGAAgG,GAAG;AACrR,qCAAqC,yBAAyB,+DAA+D,wCAAwC;AACrK,SAAS;AACT;AACA,mCAAmC,sBAAsB,gGAAgG,yBAAyB,gGAAgG,GAAG;AACrR,qCAAqC,yBAAyB,+DAA+D,wCAAwC;AACrK,SAAS;AACT,mCAAmC,8JAA8J;AACjM,+BAA+B,yEAAyE;AACxG,KAAK;AACL;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB,+FAA+F,2BAA2B,yEAAyE,2BAA2B,yEAAyE,IAAI;AAC9V;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gGAAgG;AAC/H;AACA;AACA,6BAA6B,gGAAgG;AAC7H;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gGAAgG;AAC/H;AACA;AACA,6BAA6B,gGAAgG;AAC7H;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,gCAAgC,+DAA+D;AAC/F;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,+BAA+B,+DAA+D;AAC9F;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,+BAA+B,+DAA+D;AAC9F,6BAA6B,+DAA+D;AAC5F;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oFAAoF;AACvH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,oCAAoC,+DAA+D;AACnG,0CAA0C,+DAA+D;AACzG,uCAAuC,+DAA+D;AACtG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;;;;;;ACzLa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB,GAAG,2BAA2B;AACvD,mBAAmB,mBAAO,CAAC,KAAkB;AAC7C,mBAAmB,mBAAO,CAAC,KAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;;;;;;ACzDa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uBAAuB;AACvB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yBAAyB,kBAAkB;AAC3C,+BAA+B,kBAAkB;AACjD,4BAA4B;AAC5B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mBAAmB;AACnB;AACA;AACA,gBAAgB;AAChB;;;;;;;AC3Ea;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB,cAAc,mBAAO,CAAC,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB,+FAA+F,2BAA2B,yEAAyE,2BAA2B,yEAAyE,IAAI;AAC9V;AACA;AACA;AACA;AACA,mCAAmC,sBAAsB,gGAAgG,yBAAyB,gGAAgG,GAAG;AACrR,qCAAqC,yBAAyB,+DAA+D,wCAAwC;AACrK,SAAS;AACT;AACA,mCAAmC,sBAAsB,gGAAgG,yBAAyB,gGAAgG,GAAG;AACrR,qCAAqC,yBAAyB,+DAA+D,wCAAwC;AACrK,SAAS;AACT,mCAAmC,8JAA8J;AACjM,+BAA+B,yEAAyE;AACxG,KAAK;AACL;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB,+FAA+F,2BAA2B,yEAAyE,2BAA2B,yEAAyE,IAAI;AAC9V;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gGAAgG;AAC/H;AACA;AACA,6BAA6B,gGAAgG;AAC7H;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gGAAgG;AAC/H;AACA;AACA,6BAA6B,gGAAgG;AAC7H;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,gCAAgC,+DAA+D;AAC/F;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,+BAA+B,+DAA+D;AAC9F;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,+BAA+B,+DAA+D;AAC9F,6BAA6B,+DAA+D;AAC5F;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,iCAAiC,0CAA0C;AAC3E;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oFAAoF;AACvH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,oCAAoC,+DAA+D;AACnG,0CAA0C,+DAA+D;AACzG,uCAAuC,+DAA+D;AACtG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;;;;;;ACnUa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB,GAAG,2BAA2B;AACvD,mBAAmB,mBAAO,CAAC,KAAkB;AAC7C,mBAAmB,mBAAO,CAAC,KAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;;;;;;AC9Ca;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uBAAuB;AACvB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yBAAyB,kBAAkB;AAC3C,+BAA+B,kBAAkB;AACjD,4BAA4B;AAC5B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mBAAmB;AACnB;AACA;AACA,gBAAgB;AAChB;;;;;;;AC9Fa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB,oBAAoB,mBAAO,CAAC,KAAmB;AAC/C,4CAA2C,EAAE,qCAAqC,gCAAgC,EAAC;AACnH;;;;;;;ACLa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB,GAAG,2BAA2B;AACvD,mBAAmB,mBAAO,CAAC,KAAkB;AAC7C,mBAAmB,mBAAO,CAAC,KAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,kBAAkB;AAC9D,uCAAuC,kBAAkB;AACzD,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,YAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,kBAAkB;AAC9D;AACA;AACA,oCAAoC,OAAO,0CAA0C,SAAS,yCAAyC;AACvI,sCAAsC,UAAU,kBAAkB,oBAAoB;AACtF,yBAAyB;AACzB,oCAAoC,6FAA6F;AACjI;AACA,oCAAoC,OAAO,0CAA0C,SAAS,yCAAyC;AACvI,sCAAsC,UAAU,kBAAkB,oBAAoB;AACtF,yBAAyB;AACzB,gCAAgC,uCAAuC;AACvE,qBAAqB;AACrB;AACA,uCAAuC,kBAAkB;AACzD,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,YAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;;;;;;ACjMa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uBAAuB;AACvB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yBAAyB,kBAAkB;AAC3C,+BAA+B,kBAAkB;AACjD,4BAA4B;AAC5B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mBAAmB;AACnB;AACA;AACA,gBAAgB;AAChB;;;;;;;AC9Fa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB,cAAc,mBAAO,CAAC,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB,+FAA+F,2BAA2B,yEAAyE,2BAA2B,yEAAyE,IAAI;AAC9V;AACA;AACA;AACA;AACA,mCAAmC,sBAAsB,gGAAgG,yBAAyB,gGAAgG,GAAG;AACrR,qCAAqC,yBAAyB,+DAA+D,wCAAwC;AACrK,SAAS;AACT;AACA,mCAAmC,sBAAsB,gGAAgG,yBAAyB,gGAAgG,GAAG;AACrR,qCAAqC,yBAAyB,+DAA+D,wCAAwC;AACrK,SAAS;AACT,mCAAmC,8JAA8J;AACjM,+BAA+B,yEAAyE;AACxG,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,+DAA+D;AAC1G,sCAAsC,+DAA+D;AACrG,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gGAAgG;AAC/H;AACA;AACA,6BAA6B,gGAAgG;AAC7H;AACA,oCAAoC,0CAA0C;AAC9E,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,gCAAgC,+DAA+D;AAC/F;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,+BAA+B,+DAA+D;AAC9F;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,+BAA+B,+DAA+D;AAC9F,6BAA6B,+DAA+D;AAC5F;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,iCAAiC,0CAA0C;AAC3E;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oFAAoF;AACvH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,oCAAoC,+DAA+D;AACnG,0CAA0C,+DAA+D;AACzG,uCAAuC,+DAA+D;AACtG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA,gBAAgB;AAChB","sources":["webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/index.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v1/Defaults.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v1/Validator.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v2/Converter.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v2/Defaults.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v2/Validator.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v3/Converter.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v3/Defaults.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v3/Validator.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v3_1/Converter.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v3_1/Defaults.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v3_1/Validator.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v3_2/Converter.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v3_2/Defaults.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v3_2/Validator.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v3_3/Converter.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v3_3/Defaults.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v3_3/Validator.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v3_4/Converter.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v3_4/Defaults.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v3_4/Validator.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v4_0/Converter.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v4_0/Defaults.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v4_0/Validator.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v4_1/Converter.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v4_1/Defaults.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v4_1/Validator.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v5/Converter.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v5/Defaults.js","webpack://spinlio-workspace/./node_modules/@shapediver/viewer.settings/dist/versions/v5/Validator.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.latestVersion = exports.evaluateSettingsVersion = exports.validate = exports.convert = exports.previousVersion = exports.Defaults = exports.DefaultsV5 = exports.DefaultsV4_1 = exports.DefaultsV4_0 = exports.DefaultsV3_4 = exports.DefaultsV3_3 = exports.DefaultsV3_2 = exports.DefaultsV3_1 = exports.DefaultsV3 = exports.DefaultsV2 = exports.DefaultsV1 = void 0;\r\nconst Defaults_1 = require(\"./versions/v1/Defaults\");\r\nObject.defineProperty(exports, \"DefaultsV1\", { enumerable: true, get: function () { return Defaults_1.Defaults; } });\r\nconst Validator_1 = require(\"./versions/v1/Validator\");\r\nconst Defaults_2 = require(\"./versions/v2/Defaults\");\r\nObject.defineProperty(exports, \"DefaultsV2\", { enumerable: true, get: function () { return Defaults_2.Defaults; } });\r\nconst Validator_2 = require(\"./versions/v2/Validator\");\r\nconst Converter_1 = require(\"./versions/v2/Converter\");\r\nconst Defaults_3 = require(\"./versions/v3/Defaults\");\r\nObject.defineProperty(exports, \"DefaultsV3\", { enumerable: true, get: function () { return Defaults_3.Defaults; } });\r\nconst Validator_3 = require(\"./versions/v3/Validator\");\r\nconst Converter_2 = require(\"./versions/v3/Converter\");\r\nconst Defaults_4 = require(\"./versions/v3_1/Defaults\");\r\nObject.defineProperty(exports, \"DefaultsV3_1\", { enumerable: true, get: function () { return Defaults_4.Defaults; } });\r\nconst Validator_4 = require(\"./versions/v3_1/Validator\");\r\nconst Converter_3 = require(\"./versions/v3_1/Converter\");\r\nconst Defaults_5 = require(\"./versions/v3_2/Defaults\");\r\nObject.defineProperty(exports, \"DefaultsV3_2\", { enumerable: true, get: function () { return Defaults_5.Defaults; } });\r\nconst Validator_5 = require(\"./versions/v3_2/Validator\");\r\nconst Converter_4 = require(\"./versions/v3_2/Converter\");\r\nconst Defaults_6 = require(\"./versions/v3_3/Defaults\");\r\nObject.defineProperty(exports, \"DefaultsV3_3\", { enumerable: true, get: function () { return Defaults_6.Defaults; } });\r\nconst Validator_6 = require(\"./versions/v3_3/Validator\");\r\nconst Converter_5 = require(\"./versions/v3_3/Converter\");\r\nconst Defaults_7 = require(\"./versions/v3_4/Defaults\");\r\nObject.defineProperty(exports, \"DefaultsV3_4\", { enumerable: true, get: function () { return Defaults_7.Defaults; } });\r\nconst Validator_7 = require(\"./versions/v3_4/Validator\");\r\nconst Converter_6 = require(\"./versions/v3_4/Converter\");\r\nconst Defaults_8 = require(\"./versions/v4_0/Defaults\");\r\nObject.defineProperty(exports, \"DefaultsV4_0\", { enumerable: true, get: function () { return Defaults_8.Defaults; } });\r\nconst Validator_8 = require(\"./versions/v4_0/Validator\");\r\nconst Converter_7 = require(\"./versions/v4_0/Converter\");\r\nconst Defaults_9 = require(\"./versions/v4_1/Defaults\");\r\nObject.defineProperty(exports, \"DefaultsV4_1\", { enumerable: true, get: function () { return Defaults_9.Defaults; } });\r\nconst Validator_9 = require(\"./versions/v4_1/Validator\");\r\nconst Converter_8 = require(\"./versions/v4_1/Converter\");\r\nconst Defaults_10 = require(\"./versions/v5/Defaults\");\r\nObject.defineProperty(exports, \"DefaultsV5\", { enumerable: true, get: function () { return Defaults_10.Defaults; } });\r\nObject.defineProperty(exports, \"Defaults\", { enumerable: true, get: function () { return Defaults_10.Defaults; } });\r\nconst Validator_10 = require(\"./versions/v5/Validator\");\r\nconst Converter_9 = require(\"./versions/v5/Converter\");\r\nexports.previousVersion = ['1.0', '2.0', '3.0', '3.1', '3.2', '3.3', '3.4', '4.0', '4.1'];\r\nlet settingsUtilities = [];\r\nsettingsUtilities.push({\r\n    version: '1.0',\r\n    defaults: Defaults_1.Defaults,\r\n    convertToPrevious: s => s,\r\n    convertFromPrevious: s => s,\r\n    validate: Validator_1.validate\r\n});\r\nsettingsUtilities.push({\r\n    version: '2.0',\r\n    defaults: Defaults_2.Defaults,\r\n    convertToPrevious: Converter_1.convertToPrevious,\r\n    convertFromPrevious: Converter_1.convertFromPrevious,\r\n    validate: Validator_2.validate\r\n});\r\nsettingsUtilities.push({\r\n    version: '3.0',\r\n    defaults: Defaults_3.Defaults,\r\n    convertToPrevious: Converter_2.convertToPrevious,\r\n    convertFromPrevious: Converter_2.convertFromPrevious,\r\n    validate: Validator_3.validate\r\n});\r\nsettingsUtilities.push({\r\n    version: '3.1',\r\n    defaults: Defaults_4.Defaults,\r\n    convertToPrevious: Converter_3.convertToPrevious,\r\n    convertFromPrevious: Converter_3.convertFromPrevious,\r\n    validate: Validator_4.validate\r\n});\r\nsettingsUtilities.push({\r\n    version: '3.2',\r\n    defaults: Defaults_5.Defaults,\r\n    convertToPrevious: Converter_4.convertToPrevious,\r\n    convertFromPrevious: Converter_4.convertFromPrevious,\r\n    validate: Validator_5.validate\r\n});\r\nsettingsUtilities.push({\r\n    version: '3.3',\r\n    defaults: Defaults_6.Defaults,\r\n    convertToPrevious: Converter_5.convertToPrevious,\r\n    convertFromPrevious: Converter_5.convertFromPrevious,\r\n    validate: Validator_6.validate\r\n});\r\nsettingsUtilities.push({\r\n    version: '3.4',\r\n    defaults: Defaults_7.Defaults,\r\n    convertToPrevious: Converter_6.convertToPrevious,\r\n    convertFromPrevious: Converter_6.convertFromPrevious,\r\n    validate: Validator_7.validate\r\n});\r\nsettingsUtilities.push({\r\n    version: '4.0',\r\n    defaults: Defaults_8.Defaults,\r\n    convertToPrevious: Converter_7.convertToPrevious,\r\n    convertFromPrevious: Converter_7.convertFromPrevious,\r\n    validate: Validator_8.validate\r\n});\r\nsettingsUtilities.push({\r\n    version: '4.1',\r\n    defaults: Defaults_9.Defaults,\r\n    convertToPrevious: Converter_8.convertToPrevious,\r\n    convertFromPrevious: Converter_8.convertFromPrevious,\r\n    validate: Validator_9.validate\r\n});\r\nsettingsUtilities.push({\r\n    version: '5.0',\r\n    defaults: Defaults_10.Defaults,\r\n    convertToPrevious: Converter_9.convertToPrevious,\r\n    convertFromPrevious: Converter_9.convertFromPrevious,\r\n    validate: Validator_10.validate\r\n});\r\nconst convert = (settings, targetVersion) => {\r\n    const original_version = settings.settings_version || '1.0';\r\n    if (original_version === targetVersion)\r\n        return settings;\r\n    const target = settingsUtilities.findIndex(util => { return util.version === targetVersion; });\r\n    const current = settingsUtilities.findIndex(util => { return util.version === original_version; });\r\n    if (target === -1)\r\n        throw new Error('ViewerSettings.convert: Target version not available');\r\n    if (current === -1)\r\n        throw new Error('ViewerSettings.convert: Settings version not available');\r\n    let tempSettings = settings;\r\n    if (target < current) {\r\n        for (let i = current; target < i; i--)\r\n            tempSettings = settingsUtilities[i].convertToPrevious(tempSettings, original_version);\r\n    }\r\n    else {\r\n        for (let i = current + 1; i <= target; i++)\r\n            tempSettings = settingsUtilities[i].convertFromPrevious(tempSettings, original_version);\r\n    }\r\n    return tempSettings;\r\n};\r\nexports.convert = convert;\r\nconst validate = (settings, targetVersion) => {\r\n    const settings_version = settings.settings_version || '1.0';\r\n    if (targetVersion !== undefined) {\r\n        const index = settingsUtilities.findIndex(util => { return util.version === targetVersion; });\r\n        if (index === -1)\r\n            throw new Error('ViewerSettings.validate: Target version was not found.');\r\n        if (settings_version !== undefined && settings_version !== targetVersion)\r\n            throw new Error('ViewerSettings.validate: The settings do have a different version than the target version.');\r\n        settingsUtilities[index].validate(settings);\r\n    }\r\n    else {\r\n        if (!settings_version)\r\n            throw new Error('ViewerSettings.validate: Settings do not have a version specified.');\r\n        const index = settingsUtilities.findIndex(util => { return util.version === settings_version; });\r\n        settingsUtilities[index].validate(settings);\r\n    }\r\n};\r\nexports.validate = validate;\r\nconst evaluateSettingsVersion = (viewerVersion) => {\r\n    if (!viewerVersion || viewerVersion.startsWith('1'))\r\n        return '1.0';\r\n    if (viewerVersion.startsWith('2')) {\r\n        const upgradeVersions = viewerVersion\r\n            .split('.')\r\n            .map(item => { var _a; return (_a = item.match(/^\\d+/)) === null || _a === void 0 ? void 0 : _a[0]; })\r\n            .filter(Boolean)\r\n            .map(match => parseInt(match));\r\n        if (upgradeVersions[1] >= 18) {\r\n            return '2.0';\r\n        }\r\n        else {\r\n            return '1.0';\r\n        }\r\n    }\r\n    if (viewerVersion.startsWith('3')) {\r\n        const upgradeVersions = viewerVersion\r\n            .split('.')\r\n            .map(item => { var _a; return (_a = item.match(/^\\d+/)) === null || _a === void 0 ? void 0 : _a[0]; })\r\n            .filter(Boolean)\r\n            .map(match => parseInt(match));\r\n        if (upgradeVersions[1] >= 3) {\r\n            return '5.0';\r\n        }\r\n        else if ((upgradeVersions[1] === 2 && upgradeVersions[2] >= 11) || upgradeVersions[1] > 2) {\r\n            return '4.1';\r\n        }\r\n        else if ((upgradeVersions[1] === 2 && upgradeVersions[2] >= 10) || upgradeVersions[1] > 2) {\r\n            return '4.0';\r\n        }\r\n        else if ((upgradeVersions[1] === 2 && upgradeVersions[2] >= 9) || upgradeVersions[1] > 2) {\r\n            return '3.4';\r\n        }\r\n        else if ((upgradeVersions[1] === 2 && upgradeVersions[2] >= 7) || upgradeVersions[1] > 2) {\r\n            return '3.3';\r\n        }\r\n        else if ((upgradeVersions[1] === 2 && upgradeVersions[2] >= 6) || upgradeVersions[1] > 2) {\r\n            return '3.2';\r\n        }\r\n        else if ((upgradeVersions[1] === 1 && upgradeVersions[2] >= 12) || upgradeVersions[1] > 1) {\r\n            return '3.1';\r\n        }\r\n        else {\r\n            return '3.0';\r\n        }\r\n    }\r\n    return '1.0';\r\n};\r\nexports.evaluateSettingsVersion = evaluateSettingsVersion;\r\nexports.latestVersion = '5.0';\r\n//# sourceMappingURL=index.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Defaults = void 0;\r\nconst Defaults = () => {\r\n    return {\r\n        build_date: '',\r\n        build_version: '',\r\n        settings_version: '1.0',\r\n        ambientOcclusion: true,\r\n        autoRotateSpeed: 0.0,\r\n        backgroundColor: '#ffffff',\r\n        bumpAmplitude: 1.0,\r\n        camera: {\r\n            position: { x: 0, y: 0, z: 0 },\r\n            target: { x: 0, y: 0, z: 0 },\r\n        },\r\n        cameraAutoAdjust: false,\r\n        cameraMovementDuration: 0,\r\n        cameraOrtho: {\r\n            position: { x: 0, y: 0, z: 0 },\r\n            target: { x: 0, y: 0, z: 0 },\r\n        },\r\n        cameraRevertAtMouseUp: false,\r\n        clearAlpha: 1.0,\r\n        clearColor: '#ffffff',\r\n        commitParameters: false,\r\n        controlDamping: 0.1,\r\n        controlNames: {},\r\n        controlOrder: [],\r\n        defaultMaterialColor: '#d3d3d3',\r\n        disablePan: false,\r\n        disableZoom: false,\r\n        enableAutoRotation: false,\r\n        enableRotation: true,\r\n        environmentMap: 'none',\r\n        environmentMapResolution: '1024',\r\n        fov: 45,\r\n        lightScene: 'default',\r\n        lightScenes: null,\r\n        panSpeed: 0.5,\r\n        parametersHidden: [],\r\n        pointSize: 1.0,\r\n        revertAtMouseUpDuration: 800,\r\n        rotateSpeed: 0.25,\r\n        showEnvironmentMap: false,\r\n        showGrid: false,\r\n        showGroundPlane: false,\r\n        showShadows: true,\r\n        topView: false,\r\n        zoomExtentFactor: 1.0,\r\n        zoomSpeed: 1.0,\r\n    };\r\n};\r\nexports.Defaults = Defaults;\r\n//# sourceMappingURL=Defaults.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.validate = void 0;\r\nconst zod_1 = require(\"zod\");\r\nconst lightSchema = zod_1.z.object({\r\n    id: zod_1.z.string().optional(),\r\n    name: zod_1.z.string().optional(),\r\n    type: zod_1.z.string().optional(),\r\n    properties: zod_1.z.object({\r\n        color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]).optional(),\r\n        direction: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }).optional(),\r\n        position: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }).optional(),\r\n        target: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }).optional(),\r\n        castShadow: zod_1.z.boolean().optional(),\r\n        skyColor: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]).optional(),\r\n        groundColor: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]).optional(),\r\n        intensity: zod_1.z.number().optional(),\r\n        distance: zod_1.z.number().optional(),\r\n        angle: zod_1.z.number().optional(),\r\n        penumbra: zod_1.z.number().optional(),\r\n        decay: zod_1.z.number().optional(),\r\n        shadowMapResolution: zod_1.z.number().optional(),\r\n        shadowMapBias: zod_1.z.number().optional()\r\n    })\r\n}).optional();\r\nconst lightsSchema = zod_1.z.record(lightSchema);\r\nconst lightScenesSchema = zod_1.z.record(zod_1.z.object({\r\n    id: zod_1.z.string(),\r\n    name: zod_1.z.string().optional(),\r\n    lights: lightsSchema\r\n}));\r\nconst schema = zod_1.z.object({\r\n    build_date: zod_1.z.string().optional(),\r\n    build_version: zod_1.z.string().optional(),\r\n    settings_version: zod_1.z.string().optional(),\r\n    ambientOcclusion: zod_1.z.boolean().optional(),\r\n    autoRotateSpeed: zod_1.z.number().optional(),\r\n    backgroundColor: zod_1.z.string().optional(),\r\n    bumpAmplitude: zod_1.z.number().optional(),\r\n    camera: zod_1.z.object({ position: zod_1.z.object({ x: zod_1.z.number().optional(), y: zod_1.z.number().optional(), z: zod_1.z.number().optional() }).optional(), target: zod_1.z.object({ x: zod_1.z.number().optional(), y: zod_1.z.number().optional(), z: zod_1.z.number().optional() }).optional() }).optional(),\r\n    cameraAutoAdjust: zod_1.z.boolean().optional(),\r\n    cameraMovementDuration: zod_1.z.number().optional(),\r\n    cameraOrtho: zod_1.z.object({ position: zod_1.z.object({ x: zod_1.z.number().optional(), y: zod_1.z.number().optional(), z: zod_1.z.number().optional() }).optional(), target: zod_1.z.object({ x: zod_1.z.number().optional(), y: zod_1.z.number().optional(), z: zod_1.z.number().optional() }).optional() }).optional(),\r\n    cameraRevertAtMouseUp: zod_1.z.boolean().optional(),\r\n    clearAlpha: zod_1.z.number().optional(),\r\n    clearColor: zod_1.z.string().optional(),\r\n    commitParameters: zod_1.z.boolean().optional(),\r\n    controlDamping: zod_1.z.number().optional(),\r\n    controlNames: zod_1.z.record(zod_1.z.string()).optional(),\r\n    controlOrder: zod_1.z.string().array().optional(),\r\n    defaultMaterialColor: zod_1.z.union([zod_1.z.string(), zod_1.z.number().array().optional()]),\r\n    disablePan: zod_1.z.boolean().optional(),\r\n    disableZoom: zod_1.z.boolean().optional(),\r\n    enableAutoRotation: zod_1.z.boolean().optional(),\r\n    enableRotation: zod_1.z.boolean().optional(),\r\n    environmentMap: zod_1.z.union([zod_1.z.string(), zod_1.z.string().array().optional()]),\r\n    environmentMapResolution: zod_1.z.string().optional(),\r\n    fov: zod_1.z.number().positive().optional(),\r\n    lightScene: zod_1.z.string().optional(),\r\n    lightScenes: lightScenesSchema.nullable().optional(),\r\n    panSpeed: zod_1.z.number().optional(),\r\n    parametersHidden: zod_1.z.string().array().optional(),\r\n    pointSize: zod_1.z.number().optional(),\r\n    revertAtMouseUpDuration: zod_1.z.number().optional(),\r\n    rotateSpeed: zod_1.z.number().optional(),\r\n    showEnvironmentMap: zod_1.z.boolean().optional(),\r\n    showGrid: zod_1.z.boolean().optional(),\r\n    showGroundPlane: zod_1.z.boolean().optional(),\r\n    showShadows: zod_1.z.boolean().optional(),\r\n    topView: zod_1.z.boolean().optional(),\r\n    zoomExtentFactor: zod_1.z.number().optional(),\r\n    zoomSpeed: zod_1.z.number().optional(),\r\n}).passthrough();\r\nconst validate = (s) => {\r\n    const result = schema.parse(s);\r\n    s = result;\r\n};\r\nexports.validate = validate;\r\n//# sourceMappingURL=Validator.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.convertToPrevious = exports.convertFromPrevious = void 0;\r\nconst Defaults_1 = require(\"../v1/Defaults\");\r\nconst Defaults_2 = require(\"./Defaults\");\r\nconst convertFromPrevious = (s, v) => {\r\n    const settings = Defaults_2.Defaults();\r\n    const oldSettings = s;\r\n    if (oldSettings.clearAlpha !== undefined)\r\n        settings.viewer.scene.render.clearAlpha = oldSettings.clearAlpha;\r\n    if (oldSettings.clearColor !== undefined)\r\n        settings.viewer.scene.render.clearColor = oldSettings.clearColor;\r\n    if (oldSettings.clearAlpha === undefined && oldSettings.clearColor === undefined && oldSettings.backgroundColor !== undefined)\r\n        settings.viewer.scene.render.clearColor = oldSettings.backgroundColor;\r\n    if (oldSettings.defaultMaterialColor !== undefined)\r\n        settings.defaultMaterial.color = oldSettings.defaultMaterialColor;\r\n    settings.build_date = oldSettings.build_date;\r\n    settings.build_version = oldSettings.build_version;\r\n    if (oldSettings.camera !== undefined && oldSettings.camera.position !== undefined && oldSettings.camera.target !== undefined &&\r\n        oldSettings.camera.position.x !== undefined && oldSettings.camera.position.y !== undefined && oldSettings.camera.position.z !== undefined &&\r\n        oldSettings.camera.target.x !== undefined && oldSettings.camera.target.y !== undefined && oldSettings.camera.target.z !== undefined) {\r\n        if (!(oldSettings.camera.position.x === 5 && oldSettings.camera.position.y === 5 && oldSettings.camera.position.z === 5 &&\r\n            oldSettings.camera.target.x === 0 && oldSettings.camera.target.y === 0 && oldSettings.camera.target.z === 0) &&\r\n            !(oldSettings.camera.position.x === 0 && oldSettings.camera.position.y === 0 && oldSettings.camera.position.z === 0 &&\r\n                oldSettings.camera.target.x === 0 && oldSettings.camera.target.y === 0 && oldSettings.camera.target.z === 0)) {\r\n            settings.viewer.scene.camera.cameraTypes.perspective.default.position = oldSettings.camera.position;\r\n            settings.viewer.scene.camera.cameraTypes.perspective.default.target = oldSettings.camera.target;\r\n        }\r\n    }\r\n    if (oldSettings.cameraOrtho !== undefined && oldSettings.cameraOrtho.position !== undefined && oldSettings.cameraOrtho.target !== undefined &&\r\n        oldSettings.cameraOrtho.position.x !== undefined && oldSettings.cameraOrtho.position.y !== undefined && oldSettings.cameraOrtho.position.z !== undefined &&\r\n        oldSettings.cameraOrtho.target.x !== undefined && oldSettings.cameraOrtho.target.y !== undefined && oldSettings.cameraOrtho.target.z !== undefined) {\r\n        if (!(oldSettings.cameraOrtho.position.x === 5 && oldSettings.cameraOrtho.position.y === 5 && oldSettings.cameraOrtho.position.z === 5 &&\r\n            oldSettings.cameraOrtho.target.x === 0 && oldSettings.cameraOrtho.target.y === 0 && oldSettings.cameraOrtho.target.z === 0) &&\r\n            !(oldSettings.cameraOrtho.position.x === 0 && oldSettings.cameraOrtho.position.y === 0 && oldSettings.cameraOrtho.position.z === 0 &&\r\n                oldSettings.cameraOrtho.target.x === 0 && oldSettings.cameraOrtho.target.y === 0 && oldSettings.cameraOrtho.target.z === 0)) {\r\n            settings.viewer.scene.camera.cameraTypes.orthographic.default.position = oldSettings.cameraOrtho.position;\r\n            settings.viewer.scene.camera.cameraTypes.orthographic.default.target = oldSettings.cameraOrtho.target;\r\n        }\r\n        else if (oldSettings.topView && !(oldSettings.cameraOrtho.position.x === 5 && oldSettings.cameraOrtho.position.y === 5 && oldSettings.cameraOrtho.position.z === 5 &&\r\n            oldSettings.cameraOrtho.target.x === 0 && oldSettings.cameraOrtho.target.y === 0 && oldSettings.cameraOrtho.target.z === 0) &&\r\n            !(oldSettings.cameraOrtho.position.x === 0 && oldSettings.cameraOrtho.position.y === 0 && oldSettings.cameraOrtho.position.z === 0 &&\r\n                oldSettings.cameraOrtho.target.x === 0 && oldSettings.cameraOrtho.target.y === 0 && oldSettings.cameraOrtho.target.z === 0)) {\r\n            if (oldSettings.camera !== undefined && oldSettings.camera.position !== undefined && oldSettings.camera.target !== undefined &&\r\n                oldSettings.camera.position.x !== undefined && oldSettings.camera.position.y !== undefined && oldSettings.camera.position.z !== undefined &&\r\n                oldSettings.camera.target.x !== undefined && oldSettings.camera.target.y !== undefined && oldSettings.camera.target.z !== undefined) {\r\n                settings.viewer.scene.camera.cameraTypes.orthographic.default.position = oldSettings.camera.position;\r\n                settings.viewer.scene.camera.cameraTypes.orthographic.default.target = oldSettings.camera.target;\r\n            }\r\n        }\r\n    }\r\n    if (oldSettings.ambientOcclusion !== undefined)\r\n        settings.viewer.scene.render.ambientOcclusion = oldSettings.ambientOcclusion;\r\n    if (oldSettings.autoRotateSpeed !== undefined)\r\n        settings.viewer.scene.camera.controls.orbit.autoRotationSpeed = oldSettings.autoRotateSpeed;\r\n    if (oldSettings.bumpAmplitude !== undefined)\r\n        settings.defaultMaterial.bumpAmplitude = oldSettings.bumpAmplitude;\r\n    if (oldSettings.cameraAutoAdjust !== undefined)\r\n        settings.viewer.scene.camera.autoAdjust = oldSettings.cameraAutoAdjust;\r\n    if (oldSettings.cameraMovementDuration !== undefined)\r\n        settings.viewer.scene.camera.cameraMovementDuration = oldSettings.cameraMovementDuration;\r\n    if (oldSettings.cameraRevertAtMouseUp !== undefined)\r\n        settings.viewer.scene.camera.revertAtMouseUp = oldSettings.cameraRevertAtMouseUp;\r\n    if (oldSettings.commitParameters !== undefined)\r\n        settings.viewer.commitParameters = oldSettings.commitParameters;\r\n    if (oldSettings.controlDamping !== undefined)\r\n        settings.viewer.scene.camera.controls.orbit.damping = oldSettings.controlDamping;\r\n    if (oldSettings.controlDamping !== undefined)\r\n        settings.viewer.scene.camera.controls.orthographic.damping = oldSettings.controlDamping;\r\n    if (oldSettings.controlNames !== undefined)\r\n        settings.parameters.controlNames = oldSettings.controlNames;\r\n    if (oldSettings.controlOrder !== undefined)\r\n        settings.parameters.controlOrder = oldSettings.controlOrder;\r\n    if (oldSettings.disablePan !== undefined)\r\n        settings.viewer.scene.camera.controls.orbit.enablePan = !oldSettings.disablePan;\r\n    if (oldSettings.disablePan !== undefined)\r\n        settings.viewer.scene.camera.controls.orthographic.enablePan = !oldSettings.disablePan;\r\n    if (oldSettings.disableZoom !== undefined)\r\n        settings.viewer.scene.camera.controls.orbit.enableZoom = !oldSettings.disableZoom;\r\n    if (oldSettings.disableZoom !== undefined)\r\n        settings.viewer.scene.camera.controls.orthographic.enableZoom = !oldSettings.disableZoom;\r\n    if (oldSettings.enableAutoRotation !== undefined)\r\n        settings.viewer.scene.camera.controls.orbit.enableAutoRotation = oldSettings.enableAutoRotation;\r\n    if (oldSettings.enableRotation !== undefined)\r\n        settings.viewer.scene.camera.controls.orbit.enableRotation = oldSettings.enableRotation;\r\n    if (oldSettings.environmentMap !== undefined)\r\n        settings.viewer.scene.material.environmentMap = oldSettings.environmentMap;\r\n    if (oldSettings.environmentMapResolution !== undefined)\r\n        settings.viewer.scene.material.environmentMapResolution = oldSettings.environmentMapResolution;\r\n    if (oldSettings.fov !== undefined)\r\n        settings.viewer.scene.camera.cameraTypes.perspective.fov = oldSettings.fov;\r\n    if (oldSettings.lightScene !== undefined)\r\n        settings.viewer.scene.lights.lightScene = oldSettings.lightScene;\r\n    if (oldSettings.lightScenes !== undefined)\r\n        settings.viewer.scene.lights.lightScenes = oldSettings.lightScenes;\r\n    if (oldSettings.panSpeed !== undefined)\r\n        settings.viewer.scene.camera.controls.orbit.panSpeed = oldSettings.panSpeed;\r\n    if (oldSettings.parametersHidden !== undefined)\r\n        settings.parameters.parametersHidden = oldSettings.parametersHidden;\r\n    if (oldSettings.pointSize !== undefined)\r\n        settings.viewer.scene.render.pointSize = oldSettings.pointSize;\r\n    if (oldSettings.revertAtMouseUpDuration !== undefined)\r\n        settings.viewer.scene.camera.revertAtMouseUpDuration = oldSettings.revertAtMouseUpDuration;\r\n    if (oldSettings.rotateSpeed !== undefined)\r\n        settings.viewer.scene.camera.controls.orbit.rotationSpeed = oldSettings.rotateSpeed;\r\n    if (oldSettings.showEnvironmentMap !== undefined)\r\n        settings.viewer.scene.material.environmentMapAsBackground = oldSettings.showEnvironmentMap;\r\n    if (oldSettings.showGrid !== undefined)\r\n        settings.viewer.scene.gridVisibility = oldSettings.showGrid;\r\n    if (oldSettings.showGroundPlane !== undefined)\r\n        settings.viewer.scene.groundPlaneVisibility = oldSettings.showGroundPlane;\r\n    if (oldSettings.showShadows !== undefined)\r\n        settings.viewer.scene.render.shadows = oldSettings.showShadows;\r\n    if (oldSettings.topView)\r\n        settings.viewer.scene.camera.cameraTypes.active = 1;\r\n    if (oldSettings.zoomExtentFactor !== undefined)\r\n        settings.viewer.scene.camera.zoomExtentsFactor = oldSettings.zoomExtentFactor;\r\n    if (oldSettings.zoomSpeed !== undefined)\r\n        settings.viewer.scene.camera.controls.orbit.zoomSpeed = oldSettings.zoomSpeed;\r\n    if (oldSettings.zoomSpeed !== undefined)\r\n        settings.viewer.scene.camera.controls.orthographic.zoomSpeed = oldSettings.zoomSpeed;\r\n    return settings;\r\n};\r\nexports.convertFromPrevious = convertFromPrevious;\r\nconst convertToPrevious = (s, v) => {\r\n    const settings = Defaults_1.Defaults();\r\n    const newSettings = s;\r\n    settings.build_date = newSettings.build_date;\r\n    settings.build_version = newSettings.build_version;\r\n    settings.ambientOcclusion = newSettings.viewer.scene.render.ambientOcclusion;\r\n    settings.autoRotateSpeed = newSettings.viewer.scene.camera.controls.orbit.autoRotationSpeed;\r\n    settings.bumpAmplitude = newSettings.defaultMaterial.bumpAmplitude;\r\n    settings.camera = {\r\n        position: newSettings.viewer.scene.camera.cameraTypes.perspective.default.position,\r\n        target: newSettings.viewer.scene.camera.cameraTypes.perspective.default.target,\r\n    };\r\n    settings.cameraAutoAdjust = newSettings.viewer.scene.camera.autoAdjust;\r\n    settings.cameraMovementDuration = newSettings.viewer.scene.camera.cameraMovementDuration;\r\n    settings.cameraOrtho = {\r\n        position: newSettings.viewer.scene.camera.cameraTypes.orthographic.default.position,\r\n        target: newSettings.viewer.scene.camera.cameraTypes.orthographic.default.target,\r\n    };\r\n    settings.cameraRevertAtMouseUp = newSettings.viewer.scene.camera.revertAtMouseUp;\r\n    settings.clearAlpha = newSettings.viewer.scene.render.clearAlpha;\r\n    settings.clearColor = newSettings.viewer.scene.render.clearColor;\r\n    settings.commitParameters = newSettings.viewer.commitParameters;\r\n    settings.controlDamping = newSettings.viewer.scene.camera.controls.orbit.damping;\r\n    if (newSettings.parameters && newSettings.parameters.controlNames) {\r\n        settings.controlNames = newSettings.parameters.controlNames;\r\n    }\r\n    if (newSettings.parameters && newSettings.parameters.controlOrder) {\r\n        settings.controlOrder = newSettings.parameters.controlOrder;\r\n    }\r\n    settings.defaultMaterialColor = newSettings.defaultMaterial.color;\r\n    settings.disablePan = !newSettings.viewer.scene.camera.controls.orbit.enablePan;\r\n    settings.disableZoom = !newSettings.viewer.scene.camera.controls.orbit.enableZoom;\r\n    settings.enableAutoRotation = newSettings.viewer.scene.camera.controls.orbit.enableAutoRotation;\r\n    settings.enableRotation = newSettings.viewer.scene.camera.controls.orbit.enableRotation;\r\n    settings.environmentMap = newSettings.viewer.scene.material.environmentMap;\r\n    settings.environmentMapResolution = newSettings.viewer.scene.material.environmentMapResolution;\r\n    settings.fov = newSettings.viewer.scene.camera.cameraTypes.perspective.fov;\r\n    settings.lightScene = newSettings.viewer.scene.lights.lightScene;\r\n    settings.lightScenes = newSettings.viewer.scene.lights.lightScenes;\r\n    settings.panSpeed = newSettings.viewer.scene.camera.controls.orbit.panSpeed;\r\n    if (newSettings.parameters && newSettings.parameters.parametersHidden) {\r\n        settings.parametersHidden = newSettings.parameters.parametersHidden;\r\n    }\r\n    settings.pointSize = newSettings.viewer.scene.render.pointSize;\r\n    settings.revertAtMouseUpDuration = newSettings.viewer.scene.camera.revertAtMouseUpDuration;\r\n    settings.rotateSpeed = newSettings.viewer.scene.camera.controls.orbit.rotationSpeed;\r\n    settings.showEnvironmentMap = newSettings.viewer.scene.material.environmentMapAsBackground;\r\n    settings.showGrid = newSettings.viewer.scene.gridVisibility;\r\n    settings.showGroundPlane = newSettings.viewer.scene.groundPlaneVisibility;\r\n    settings.showShadows = newSettings.viewer.scene.render.shadows;\r\n    settings.topView = newSettings.viewer.scene.camera.cameraTypes.active === 1;\r\n    settings.zoomExtentFactor = newSettings.viewer.scene.camera.zoomExtentsFactor;\r\n    settings.zoomSpeed = newSettings.viewer.scene.camera.controls.orbit.zoomSpeed;\r\n    settings.backgroundColor = newSettings.viewer.scene.render.clearColor;\r\n    return settings;\r\n};\r\nexports.convertToPrevious = convertToPrevious;\r\n//# sourceMappingURL=Converter.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Defaults = void 0;\r\nconst Defaults = () => {\r\n    return {\r\n        build_date: '',\r\n        build_version: '',\r\n        settings_version: '2.0',\r\n        ar: {\r\n            enableCameraSync: false,\r\n            enableCameraSyncInitial: false,\r\n            enableLightingEstimation: true,\r\n            enableTouchControls: true,\r\n            enableTouchControlRotation: true,\r\n            enableAutomaticPlacement: true,\r\n            defaultHitTestType: 'existingPlaneUsingGeometry',\r\n        },\r\n        defaultMaterial: {\r\n            bumpAmplitude: 1,\r\n            color: '#d3d3d3',\r\n            metalness: 0.0,\r\n            roughness: 1.0,\r\n        },\r\n        parameters: {\r\n            controlOrder: [],\r\n            controlNames: {},\r\n            parametersHidden: [],\r\n        },\r\n        viewer: {\r\n            blurSceneWhenBusy: true,\r\n            ignoreSuperseded: true,\r\n            loggingLevel: -1,\r\n            messageLoggingLevel: -1,\r\n            showMessages: true,\r\n            hasRestoredSettings: false,\r\n            useModelSettings: false,\r\n            commitParameters: false,\r\n            commitSettings: false,\r\n            viewerRuntimeId: '',\r\n            scene: {\r\n                show: false,\r\n                showSceneTransition: '1s',\r\n                camera: {\r\n                    autoAdjust: false,\r\n                    cameraMovementDuration: 800,\r\n                    cameraTypes: {\r\n                        perspective: {\r\n                            default: {\r\n                                position: { x: 0, y: 0, z: 0 },\r\n                                target: { x: 0, y: 0, z: 0 },\r\n                            },\r\n                            fov: 45,\r\n                            controls: 0,\r\n                        },\r\n                        orthographic: {\r\n                            default: {\r\n                                position: { x: 0, y: 0, z: 0 },\r\n                                target: { x: 0, y: 0, z: 0 },\r\n                            },\r\n                        },\r\n                        active: 0,\r\n                    },\r\n                    controls: {\r\n                        orbit: {\r\n                            autoRotationSpeed: 0,\r\n                            damping: 0.1,\r\n                            enableAutoRotation: false,\r\n                            enableKeyPan: false,\r\n                            enablePan: true,\r\n                            enableRotation: true,\r\n                            enableZoom: true,\r\n                            input: { keys: { up: 38, down: 40, left: 37, right: 39 }, mouse: { rotate: 0, zoom: 1, pan: 2 }, touch: { rotate: 1, zoom: 2, pan: 3 }, },\r\n                            keyPanSpeed: 0.5,\r\n                            movementSmoothness: 0.5,\r\n                            restrictions: {\r\n                                position: {\r\n                                    cube: {\r\n                                        min: { x: -Infinity, y: -Infinity, z: -Infinity },\r\n                                        max: { x: Infinity, y: Infinity, z: Infinity },\r\n                                    },\r\n                                    sphere: {\r\n                                        center: { x: 0, y: 0, z: 0 },\r\n                                        radius: Infinity,\r\n                                    },\r\n                                },\r\n                                target: {\r\n                                    cube: {\r\n                                        min: { x: -Infinity, y: -Infinity, z: -Infinity },\r\n                                        max: { x: Infinity, y: Infinity, z: Infinity },\r\n                                    },\r\n                                    sphere: {\r\n                                        center: { x: 0, y: 0, z: 0 },\r\n                                        radius: Infinity,\r\n                                    },\r\n                                },\r\n                                rotation: {\r\n                                    minPolarAngle: 0,\r\n                                    maxPolarAngle: 180,\r\n                                    minAzimuthAngle: -Infinity,\r\n                                    maxAzimuthAngle: Infinity,\r\n                                },\r\n                                zoom: {\r\n                                    minDistance: 0,\r\n                                    maxDistance: Infinity,\r\n                                },\r\n                            },\r\n                            rotationSpeed: 0.5,\r\n                            panSpeed: 0.5,\r\n                            zoomSpeed: 0.5,\r\n                        },\r\n                        fps: {},\r\n                        orthographic: {\r\n                            damping: 0.1,\r\n                            enableKeyPan: false,\r\n                            enablePan: true,\r\n                            enableZoom: true,\r\n                            input: { keys: { up: 38, down: 40, left: 37, right: 39 }, mouse: { rotate: 0, zoom: 1, pan: 2 }, touch: { rotate: 1, zoom: 2, pan: 3 } },\r\n                            keyPanSpeed: 0.5,\r\n                            movementSmoothness: 0.5,\r\n                            panSpeed: 0.5,\r\n                            zoomSpeed: 0.5,\r\n                        }\r\n                    },\r\n                    enableCameraControls: true,\r\n                    revertAtMouseUp: false,\r\n                    revertAtMouseUpDuration: 800,\r\n                    zoomExtentsFactor: 1,\r\n                },\r\n                duration: 0,\r\n                fullscreen: false,\r\n                gridVisibility: true,\r\n                groundPlaneReflectionThreshold: 0.01,\r\n                groundPlaneReflectionVisibility: false,\r\n                groundPlaneVisibility: true,\r\n                lights: {\r\n                    helper: false,\r\n                    lightScene: 'default',\r\n                    lightScenes: {},\r\n                },\r\n                material: {\r\n                    environmentMap: 'none',\r\n                    environmentMapAsBackground: false,\r\n                    environmentMapResolution: '1024',\r\n                },\r\n                render: {\r\n                    ambientOcclusion: true,\r\n                    beautyRenderDelay: 50,\r\n                    beautyRenderBlendingDuration: 1500,\r\n                    clearColor: '#ffffff',\r\n                    clearAlpha: 1.0,\r\n                    pointSize: 1.0,\r\n                    shadows: true,\r\n                    sao: {\r\n                        samples: 8,\r\n                        intensity: 0.1,\r\n                        kernelRadius: 8,\r\n                        standardDev: 25,\r\n                    },\r\n                },\r\n            }\r\n        }\r\n    };\r\n};\r\nexports.Defaults = Defaults;\r\n//# sourceMappingURL=Defaults.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.validate = void 0;\r\nconst zod_1 = require(\"zod\");\r\nconst lightSchema = zod_1.z.object({\r\n    id: zod_1.z.string(),\r\n    name: zod_1.z.string().optional(),\r\n    type: zod_1.z.string(),\r\n    order: zod_1.z.number().optional(),\r\n    properties: zod_1.z.object({\r\n        color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]).optional(),\r\n        direction: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }).optional(),\r\n        position: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }).optional(),\r\n        target: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }).optional(),\r\n        castShadow: zod_1.z.boolean().optional(),\r\n        skyColor: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]).optional(),\r\n        groundColor: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]).optional(),\r\n        intensity: zod_1.z.number().optional(),\r\n        distance: zod_1.z.number().optional(),\r\n        angle: zod_1.z.number().optional(),\r\n        penumbra: zod_1.z.number().optional(),\r\n        decay: zod_1.z.number().optional(),\r\n        shadowMapResolution: zod_1.z.number().optional(),\r\n        shadowMapBias: zod_1.z.number().optional()\r\n    })\r\n});\r\nconst lightScenesSchema = zod_1.z.record(zod_1.z.object({\r\n    id: zod_1.z.string(),\r\n    name: zod_1.z.string().optional(),\r\n    lights: zod_1.z.record(lightSchema)\r\n}));\r\nconst schema = zod_1.z.object({\r\n    build_date: zod_1.z.string().optional(),\r\n    build_version: zod_1.z.string().optional(),\r\n    settings_version: zod_1.z.string(),\r\n    ar: zod_1.z.object({\r\n        enableCameraSync: zod_1.z.boolean().optional(),\r\n        enableCameraSyncInitial: zod_1.z.boolean().optional(),\r\n        enableLightingEstimation: zod_1.z.boolean().optional(),\r\n        enableTouchControls: zod_1.z.boolean().optional(),\r\n        enableTouchControlRotation: zod_1.z.boolean().optional(),\r\n        enableAutomaticPlacement: zod_1.z.boolean().optional(),\r\n        defaultHitTestType: zod_1.z.string().optional(),\r\n    }).optional(),\r\n    defaultMaterial: zod_1.z.object({\r\n        bumpAmplitude: zod_1.z.number().optional(),\r\n        color: zod_1.z.union([zod_1.z.string(), zod_1.z.number().array()]).optional(),\r\n        metalness: zod_1.z.number().optional(),\r\n        roughness: zod_1.z.number().optional(),\r\n    }),\r\n    parameters: zod_1.z.object({\r\n        controlOrder: zod_1.z.string().array().optional(),\r\n        controlNames: zod_1.z.record(zod_1.z.string()).optional(),\r\n        parametersHidden: zod_1.z.string().array().optional(),\r\n    }).optional(),\r\n    viewer: zod_1.z.object({\r\n        blurSceneWhenBusy: zod_1.z.boolean(),\r\n        ignoreSuperseded: zod_1.z.boolean().optional(),\r\n        loggingLevel: zod_1.z.number().optional(),\r\n        messageLoggingLevel: zod_1.z.number().optional(),\r\n        viewerRuntimeId: zod_1.z.string().optional(),\r\n        hasRestoredSettings: zod_1.z.boolean().optional(),\r\n        useModelSettings: zod_1.z.boolean().optional(),\r\n        showMessages: zod_1.z.boolean().optional(),\r\n        commitSettings: zod_1.z.boolean(),\r\n        commitParameters: zod_1.z.boolean(),\r\n        scene: zod_1.z.object({\r\n            show: zod_1.z.boolean().optional(),\r\n            showSceneTransition: zod_1.z.string().optional(),\r\n            duration: zod_1.z.number().optional(),\r\n            fullscreen: zod_1.z.boolean().optional(),\r\n            gridVisibility: zod_1.z.boolean(),\r\n            groundPlaneReflectionThreshold: zod_1.z.number().optional(),\r\n            groundPlaneReflectionVisibility: zod_1.z.boolean().optional(),\r\n            groundPlaneVisibility: zod_1.z.boolean(),\r\n            camera: zod_1.z.object({\r\n                autoAdjust: zod_1.z.boolean(),\r\n                cameraMovementDuration: zod_1.z.number(),\r\n                cameraTypes: zod_1.z.object({\r\n                    perspective: zod_1.z.object({\r\n                        default: zod_1.z.object({ position: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }), target: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }) }),\r\n                        fov: zod_1.z.number(),\r\n                        controls: zod_1.z.number().optional(),\r\n                    }),\r\n                    orthographic: zod_1.z.object({\r\n                        default: zod_1.z.object({ position: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }), target: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }) }),\r\n                    }),\r\n                    active: zod_1.z.number()\r\n                }),\r\n                controls: zod_1.z.object({\r\n                    orbit: zod_1.z.object({\r\n                        autoRotationSpeed: zod_1.z.number(),\r\n                        damping: zod_1.z.number(),\r\n                        enableAutoRotation: zod_1.z.boolean(),\r\n                        enableKeyPan: zod_1.z.boolean(),\r\n                        enablePan: zod_1.z.boolean(),\r\n                        enableRotation: zod_1.z.boolean(),\r\n                        enableZoom: zod_1.z.boolean(),\r\n                        input: zod_1.z.object({ keys: zod_1.z.object({ up: zod_1.z.number(), down: zod_1.z.number(), left: zod_1.z.number(), right: zod_1.z.number() }), mouse: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), touch: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), }),\r\n                        keyPanSpeed: zod_1.z.number(),\r\n                        movementSmoothness: zod_1.z.number(),\r\n                        restrictions: zod_1.z.object({\r\n                            position: zod_1.z.object({\r\n                                cube: zod_1.z.object({ min: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }), max: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }) }).optional(),\r\n                                sphere: zod_1.z.object({ center: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }), radius: zod_1.z.number().nullable() }).optional(),\r\n                            }).optional(),\r\n                            target: zod_1.z.object({\r\n                                cube: zod_1.z.object({ min: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }), max: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }) }).optional(),\r\n                                sphere: zod_1.z.object({ center: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }), radius: zod_1.z.number().nullable() }).optional(),\r\n                            }).optional(),\r\n                            rotation: zod_1.z.object({ minPolarAngle: zod_1.z.number(), maxPolarAngle: zod_1.z.number(), minAzimuthAngle: zod_1.z.number().nullable(), maxAzimuthAngle: zod_1.z.number().nullable() }).optional(),\r\n                            zoom: zod_1.z.object({ minDistance: zod_1.z.number(), maxDistance: zod_1.z.number().nullable() }).optional(),\r\n                        }),\r\n                        rotationSpeed: zod_1.z.number(),\r\n                        panSpeed: zod_1.z.number(),\r\n                        zoomSpeed: zod_1.z.number(),\r\n                    }),\r\n                    fps: zod_1.z.object({}),\r\n                    orthographic: zod_1.z.object({\r\n                        damping: zod_1.z.number(),\r\n                        enableKeyPan: zod_1.z.boolean(),\r\n                        enablePan: zod_1.z.boolean(),\r\n                        enableZoom: zod_1.z.boolean(),\r\n                        input: zod_1.z.object({ keys: zod_1.z.object({ up: zod_1.z.number(), down: zod_1.z.number(), left: zod_1.z.number(), right: zod_1.z.number() }), mouse: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), touch: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), }),\r\n                        keyPanSpeed: zod_1.z.number(),\r\n                        movementSmoothness: zod_1.z.number(),\r\n                        panSpeed: zod_1.z.number(),\r\n                        zoomSpeed: zod_1.z.number(),\r\n                    })\r\n                }),\r\n                enableCameraControls: zod_1.z.boolean(),\r\n                revertAtMouseUp: zod_1.z.boolean(),\r\n                revertAtMouseUpDuration: zod_1.z.number(),\r\n                zoomExtentsFactor: zod_1.z.number().positive(),\r\n            }),\r\n            lights: zod_1.z.object({\r\n                helper: zod_1.z.boolean().optional(),\r\n                lightScene: zod_1.z.string(),\r\n                lightScenes: lightScenesSchema.nullable()\r\n            }),\r\n            material: zod_1.z.object({\r\n                environmentMap: zod_1.z.union([zod_1.z.string(), zod_1.z.string().array()]),\r\n                environmentMapAsBackground: zod_1.z.boolean(),\r\n                environmentMapResolution: zod_1.z.enum(['256', '512', '1024', '2048'])\r\n            }),\r\n            render: zod_1.z.object({\r\n                ambientOcclusion: zod_1.z.boolean(),\r\n                beautyRenderDelay: zod_1.z.number(),\r\n                beautyRenderBlendingDuration: zod_1.z.number().optional(),\r\n                clearAlpha: zod_1.z.number(),\r\n                clearColor: zod_1.z.string(),\r\n                pointSize: zod_1.z.number(),\r\n                shadows: zod_1.z.boolean(),\r\n                sao: zod_1.z.object({\r\n                    samples: zod_1.z.number().positive().optional(),\r\n                    kernelRadius: zod_1.z.number().positive().optional(),\r\n                    intensity: zod_1.z.number().positive().optional(),\r\n                    standardDev: zod_1.z.number().optional(),\r\n                })\r\n            }),\r\n        }),\r\n    }),\r\n}).strict();\r\nconst validate = (s) => {\r\n    const result = schema.parse(s);\r\n    s = result;\r\n};\r\nexports.validate = validate;\r\n//# sourceMappingURL=Validator.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.convertToPrevious = exports.convertFromPrevious = void 0;\r\nconst Defaults_1 = require(\"../v2/Defaults\");\r\nconst Defaults_2 = require(\"./Defaults\");\r\nconst uuid_1 = require(\"uuid\");\r\nconst convertFromPrevious = (s, v) => {\r\n    const settings = Defaults_2.Defaults();\r\n    const oldSettings = s;\r\n    settings.build_date = oldSettings.build_date;\r\n    settings.build_version = oldSettings.build_version;\r\n    if (oldSettings.parameters && oldSettings.parameters.controlNames) {\r\n        for (let id in oldSettings.parameters.controlNames) {\r\n            settings.session[id] = {\r\n                order: 0,\r\n                displayname: oldSettings.parameters.controlNames[id],\r\n                hidden: false\r\n            };\r\n        }\r\n    }\r\n    if (oldSettings.parameters && oldSettings.parameters.controlOrder) {\r\n        for (let i = 0; i < oldSettings.parameters.controlOrder.length; i++) {\r\n            const id = oldSettings.parameters.controlOrder[i];\r\n            if (settings.session[id]) {\r\n                settings.session[id].order = i;\r\n            }\r\n            else {\r\n                settings.session[id] = {\r\n                    order: i,\r\n                    displayname: '',\r\n                    hidden: false\r\n                };\r\n            }\r\n        }\r\n    }\r\n    if (oldSettings.parameters && oldSettings.parameters.parametersHidden) {\r\n        for (let i = 0; i < oldSettings.parameters.parametersHidden.length; i++) {\r\n            const id = oldSettings.parameters.parametersHidden[i];\r\n            if (settings.session[id]) {\r\n                settings.session[id].hidden = true;\r\n            }\r\n            else {\r\n                settings.session[id] = {\r\n                    order: 0,\r\n                    displayname: '',\r\n                    hidden: true\r\n                };\r\n            }\r\n        }\r\n    }\r\n    settings.general.blurWhenBusy = oldSettings.viewer.blurSceneWhenBusy;\r\n    settings.general.commitParameters = oldSettings.viewer.commitParameters;\r\n    settings.general.commitSettings = oldSettings.viewer.commitSettings;\r\n    if (oldSettings.viewer.showMessages)\r\n        settings.general.showMessages = oldSettings.viewer.showMessages;\r\n    settings.environmentGeometry.gridVisibility = oldSettings.viewer.scene.gridVisibility;\r\n    settings.environmentGeometry.groundPlaneVisibility = oldSettings.viewer.scene.groundPlaneVisibility;\r\n    const id = uuid_1.v4();\r\n    settings.camera.cameraId = id;\r\n    if (oldSettings.viewer.scene.camera.cameraTypes.active === 0) {\r\n        const orbitRestriction = oldSettings.viewer.scene.camera.controls.orbit.restrictions;\r\n        const positionCubeRestriction = orbitRestriction.position && orbitRestriction.position.cube ? { min: { x: orbitRestriction.position.cube.min.x, y: orbitRestriction.position.cube.min.y, z: orbitRestriction.position.cube.min.z }, max: { x: orbitRestriction.position.cube.max.x, y: orbitRestriction.position.cube.max.y, z: orbitRestriction.position.cube.max.z } } : { min: { x: -Infinity, y: -Infinity, z: -Infinity }, max: { x: Infinity, y: Infinity, z: Infinity }, };\r\n        const targetCubeRestriction = orbitRestriction.target && orbitRestriction.target.cube ? { min: { x: orbitRestriction.target.cube.min.x, y: orbitRestriction.target.cube.min.y, z: orbitRestriction.target.cube.min.z }, max: { x: orbitRestriction.target.cube.max.x, y: orbitRestriction.target.cube.max.y, z: orbitRestriction.target.cube.max.z } } : { min: { x: -Infinity, y: -Infinity, z: -Infinity }, max: { x: Infinity, y: Infinity, z: Infinity }, };\r\n        const positionSphereRestriction = orbitRestriction.position && orbitRestriction.position.sphere ? { center: { x: orbitRestriction.position.sphere.center.x, y: orbitRestriction.position.sphere.center.y, z: orbitRestriction.position.sphere.center.z }, radius: orbitRestriction.position.sphere.radius } : { center: { x: 0, y: 0, z: 0 }, radius: Infinity, };\r\n        const targetSphereRestriction = orbitRestriction.target && orbitRestriction.target.sphere ? { center: { x: orbitRestriction.target.sphere.center.x, y: orbitRestriction.target.sphere.center.y, z: orbitRestriction.target.sphere.center.z }, radius: orbitRestriction.target.sphere.radius } : { center: { x: 0, y: 0, z: 0 }, radius: Infinity, };\r\n        const rotationRestriction = orbitRestriction.rotation ? { minPolarAngle: orbitRestriction.rotation.minPolarAngle, maxPolarAngle: orbitRestriction.rotation.maxPolarAngle, minAzimuthAngle: orbitRestriction.rotation.minAzimuthAngle, maxAzimuthAngle: orbitRestriction.rotation.maxAzimuthAngle, } : { minPolarAngle: 0, maxPolarAngle: 180, minAzimuthAngle: -Infinity, maxAzimuthAngle: Infinity, };\r\n        const zoomRestriction = orbitRestriction.zoom ? { minDistance: orbitRestriction.zoom.minDistance, maxDistance: orbitRestriction.zoom.maxDistance } : { minDistance: 0, maxDistance: Infinity };\r\n        const restrictions = { position: { cube: positionCubeRestriction, sphere: positionSphereRestriction, }, target: { cube: targetCubeRestriction, sphere: targetSphereRestriction, }, rotation: rotationRestriction, zoom: zoomRestriction, };\r\n        settings.camera.cameras = {\r\n            [id]: {\r\n                type: 'perspective',\r\n                autoAdjust: oldSettings.viewer.scene.camera.autoAdjust,\r\n                cameraMovementDuration: oldSettings.viewer.scene.camera.cameraMovementDuration,\r\n                controls: {\r\n                    autoRotationSpeed: oldSettings.viewer.scene.camera.controls.orbit.autoRotationSpeed,\r\n                    damping: oldSettings.viewer.scene.camera.controls.orbit.damping,\r\n                    enableAutoRotation: oldSettings.viewer.scene.camera.controls.orbit.enableAutoRotation,\r\n                    enableKeyPan: oldSettings.viewer.scene.camera.controls.orbit.enableKeyPan,\r\n                    enablePan: oldSettings.viewer.scene.camera.controls.orbit.enablePan,\r\n                    enableRotation: oldSettings.viewer.scene.camera.controls.orbit.enableRotation,\r\n                    enableZoom: oldSettings.viewer.scene.camera.controls.orbit.enableZoom,\r\n                    input: {\r\n                        keys: {\r\n                            up: oldSettings.viewer.scene.camera.controls.orbit.input.keys.up,\r\n                            down: oldSettings.viewer.scene.camera.controls.orbit.input.keys.down,\r\n                            left: oldSettings.viewer.scene.camera.controls.orbit.input.keys.left,\r\n                            right: oldSettings.viewer.scene.camera.controls.orbit.input.keys.right\r\n                        },\r\n                        mouse: {\r\n                            rotate: oldSettings.viewer.scene.camera.controls.orbit.input.mouse.rotate,\r\n                            zoom: oldSettings.viewer.scene.camera.controls.orbit.input.mouse.zoom,\r\n                            pan: oldSettings.viewer.scene.camera.controls.orbit.input.mouse.pan\r\n                        },\r\n                        touch: {\r\n                            rotate: oldSettings.viewer.scene.camera.controls.orbit.input.touch.rotate,\r\n                            zoom: oldSettings.viewer.scene.camera.controls.orbit.input.touch.zoom,\r\n                            pan: oldSettings.viewer.scene.camera.controls.orbit.input.touch.pan\r\n                        },\r\n                    },\r\n                    keyPanSpeed: oldSettings.viewer.scene.camera.controls.orbit.keyPanSpeed,\r\n                    movementSmoothness: oldSettings.viewer.scene.camera.controls.orbit.movementSmoothness,\r\n                    restrictions,\r\n                    rotationSpeed: oldSettings.viewer.scene.camera.controls.orbit.rotationSpeed,\r\n                    panSpeed: oldSettings.viewer.scene.camera.controls.orbit.panSpeed,\r\n                    zoomSpeed: oldSettings.viewer.scene.camera.controls.orbit.zoomSpeed,\r\n                },\r\n                enableCameraControls: oldSettings.viewer.scene.camera.enableCameraControls,\r\n                fov: oldSettings.viewer.scene.camera.cameraTypes.perspective.fov,\r\n                position: {\r\n                    x: oldSettings.viewer.scene.camera.cameraTypes.perspective.default.position.x,\r\n                    y: oldSettings.viewer.scene.camera.cameraTypes.perspective.default.position.y,\r\n                    z: oldSettings.viewer.scene.camera.cameraTypes.perspective.default.position.z,\r\n                },\r\n                revertAtMouseUp: oldSettings.viewer.scene.camera.revertAtMouseUp,\r\n                revertAtMouseUpDuration: oldSettings.viewer.scene.camera.revertAtMouseUpDuration,\r\n                target: {\r\n                    x: oldSettings.viewer.scene.camera.cameraTypes.perspective.default.target.x,\r\n                    y: oldSettings.viewer.scene.camera.cameraTypes.perspective.default.target.y,\r\n                    z: oldSettings.viewer.scene.camera.cameraTypes.perspective.default.target.z,\r\n                },\r\n                zoomExtentsFactor: oldSettings.viewer.scene.camera.zoomExtentsFactor,\r\n            }\r\n        };\r\n    }\r\n    else {\r\n        let type = 'top';\r\n        switch (oldSettings.viewer.scene.camera.cameraTypes.active) {\r\n            case 2:\r\n                type = 'bottom';\r\n                break;\r\n            case 3:\r\n                type = 'right';\r\n                break;\r\n            case 4:\r\n                type = 'left';\r\n                break;\r\n            case 5:\r\n                type = 'back';\r\n                break;\r\n            case 6:\r\n                type = 'front';\r\n                break;\r\n            default:\r\n                type = 'top';\r\n        }\r\n        settings.camera.cameras = {\r\n            [id]: {\r\n                type,\r\n                autoAdjust: oldSettings.viewer.scene.camera.autoAdjust,\r\n                cameraMovementDuration: oldSettings.viewer.scene.camera.cameraMovementDuration,\r\n                controls: {\r\n                    damping: oldSettings.viewer.scene.camera.controls.orbit.damping,\r\n                    enableKeyPan: oldSettings.viewer.scene.camera.controls.orbit.enableKeyPan,\r\n                    enablePan: oldSettings.viewer.scene.camera.controls.orbit.enablePan,\r\n                    enableZoom: oldSettings.viewer.scene.camera.controls.orbit.enableZoom,\r\n                    input: {\r\n                        keys: {\r\n                            up: oldSettings.viewer.scene.camera.controls.orbit.input.keys.up,\r\n                            down: oldSettings.viewer.scene.camera.controls.orbit.input.keys.down,\r\n                            left: oldSettings.viewer.scene.camera.controls.orbit.input.keys.left,\r\n                            right: oldSettings.viewer.scene.camera.controls.orbit.input.keys.right\r\n                        },\r\n                        mouse: {\r\n                            rotate: oldSettings.viewer.scene.camera.controls.orbit.input.mouse.rotate,\r\n                            zoom: oldSettings.viewer.scene.camera.controls.orbit.input.mouse.zoom,\r\n                            pan: oldSettings.viewer.scene.camera.controls.orbit.input.mouse.pan\r\n                        },\r\n                        touch: {\r\n                            rotate: oldSettings.viewer.scene.camera.controls.orbit.input.touch.rotate,\r\n                            zoom: oldSettings.viewer.scene.camera.controls.orbit.input.touch.zoom,\r\n                            pan: oldSettings.viewer.scene.camera.controls.orbit.input.touch.pan\r\n                        },\r\n                    },\r\n                    keyPanSpeed: oldSettings.viewer.scene.camera.controls.orbit.keyPanSpeed,\r\n                    movementSmoothness: oldSettings.viewer.scene.camera.controls.orbit.movementSmoothness,\r\n                    panSpeed: oldSettings.viewer.scene.camera.controls.orbit.panSpeed,\r\n                    zoomSpeed: oldSettings.viewer.scene.camera.controls.orbit.zoomSpeed,\r\n                },\r\n                enableCameraControls: oldSettings.viewer.scene.camera.enableCameraControls,\r\n                position: {\r\n                    x: oldSettings.viewer.scene.camera.cameraTypes.orthographic.default.position.x,\r\n                    y: oldSettings.viewer.scene.camera.cameraTypes.orthographic.default.position.y,\r\n                    z: oldSettings.viewer.scene.camera.cameraTypes.orthographic.default.position.z,\r\n                },\r\n                revertAtMouseUp: oldSettings.viewer.scene.camera.revertAtMouseUp,\r\n                revertAtMouseUpDuration: oldSettings.viewer.scene.camera.revertAtMouseUpDuration,\r\n                target: {\r\n                    x: oldSettings.viewer.scene.camera.cameraTypes.orthographic.default.target.x,\r\n                    y: oldSettings.viewer.scene.camera.cameraTypes.orthographic.default.target.y,\r\n                    z: oldSettings.viewer.scene.camera.cameraTypes.orthographic.default.target.z,\r\n                },\r\n                zoomExtentsFactor: oldSettings.viewer.scene.camera.zoomExtentsFactor,\r\n            }\r\n        };\r\n    }\r\n    settings.environment.map = oldSettings.viewer.scene.material.environmentMap;\r\n    settings.environment.mapAsBackground = oldSettings.viewer.scene.material.environmentMapAsBackground;\r\n    settings.environment.mapResolution = oldSettings.viewer.scene.material.environmentMapResolution;\r\n    oldSettings.viewer.scene.lights;\r\n    settings.light.lightSceneId = oldSettings.viewer.scene.lights.lightScene;\r\n    if (oldSettings.viewer.scene.lights.lightScenes) {\r\n        for (let id in oldSettings.viewer.scene.lights.lightScenes) {\r\n            const oldLs = oldSettings.viewer.scene.lights.lightScenes[id];\r\n            const lights = {};\r\n            for (let lightId in oldLs.lights) {\r\n                const l = oldSettings.viewer.scene.lights.lightScenes[id].lights[lightId];\r\n                switch (l.type) {\r\n                    case 'ambient':\r\n                        lights[lightId] = {\r\n                            name: l.name,\r\n                            type: l.type,\r\n                            properties: {\r\n                                color: l.properties.color,\r\n                                intensity: l.properties.intensity\r\n                            }\r\n                        };\r\n                        break;\r\n                    case 'directional':\r\n                        lights[lightId] = {\r\n                            name: l.name,\r\n                            type: l.type,\r\n                            properties: {\r\n                                direction: { x: l.properties.direction.x, y: l.properties.direction.y, z: l.properties.direction.z },\r\n                                color: l.properties.color,\r\n                                intensity: l.properties.intensity,\r\n                                castShadow: l.properties.castShadow,\r\n                                shadowMapResolution: l.properties.shadowMapResolution,\r\n                                shadowMapBias: l.properties.shadowMapBias,\r\n                            }\r\n                        };\r\n                        break;\r\n                    case 'hemisphere':\r\n                        lights[lightId] = {\r\n                            name: l.name,\r\n                            type: l.type,\r\n                            properties: {\r\n                                skyColor: l.properties.skyColor,\r\n                                intensity: l.properties.intensity,\r\n                                groundColor: l.properties.groundColor,\r\n                            }\r\n                        };\r\n                        break;\r\n                    case 'point':\r\n                        lights[lightId] = {\r\n                            name: l.name,\r\n                            type: l.type,\r\n                            properties: {\r\n                                color: l.properties.color,\r\n                                intensity: l.properties.intensity,\r\n                                position: { x: l.properties.position.x, y: l.properties.position.y, z: l.properties.position.z },\r\n                                distance: l.properties.distance,\r\n                                decay: l.properties.decay,\r\n                            }\r\n                        };\r\n                        break;\r\n                    case 'spot':\r\n                        lights[lightId] = {\r\n                            name: l.name,\r\n                            type: l.type,\r\n                            properties: {\r\n                                color: l.properties.color,\r\n                                intensity: l.properties.intensity,\r\n                                position: { x: l.properties.position.x, y: l.properties.position.y, z: l.properties.position.z },\r\n                                target: { x: l.properties.target.x, y: l.properties.target.y, z: l.properties.target.z },\r\n                                distance: l.properties.distance,\r\n                                decay: l.properties.decay,\r\n                                angle: l.properties.angle,\r\n                                penumbra: l.properties.penumbra,\r\n                            }\r\n                        };\r\n                        break;\r\n                }\r\n                if (l.order)\r\n                    lights[lightId].order = l.order;\r\n            }\r\n            settings.light.lightScenes[id] = {\r\n                name: oldLs.name,\r\n                lights\r\n            };\r\n        }\r\n    }\r\n    settings.rendering.ambientOcclusion = oldSettings.viewer.scene.render.ambientOcclusion;\r\n    if (oldSettings.viewer.scene.render.beautyRenderBlendingDuration !== undefined)\r\n        settings.rendering.beautyRenderBlendingDuration = oldSettings.viewer.scene.render.beautyRenderBlendingDuration;\r\n    settings.rendering.beautyRenderDelay = oldSettings.viewer.scene.render.beautyRenderDelay;\r\n    settings.environment.clearAlpha = oldSettings.viewer.scene.render.clearAlpha;\r\n    settings.environment.clearColor = oldSettings.viewer.scene.render.clearColor;\r\n    settings.general.pointSize = oldSettings.viewer.scene.render.pointSize;\r\n    settings.rendering.shadows = oldSettings.viewer.scene.render.shadows;\r\n    return settings;\r\n};\r\nexports.convertFromPrevious = convertFromPrevious;\r\nconst convertToPrevious = (s, v) => {\r\n    const settings = Defaults_1.Defaults();\r\n    const newSettings = s;\r\n    settings.build_date = newSettings.build_date;\r\n    settings.build_version = newSettings.build_version;\r\n    if (newSettings.camera.cameras[newSettings.camera.cameraId]) {\r\n        const camera = newSettings.camera.cameras[newSettings.camera.cameraId];\r\n        switch (camera.type) {\r\n            case 'top':\r\n                settings.viewer.scene.camera.cameraTypes.active = 1;\r\n                break;\r\n            case 'bottom':\r\n                settings.viewer.scene.camera.cameraTypes.active = 2;\r\n                break;\r\n            case 'right':\r\n                settings.viewer.scene.camera.cameraTypes.active = 3;\r\n                break;\r\n            case 'left':\r\n                settings.viewer.scene.camera.cameraTypes.active = 4;\r\n                break;\r\n            case 'back':\r\n                settings.viewer.scene.camera.cameraTypes.active = 5;\r\n                break;\r\n            case 'front':\r\n                settings.viewer.scene.camera.cameraTypes.active = 6;\r\n                break;\r\n            default:\r\n                settings.viewer.scene.camera.cameraTypes.active = 0;\r\n        }\r\n        settings.viewer.scene.camera.autoAdjust = camera.autoAdjust;\r\n        settings.viewer.scene.camera.cameraMovementDuration = camera.cameraMovementDuration;\r\n        settings.viewer.scene.camera.enableCameraControls = camera.enableCameraControls;\r\n        settings.viewer.scene.camera.revertAtMouseUp = camera.revertAtMouseUp;\r\n        settings.viewer.scene.camera.revertAtMouseUpDuration = camera.revertAtMouseUpDuration;\r\n        settings.viewer.scene.camera.zoomExtentsFactor = camera.zoomExtentsFactor;\r\n        if (camera.type === 'perspective') {\r\n            const pc = camera;\r\n            settings.viewer.scene.camera.cameraTypes.perspective.default.position = { x: camera.position.x, y: camera.position.y, z: camera.position.z };\r\n            settings.viewer.scene.camera.cameraTypes.perspective.default.target = { x: camera.target.x, y: camera.target.y, z: camera.target.z };\r\n            settings.viewer.scene.camera.cameraTypes.perspective.fov = pc.fov;\r\n            settings.viewer.scene.camera.controls.orbit = {\r\n                autoRotationSpeed: pc.controls.autoRotationSpeed,\r\n                damping: pc.controls.damping,\r\n                enableAutoRotation: pc.controls.enableAutoRotation,\r\n                enableKeyPan: pc.controls.enableKeyPan,\r\n                enablePan: pc.controls.enablePan,\r\n                enableRotation: pc.controls.enableRotation,\r\n                enableZoom: pc.controls.enableZoom,\r\n                input: {\r\n                    keys: {\r\n                        up: pc.controls.input.keys.up,\r\n                        down: pc.controls.input.keys.down,\r\n                        left: pc.controls.input.keys.left,\r\n                        right: pc.controls.input.keys.right\r\n                    },\r\n                    mouse: {\r\n                        rotate: pc.controls.input.mouse.rotate,\r\n                        zoom: pc.controls.input.mouse.zoom,\r\n                        pan: pc.controls.input.mouse.pan\r\n                    },\r\n                    touch: {\r\n                        rotate: pc.controls.input.touch.rotate,\r\n                        zoom: pc.controls.input.touch.zoom,\r\n                        pan: pc.controls.input.touch.pan\r\n                    },\r\n                },\r\n                keyPanSpeed: pc.controls.keyPanSpeed,\r\n                movementSmoothness: pc.controls.movementSmoothness,\r\n                restrictions: {\r\n                    position: {\r\n                        cube: {\r\n                            min: { x: pc.controls.restrictions.position.cube.min.x, y: pc.controls.restrictions.position.cube.min.y, z: pc.controls.restrictions.position.cube.min.z },\r\n                            max: { x: pc.controls.restrictions.position.cube.max.x, y: pc.controls.restrictions.position.cube.max.y, z: pc.controls.restrictions.position.cube.max.z }\r\n                        },\r\n                        sphere: {\r\n                            center: { x: pc.controls.restrictions.position.sphere.center.x, y: pc.controls.restrictions.position.sphere.center.y, z: pc.controls.restrictions.position.sphere.center.z },\r\n                            radius: pc.controls.restrictions.position.sphere.radius\r\n                        },\r\n                    },\r\n                    target: {\r\n                        cube: {\r\n                            min: { x: pc.controls.restrictions.target.cube.min.x, y: pc.controls.restrictions.target.cube.min.y, z: pc.controls.restrictions.target.cube.min.z },\r\n                            max: { x: pc.controls.restrictions.target.cube.max.x, y: pc.controls.restrictions.target.cube.max.y, z: pc.controls.restrictions.target.cube.max.z }\r\n                        },\r\n                        sphere: {\r\n                            center: { x: pc.controls.restrictions.target.sphere.center.x, y: pc.controls.restrictions.target.sphere.center.y, z: pc.controls.restrictions.target.sphere.center.z },\r\n                            radius: pc.controls.restrictions.target.sphere.radius\r\n                        },\r\n                    },\r\n                    rotation: { minPolarAngle: pc.controls.restrictions.rotation.minPolarAngle, maxPolarAngle: pc.controls.restrictions.rotation.maxPolarAngle, minAzimuthAngle: pc.controls.restrictions.rotation.minAzimuthAngle, maxAzimuthAngle: pc.controls.restrictions.rotation.maxAzimuthAngle },\r\n                    zoom: { minDistance: pc.controls.restrictions.zoom.minDistance, maxDistance: pc.controls.restrictions.zoom.maxDistance },\r\n                },\r\n                rotationSpeed: pc.controls.rotationSpeed,\r\n                panSpeed: pc.controls.panSpeed,\r\n                zoomSpeed: pc.controls.zoomSpeed,\r\n            };\r\n        }\r\n        else {\r\n            const oc = camera;\r\n            settings.viewer.scene.camera.cameraTypes.orthographic.default.position = { x: camera.position.x, y: camera.position.y, z: camera.position.z };\r\n            settings.viewer.scene.camera.cameraTypes.orthographic.default.target = { x: camera.target.x, y: camera.target.y, z: camera.target.z };\r\n            settings.viewer.scene.camera.controls.orthographic = {\r\n                damping: oc.controls.damping,\r\n                enableKeyPan: oc.controls.enableKeyPan,\r\n                enablePan: oc.controls.enablePan,\r\n                enableZoom: oc.controls.enableZoom,\r\n                input: {\r\n                    keys: {\r\n                        up: oc.controls.input.keys.up,\r\n                        down: oc.controls.input.keys.down,\r\n                        left: oc.controls.input.keys.left,\r\n                        right: oc.controls.input.keys.right\r\n                    },\r\n                    mouse: {\r\n                        rotate: oc.controls.input.mouse.rotate,\r\n                        zoom: oc.controls.input.mouse.zoom,\r\n                        pan: oc.controls.input.mouse.pan\r\n                    },\r\n                    touch: {\r\n                        rotate: oc.controls.input.touch.rotate,\r\n                        zoom: oc.controls.input.touch.zoom,\r\n                        pan: oc.controls.input.touch.pan\r\n                    },\r\n                },\r\n                keyPanSpeed: oc.controls.keyPanSpeed,\r\n                movementSmoothness: oc.controls.movementSmoothness,\r\n                panSpeed: oc.controls.panSpeed,\r\n                zoomSpeed: oc.controls.zoomSpeed,\r\n            };\r\n        }\r\n    }\r\n    settings.viewer.scene.render.clearAlpha = newSettings.environment.clearAlpha;\r\n    settings.viewer.scene.render.clearColor = newSettings.environment.clearColor;\r\n    settings.viewer.scene.material.environmentMap = newSettings.environment.map;\r\n    settings.viewer.scene.material.environmentMapAsBackground = newSettings.environment.mapAsBackground;\r\n    settings.viewer.scene.material.environmentMapResolution = newSettings.environment.mapResolution;\r\n    settings.viewer.scene.gridVisibility = newSettings.environmentGeometry.gridVisibility;\r\n    settings.viewer.scene.groundPlaneVisibility = newSettings.environmentGeometry.groundPlaneVisibility;\r\n    settings.viewer.blurSceneWhenBusy = newSettings.general.blurWhenBusy;\r\n    settings.viewer.commitParameters = newSettings.general.commitParameters;\r\n    settings.viewer.commitSettings = newSettings.general.commitSettings;\r\n    settings.viewer.scene.render.pointSize = newSettings.general.pointSize;\r\n    settings.viewer.showMessages = newSettings.general.showMessages;\r\n    settings.viewer.scene.lights.lightScene = newSettings.light.lightSceneId || 'default';\r\n    for (let lightSceneId in newSettings.light.lightScenes) {\r\n        const ls = newSettings.light.lightScenes[lightSceneId];\r\n        const lights = {};\r\n        for (let lightId in ls.lights) {\r\n            const l = ls.lights[lightId];\r\n            switch (l.type) {\r\n                case 'ambient':\r\n                    lights[lightId] = {\r\n                        id: lightId,\r\n                        name: l.name,\r\n                        type: l.type,\r\n                        order: l.order,\r\n                        properties: {\r\n                            color: l.properties.color,\r\n                            intensity: l.properties.intensity\r\n                        }\r\n                    };\r\n                    break;\r\n                case 'directional':\r\n                    lights[lightId] = {\r\n                        id: lightId,\r\n                        name: l.name,\r\n                        type: l.type,\r\n                        order: l.order,\r\n                        properties: {\r\n                            direction: { x: l.properties.direction.x, y: l.properties.direction.y, z: l.properties.direction.z },\r\n                            color: l.properties.color,\r\n                            intensity: l.properties.intensity,\r\n                            castShadow: l.properties.castShadow,\r\n                            shadowMapResolution: l.properties.shadowMapResolution,\r\n                            shadowMapBias: l.properties.shadowMapBias,\r\n                        }\r\n                    };\r\n                    break;\r\n                case 'hemisphere':\r\n                    lights[lightId] = {\r\n                        id: lightId,\r\n                        name: l.name,\r\n                        type: l.type,\r\n                        order: l.order,\r\n                        properties: {\r\n                            skyColor: l.properties.skyColor,\r\n                            intensity: l.properties.intensity,\r\n                            groundColor: l.properties.groundColor,\r\n                        }\r\n                    };\r\n                    break;\r\n                case 'point':\r\n                    lights[lightId] = {\r\n                        id: lightId,\r\n                        name: l.name,\r\n                        type: l.type,\r\n                        order: l.order,\r\n                        properties: {\r\n                            color: l.properties.color,\r\n                            intensity: l.properties.intensity,\r\n                            position: { x: l.properties.position.x, y: l.properties.position.y, z: l.properties.position.z },\r\n                            distance: l.properties.distance,\r\n                            decay: l.properties.decay,\r\n                        }\r\n                    };\r\n                    break;\r\n                case 'spot':\r\n                    lights[lightId] = {\r\n                        id: lightId,\r\n                        name: l.name,\r\n                        type: l.type,\r\n                        order: l.order,\r\n                        properties: {\r\n                            color: l.properties.color,\r\n                            intensity: l.properties.intensity,\r\n                            position: { x: l.properties.position.x, y: l.properties.position.y, z: l.properties.position.z },\r\n                            target: { x: l.properties.target.x, y: l.properties.target.y, z: l.properties.target.z },\r\n                            distance: l.properties.distance,\r\n                            decay: l.properties.decay,\r\n                            angle: l.properties.angle,\r\n                            penumbra: l.properties.penumbra,\r\n                        }\r\n                    };\r\n                    break;\r\n            }\r\n        }\r\n        settings.viewer.scene.lights.lightScenes[lightSceneId] = {\r\n            id: lightSceneId,\r\n            name: ls.name,\r\n            lights\r\n        };\r\n    }\r\n    settings.viewer.scene.render.ambientOcclusion = newSettings.rendering.ambientOcclusion;\r\n    settings.viewer.scene.render.beautyRenderBlendingDuration = newSettings.rendering.beautyRenderBlendingDuration;\r\n    settings.viewer.scene.render.beautyRenderDelay = newSettings.rendering.beautyRenderDelay;\r\n    settings.viewer.scene.render.shadows = newSettings.rendering.shadows;\r\n    let ordered = [];\r\n    for (let id in newSettings.session) {\r\n        if (newSettings.session[id].displayname)\r\n            settings.parameters.controlNames[id] = newSettings.session[id].displayname;\r\n        if (newSettings.session[id].hidden)\r\n            settings.parameters.parametersHidden.push(id);\r\n        ordered.push({\r\n            id,\r\n            order: newSettings.session[id].order || 0\r\n        });\r\n    }\r\n    ordered.sort((a, b) => ((a.order || Infinity) - (b.order || Infinity)));\r\n    let zeros = ordered.filter(x => x.order === 0);\r\n    ordered = ordered.filter((el) => { return !zeros.includes(el); });\r\n    ordered = zeros.concat(ordered);\r\n    settings.parameters.controlOrder = ordered.map((value) => { return value.id; });\r\n    return settings;\r\n};\r\nexports.convertToPrevious = convertToPrevious;\r\n//# sourceMappingURL=Converter.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Defaults = void 0;\r\nconst Defaults = () => {\r\n    return {\r\n        build_date: '',\r\n        build_version: '',\r\n        settings_version: '3.0',\r\n        ar: {\r\n            enable: true,\r\n            autoScaling: true\r\n        },\r\n        camera: {\r\n            cameraId: '',\r\n            cameras: {},\r\n        },\r\n        environment: {\r\n            clearAlpha: 1.0,\r\n            clearColor: '#ffffff',\r\n            map: 'none',\r\n            mapAsBackground: false,\r\n            mapResolution: '1024'\r\n        },\r\n        environmentGeometry: {\r\n            gridVisibility: true,\r\n            groundPlaneVisibility: true,\r\n        },\r\n        general: {\r\n            transformation: {\r\n                scale: { x: 1, y: 1, z: 1 },\r\n                translation: { x: 0, y: 0, z: 0 },\r\n                rotation: { x: 0, y: 0, z: 0 }\r\n            },\r\n            blurWhenBusy: true,\r\n            commitSettings: false,\r\n            commitParameters: false,\r\n            pointSize: 1.0,\r\n            showMessages: true,\r\n        },\r\n        light: {\r\n            lightSceneId: '',\r\n            lightScenes: {},\r\n        },\r\n        rendering: {\r\n            ambientOcclusion: true,\r\n            ambientOcclusionIntensity: 0.1,\r\n            beautyRenderDelay: 50,\r\n            beautyRenderBlendingDuration: 1500,\r\n            shadows: true,\r\n        },\r\n        session: {},\r\n    };\r\n};\r\nexports.Defaults = Defaults;\r\n//# sourceMappingURL=Defaults.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.validate = void 0;\r\nconst zod_1 = require(\"zod\");\r\nconst orbitControlsSchema = zod_1.z.object({\r\n    autoRotationSpeed: zod_1.z.number(),\r\n    damping: zod_1.z.number(),\r\n    enableAutoRotation: zod_1.z.boolean(),\r\n    enableKeyPan: zod_1.z.boolean(),\r\n    enablePan: zod_1.z.boolean(),\r\n    enableRotation: zod_1.z.boolean(),\r\n    enableZoom: zod_1.z.boolean(),\r\n    input: zod_1.z.object({ keys: zod_1.z.object({ up: zod_1.z.number(), down: zod_1.z.number(), left: zod_1.z.number(), right: zod_1.z.number() }), mouse: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), touch: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), }),\r\n    keyPanSpeed: zod_1.z.number(),\r\n    movementSmoothness: zod_1.z.number(),\r\n    restrictions: zod_1.z.object({\r\n        position: zod_1.z.object({\r\n            cube: zod_1.z.object({ min: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }), max: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }) }),\r\n            sphere: zod_1.z.object({ center: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }), radius: zod_1.z.number().nullable() }),\r\n        }),\r\n        target: zod_1.z.object({\r\n            cube: zod_1.z.object({ min: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }), max: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }) }),\r\n            sphere: zod_1.z.object({ center: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }), radius: zod_1.z.number().nullable() }),\r\n        }),\r\n        rotation: zod_1.z.object({ minPolarAngle: zod_1.z.number(), maxPolarAngle: zod_1.z.number(), minAzimuthAngle: zod_1.z.number().nullable(), maxAzimuthAngle: zod_1.z.number().nullable() }),\r\n        zoom: zod_1.z.object({ minDistance: zod_1.z.number(), maxDistance: zod_1.z.number().nullable() }),\r\n    }),\r\n    rotationSpeed: zod_1.z.number(),\r\n    panSpeed: zod_1.z.number(),\r\n    zoomSpeed: zod_1.z.number(),\r\n});\r\nconst orthographicControlsSchema = zod_1.z.object({\r\n    damping: zod_1.z.number(),\r\n    enableKeyPan: zod_1.z.boolean(),\r\n    enablePan: zod_1.z.boolean(),\r\n    enableZoom: zod_1.z.boolean(),\r\n    input: zod_1.z.object({ keys: zod_1.z.object({ up: zod_1.z.number(), down: zod_1.z.number(), left: zod_1.z.number(), right: zod_1.z.number() }), mouse: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), touch: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), }),\r\n    keyPanSpeed: zod_1.z.number(),\r\n    movementSmoothness: zod_1.z.number(),\r\n    panSpeed: zod_1.z.number(),\r\n    zoomSpeed: zod_1.z.number(),\r\n});\r\nconst orthographicCameraSchema = zod_1.z.object({\r\n    name: zod_1.z.string().optional(),\r\n    type: zod_1.z.string(),\r\n    autoAdjust: zod_1.z.boolean(),\r\n    cameraMovementDuration: zod_1.z.number(),\r\n    controls: orthographicControlsSchema,\r\n    enableCameraControls: zod_1.z.boolean(),\r\n    position: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    revertAtMouseUp: zod_1.z.boolean(),\r\n    revertAtMouseUpDuration: zod_1.z.number(),\r\n    target: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    zoomExtentsFactor: zod_1.z.number().positive(),\r\n});\r\nconst perspectiveCameraSchema = zod_1.z.object({\r\n    name: zod_1.z.string().optional(),\r\n    type: zod_1.z.string(),\r\n    autoAdjust: zod_1.z.boolean(),\r\n    cameraMovementDuration: zod_1.z.number(),\r\n    controls: orbitControlsSchema,\r\n    enableCameraControls: zod_1.z.boolean(),\r\n    fov: zod_1.z.number().positive(),\r\n    position: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    revertAtMouseUp: zod_1.z.boolean(),\r\n    revertAtMouseUpDuration: zod_1.z.number(),\r\n    target: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    zoomExtentsFactor: zod_1.z.number().positive(),\r\n});\r\nconst cameraSchema = zod_1.z.record(zod_1.z.union([perspectiveCameraSchema, orthographicCameraSchema]));\r\nconst ambientLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number()\r\n});\r\nconst directionalLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    direction: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    castShadow: zod_1.z.boolean(),\r\n    shadowMapResolution: zod_1.z.number().optional(),\r\n    shadowMapBias: zod_1.z.number().optional()\r\n});\r\nconst hemisphereLightSchema = zod_1.z.object({\r\n    skyColor: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    groundColor: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n});\r\nconst pointLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    position: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    distance: zod_1.z.number(),\r\n    decay: zod_1.z.number(),\r\n});\r\nconst spotLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    position: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    target: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    distance: zod_1.z.number(),\r\n    decay: zod_1.z.number(),\r\n    angle: zod_1.z.number(),\r\n    penumbra: zod_1.z.number(),\r\n});\r\nconst lightSchema = zod_1.z.record(zod_1.z.object({\r\n    name: zod_1.z.string().optional(),\r\n    lights: zod_1.z.record(zod_1.z.object({\r\n        name: zod_1.z.string().optional(),\r\n        type: zod_1.z.string(),\r\n        order: zod_1.z.number().optional(),\r\n        properties: zod_1.z.union([ambientLightSchema, directionalLightSchema, hemisphereLightSchema, pointLightSchema, spotLightSchema])\r\n    }))\r\n}));\r\nconst schema = zod_1.z.object({\r\n    build_date: zod_1.z.string().optional(),\r\n    build_version: zod_1.z.string().optional(),\r\n    settings_version: zod_1.z.string(),\r\n    ar: zod_1.z.object({\r\n        enable: zod_1.z.boolean(),\r\n        autoScaling: zod_1.z.boolean(),\r\n    }).optional(),\r\n    camera: zod_1.z.object({\r\n        cameraId: zod_1.z.string(),\r\n        cameras: cameraSchema\r\n    }),\r\n    environment: zod_1.z.object({\r\n        clearAlpha: zod_1.z.number(),\r\n        clearColor: zod_1.z.string(),\r\n        map: zod_1.z.union([zod_1.z.string(), zod_1.z.string().array()]),\r\n        mapAsBackground: zod_1.z.boolean(),\r\n        mapResolution: zod_1.z.string()\r\n    }),\r\n    environmentGeometry: zod_1.z.object({\r\n        gridVisibility: zod_1.z.boolean(),\r\n        groundPlaneVisibility: zod_1.z.boolean(),\r\n    }),\r\n    general: zod_1.z.object({\r\n        transformation: zod_1.z.object({\r\n            scale: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n            translation: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n            rotation: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() })\r\n        }),\r\n        blurWhenBusy: zod_1.z.boolean(),\r\n        commitSettings: zod_1.z.boolean(),\r\n        commitParameters: zod_1.z.boolean(),\r\n        pointSize: zod_1.z.number(),\r\n        showMessages: zod_1.z.boolean(),\r\n    }),\r\n    light: zod_1.z.object({\r\n        lightSceneId: zod_1.z.string().optional(),\r\n        lightScenes: lightSchema,\r\n    }),\r\n    rendering: zod_1.z.object({\r\n        ambientOcclusion: zod_1.z.boolean(),\r\n        ambientOcclusionIntensity: zod_1.z.number().min(0),\r\n        beautyRenderDelay: zod_1.z.number(),\r\n        beautyRenderBlendingDuration: zod_1.z.number(),\r\n        shadows: zod_1.z.boolean(),\r\n    }),\r\n    session: zod_1.z.record(zod_1.z.object({\r\n        order: zod_1.z.number().optional(),\r\n        displayname: zod_1.z.string().optional(),\r\n        hidden: zod_1.z.boolean().optional()\r\n    })),\r\n}).strict();\r\nconst validate = (s) => {\r\n    const result = schema.parse(s);\r\n    s = result;\r\n};\r\nexports.validate = validate;\r\n//# sourceMappingURL=Validator.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.convertToPrevious = exports.convertFromPrevious = void 0;\r\nconst Defaults_1 = require(\"../v3/Defaults\");\r\nconst Defaults_2 = require(\"./Defaults\");\r\nconst convertFromPrevious = (s, v) => {\r\n    const settings = Defaults_2.Defaults();\r\n    const oldSettings = s;\r\n    settings.ar = oldSettings.ar;\r\n    settings.build_date = oldSettings.build_date;\r\n    settings.build_version = oldSettings.build_version;\r\n    settings.camera = oldSettings.camera;\r\n    settings.environment = oldSettings.environment;\r\n    settings.general = oldSettings.general;\r\n    settings.light = oldSettings.light;\r\n    settings.environmentGeometry.gridVisibility = oldSettings.environmentGeometry.gridVisibility;\r\n    settings.environmentGeometry.groundPlaneVisibility = oldSettings.environmentGeometry.groundPlaneVisibility;\r\n    settings.rendering.ambientOcclusion = oldSettings.rendering.ambientOcclusion;\r\n    settings.rendering.ambientOcclusionIntensity = oldSettings.rendering.ambientOcclusionIntensity;\r\n    settings.rendering.beautyRenderBlendingDuration = oldSettings.rendering.beautyRenderBlendingDuration;\r\n    settings.rendering.beautyRenderDelay = oldSettings.rendering.beautyRenderDelay;\r\n    settings.rendering.shadows = oldSettings.rendering.shadows;\r\n    settings.session = oldSettings.session;\r\n    if (v === '3.0') {\r\n        settings.environmentGeometry.gridColor = '#ffffff';\r\n        settings.environmentGeometry.groundPlaneColor = '#d3d3d3';\r\n        settings.rendering.outputEncoding = 'linear';\r\n        settings.rendering.physicallyCorrectLights = false;\r\n        settings.rendering.textureEncoding = 'linear';\r\n        settings.rendering.toneMapping = 'none';\r\n        settings.rendering.toneMappingExposure = 1;\r\n    }\r\n    else {\r\n        settings.environmentGeometry.gridColor = '#ffffff';\r\n        settings.environmentGeometry.groundPlaneColor = '#d3d3d3';\r\n        settings.rendering.outputEncoding = 'srgb';\r\n        settings.rendering.physicallyCorrectLights = false;\r\n        settings.rendering.textureEncoding = 'srgb';\r\n        settings.rendering.toneMapping = 'none';\r\n        settings.rendering.toneMappingExposure = 1;\r\n    }\r\n    return settings;\r\n};\r\nexports.convertFromPrevious = convertFromPrevious;\r\nconst convertToPrevious = (s, v) => {\r\n    const settings = Defaults_1.Defaults();\r\n    const newSettings = s;\r\n    settings.ar = newSettings.ar;\r\n    settings.build_date = newSettings.build_date;\r\n    settings.build_version = newSettings.build_version;\r\n    settings.camera = newSettings.camera;\r\n    settings.environment = newSettings.environment;\r\n    settings.environmentGeometry.gridVisibility = newSettings.environmentGeometry.gridVisibility;\r\n    settings.environmentGeometry.groundPlaneVisibility = newSettings.environmentGeometry.groundPlaneVisibility;\r\n    settings.general = newSettings.general;\r\n    settings.light = newSettings.light;\r\n    settings.rendering.ambientOcclusion = newSettings.rendering.ambientOcclusion;\r\n    settings.rendering.ambientOcclusionIntensity = newSettings.rendering.ambientOcclusionIntensity;\r\n    settings.rendering.beautyRenderBlendingDuration = newSettings.rendering.beautyRenderBlendingDuration;\r\n    settings.rendering.beautyRenderDelay = newSettings.rendering.beautyRenderDelay;\r\n    settings.rendering.shadows = newSettings.rendering.shadows;\r\n    settings.session = newSettings.session;\r\n    return settings;\r\n};\r\nexports.convertToPrevious = convertToPrevious;\r\n//# sourceMappingURL=Converter.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Defaults = void 0;\r\nconst Defaults = () => {\r\n    return {\r\n        build_date: '',\r\n        build_version: '',\r\n        settings_version: '3.1',\r\n        ar: {\r\n            enable: true,\r\n            autoScaling: true\r\n        },\r\n        camera: {\r\n            cameraId: '',\r\n            cameras: {},\r\n        },\r\n        environment: {\r\n            clearAlpha: 1.0,\r\n            clearColor: '#ffffff',\r\n            map: 'photo_studio',\r\n            mapAsBackground: false,\r\n            mapResolution: '1024'\r\n        },\r\n        environmentGeometry: {\r\n            gridColor: '#44444426',\r\n            gridVisibility: true,\r\n            groundPlaneColor: '#636363ff',\r\n            groundPlaneVisibility: true,\r\n        },\r\n        general: {\r\n            transformation: {\r\n                scale: { x: 1, y: 1, z: 1 },\r\n                translation: { x: 0, y: 0, z: 0 },\r\n                rotation: { x: 0, y: 0, z: 0 }\r\n            },\r\n            blurWhenBusy: true,\r\n            commitSettings: false,\r\n            commitParameters: false,\r\n            pointSize: 1.0,\r\n            showMessages: true,\r\n        },\r\n        light: {\r\n            lightSceneId: '',\r\n            lightScenes: {},\r\n        },\r\n        rendering: {\r\n            ambientOcclusion: false,\r\n            ambientOcclusionIntensity: 0.1,\r\n            beautyRenderDelay: 50,\r\n            beautyRenderBlendingDuration: 1500,\r\n            outputEncoding: 'srgb',\r\n            physicallyCorrectLights: true,\r\n            shadows: true,\r\n            textureEncoding: 'srgb',\r\n            toneMapping: 'none',\r\n            toneMappingExposure: 1,\r\n        },\r\n        session: {},\r\n    };\r\n};\r\nexports.Defaults = Defaults;\r\n//# sourceMappingURL=Defaults.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.validate = void 0;\r\nconst zod_1 = require(\"zod\");\r\nconst orbitControlsSchema = zod_1.z.object({\r\n    autoRotationSpeed: zod_1.z.number(),\r\n    damping: zod_1.z.number(),\r\n    enableAutoRotation: zod_1.z.boolean(),\r\n    enableKeyPan: zod_1.z.boolean(),\r\n    enablePan: zod_1.z.boolean(),\r\n    enableRotation: zod_1.z.boolean(),\r\n    enableZoom: zod_1.z.boolean(),\r\n    input: zod_1.z.object({ keys: zod_1.z.object({ up: zod_1.z.number(), down: zod_1.z.number(), left: zod_1.z.number(), right: zod_1.z.number() }), mouse: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), touch: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), }),\r\n    keyPanSpeed: zod_1.z.number(),\r\n    movementSmoothness: zod_1.z.number(),\r\n    restrictions: zod_1.z.object({\r\n        position: zod_1.z.object({\r\n            cube: zod_1.z.object({ min: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }), max: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }) }),\r\n            sphere: zod_1.z.object({ center: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }), radius: zod_1.z.number().nullable() }),\r\n        }),\r\n        target: zod_1.z.object({\r\n            cube: zod_1.z.object({ min: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }), max: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }) }),\r\n            sphere: zod_1.z.object({ center: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }), radius: zod_1.z.number().nullable() }),\r\n        }),\r\n        rotation: zod_1.z.object({ minPolarAngle: zod_1.z.number(), maxPolarAngle: zod_1.z.number(), minAzimuthAngle: zod_1.z.number().nullable(), maxAzimuthAngle: zod_1.z.number().nullable() }),\r\n        zoom: zod_1.z.object({ minDistance: zod_1.z.number(), maxDistance: zod_1.z.number().nullable() }),\r\n    }),\r\n    rotationSpeed: zod_1.z.number(),\r\n    panSpeed: zod_1.z.number(),\r\n    zoomSpeed: zod_1.z.number(),\r\n});\r\nconst orthographicControlsSchema = zod_1.z.object({\r\n    damping: zod_1.z.number(),\r\n    enableKeyPan: zod_1.z.boolean(),\r\n    enablePan: zod_1.z.boolean(),\r\n    enableZoom: zod_1.z.boolean(),\r\n    input: zod_1.z.object({ keys: zod_1.z.object({ up: zod_1.z.number(), down: zod_1.z.number(), left: zod_1.z.number(), right: zod_1.z.number() }), mouse: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), touch: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), }),\r\n    keyPanSpeed: zod_1.z.number(),\r\n    movementSmoothness: zod_1.z.number(),\r\n    panSpeed: zod_1.z.number(),\r\n    zoomSpeed: zod_1.z.number(),\r\n});\r\nconst orthographicCameraSchema = zod_1.z.object({\r\n    name: zod_1.z.string().optional(),\r\n    type: zod_1.z.string(),\r\n    autoAdjust: zod_1.z.boolean(),\r\n    cameraMovementDuration: zod_1.z.number(),\r\n    controls: orthographicControlsSchema,\r\n    enableCameraControls: zod_1.z.boolean(),\r\n    position: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    revertAtMouseUp: zod_1.z.boolean(),\r\n    revertAtMouseUpDuration: zod_1.z.number(),\r\n    target: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    zoomExtentsFactor: zod_1.z.number().positive(),\r\n});\r\nconst perspectiveCameraSchema = zod_1.z.object({\r\n    name: zod_1.z.string().optional(),\r\n    type: zod_1.z.string(),\r\n    autoAdjust: zod_1.z.boolean(),\r\n    cameraMovementDuration: zod_1.z.number(),\r\n    controls: orbitControlsSchema,\r\n    enableCameraControls: zod_1.z.boolean(),\r\n    fov: zod_1.z.number().positive(),\r\n    position: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    revertAtMouseUp: zod_1.z.boolean(),\r\n    revertAtMouseUpDuration: zod_1.z.number(),\r\n    target: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    zoomExtentsFactor: zod_1.z.number().positive(),\r\n});\r\nconst cameraSchema = zod_1.z.record(zod_1.z.union([perspectiveCameraSchema, orthographicCameraSchema]));\r\nconst ambientLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number()\r\n});\r\nconst directionalLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    direction: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    castShadow: zod_1.z.boolean(),\r\n    shadowMapResolution: zod_1.z.number().optional(),\r\n    shadowMapBias: zod_1.z.number().optional()\r\n});\r\nconst hemisphereLightSchema = zod_1.z.object({\r\n    skyColor: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    groundColor: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n});\r\nconst pointLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    position: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    distance: zod_1.z.number(),\r\n    decay: zod_1.z.number(),\r\n});\r\nconst spotLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    position: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    target: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    distance: zod_1.z.number(),\r\n    decay: zod_1.z.number(),\r\n    angle: zod_1.z.number(),\r\n    penumbra: zod_1.z.number(),\r\n});\r\nconst lightSchema = zod_1.z.record(zod_1.z.object({\r\n    name: zod_1.z.string().optional(),\r\n    lights: zod_1.z.record(zod_1.z.object({\r\n        name: zod_1.z.string().optional(),\r\n        type: zod_1.z.string(),\r\n        order: zod_1.z.number().optional(),\r\n        properties: zod_1.z.union([ambientLightSchema, directionalLightSchema, hemisphereLightSchema, pointLightSchema, spotLightSchema])\r\n    }))\r\n}));\r\nconst schema = zod_1.z.object({\r\n    build_date: zod_1.z.string().optional(),\r\n    build_version: zod_1.z.string().optional(),\r\n    settings_version: zod_1.z.string(),\r\n    ar: zod_1.z.object({\r\n        enable: zod_1.z.boolean(),\r\n        autoScaling: zod_1.z.boolean(),\r\n    }).optional(),\r\n    camera: zod_1.z.object({\r\n        cameraId: zod_1.z.string(),\r\n        cameras: cameraSchema\r\n    }),\r\n    environment: zod_1.z.object({\r\n        clearAlpha: zod_1.z.number(),\r\n        clearColor: zod_1.z.string(),\r\n        map: zod_1.z.union([zod_1.z.string(), zod_1.z.string().array()]),\r\n        mapAsBackground: zod_1.z.boolean(),\r\n        mapResolution: zod_1.z.string()\r\n    }),\r\n    environmentGeometry: zod_1.z.object({\r\n        gridColor: zod_1.z.string(),\r\n        gridVisibility: zod_1.z.boolean(),\r\n        groundPlaneColor: zod_1.z.string(),\r\n        groundPlaneVisibility: zod_1.z.boolean(),\r\n    }),\r\n    general: zod_1.z.object({\r\n        transformation: zod_1.z.object({\r\n            scale: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n            translation: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n            rotation: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() })\r\n        }),\r\n        blurWhenBusy: zod_1.z.boolean(),\r\n        commitSettings: zod_1.z.boolean(),\r\n        commitParameters: zod_1.z.boolean(),\r\n        pointSize: zod_1.z.number(),\r\n        showMessages: zod_1.z.boolean(),\r\n    }),\r\n    light: zod_1.z.object({\r\n        lightSceneId: zod_1.z.string().optional(),\r\n        lightScenes: lightSchema,\r\n    }),\r\n    rendering: zod_1.z.object({\r\n        ambientOcclusion: zod_1.z.boolean(),\r\n        ambientOcclusionIntensity: zod_1.z.number().min(0),\r\n        beautyRenderDelay: zod_1.z.number(),\r\n        beautyRenderBlendingDuration: zod_1.z.number(),\r\n        outputEncoding: zod_1.z.string(),\r\n        physicallyCorrectLights: zod_1.z.boolean(),\r\n        shadows: zod_1.z.boolean(),\r\n        textureEncoding: zod_1.z.string(),\r\n        toneMapping: zod_1.z.string(),\r\n        toneMappingExposure: zod_1.z.number(),\r\n    }),\r\n    session: zod_1.z.record(zod_1.z.object({\r\n        order: zod_1.z.number().optional(),\r\n        displayname: zod_1.z.string().optional(),\r\n        hidden: zod_1.z.boolean().optional()\r\n    })),\r\n}).strict();\r\nconst validate = (s) => {\r\n    const result = schema.parse(s);\r\n    s = result;\r\n};\r\nexports.validate = validate;\r\n//# sourceMappingURL=Validator.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.convertToPrevious = exports.convertFromPrevious = void 0;\r\nconst Defaults_1 = require(\"../v3_1/Defaults\");\r\nconst Defaults_2 = require(\"./Defaults\");\r\nconst convertFromPrevious = (s, v) => {\r\n    const settings = Defaults_2.Defaults();\r\n    const oldSettings = s;\r\n    settings.ar = oldSettings.ar;\r\n    settings.build_date = oldSettings.build_date;\r\n    settings.build_version = oldSettings.build_version;\r\n    settings.camera = oldSettings.camera;\r\n    settings.general = oldSettings.general;\r\n    settings.light = oldSettings.light;\r\n    settings.session = oldSettings.session;\r\n    settings.environment.clearAlpha = oldSettings.environment.clearAlpha;\r\n    settings.environment.clearColor = oldSettings.environment.clearColor;\r\n    settings.environment.map = oldSettings.environment.map;\r\n    settings.environment.mapAsBackground = oldSettings.environment.mapAsBackground;\r\n    settings.environment.mapResolution = oldSettings.environment.mapResolution;\r\n    settings.environmentGeometry.gridColor = oldSettings.environmentGeometry.gridColor;\r\n    settings.environmentGeometry.gridVisibility = oldSettings.environmentGeometry.gridVisibility;\r\n    settings.environmentGeometry.groundPlaneColor = oldSettings.environmentGeometry.groundPlaneColor;\r\n    settings.environmentGeometry.groundPlaneVisibility = oldSettings.environmentGeometry.groundPlaneVisibility;\r\n    settings.rendering.ambientOcclusion = oldSettings.rendering.ambientOcclusion;\r\n    settings.rendering.ambientOcclusionIntensity = oldSettings.rendering.ambientOcclusionIntensity;\r\n    settings.rendering.beautyRenderBlendingDuration = oldSettings.rendering.beautyRenderBlendingDuration;\r\n    settings.rendering.beautyRenderDelay = oldSettings.rendering.beautyRenderDelay;\r\n    settings.rendering.outputEncoding = oldSettings.rendering.outputEncoding;\r\n    settings.rendering.physicallyCorrectLights = oldSettings.rendering.physicallyCorrectLights;\r\n    settings.rendering.shadows = oldSettings.rendering.shadows;\r\n    settings.rendering.textureEncoding = oldSettings.rendering.textureEncoding;\r\n    settings.rendering.toneMapping = oldSettings.rendering.toneMapping;\r\n    settings.rendering.toneMappingExposure = oldSettings.rendering.toneMappingExposure;\r\n    return settings;\r\n};\r\nexports.convertFromPrevious = convertFromPrevious;\r\nconst convertToPrevious = (s, v) => {\r\n    const settings = Defaults_1.Defaults();\r\n    const newSettings = s;\r\n    settings.ar = newSettings.ar;\r\n    settings.build_date = newSettings.build_date;\r\n    settings.build_version = newSettings.build_version;\r\n    settings.camera = newSettings.camera;\r\n    settings.general = newSettings.general;\r\n    settings.light = newSettings.light;\r\n    settings.session = newSettings.session;\r\n    settings.environment.clearAlpha = newSettings.environment.clearAlpha;\r\n    settings.environment.clearColor = newSettings.environment.clearColor;\r\n    settings.environment.map = newSettings.environment.map;\r\n    settings.environment.mapAsBackground = newSettings.environment.mapAsBackground;\r\n    settings.environment.mapResolution = newSettings.environment.mapResolution;\r\n    settings.environmentGeometry.gridColor = newSettings.environmentGeometry.gridColor;\r\n    settings.environmentGeometry.gridVisibility = newSettings.environmentGeometry.gridVisibility;\r\n    settings.environmentGeometry.groundPlaneColor = newSettings.environmentGeometry.groundPlaneColor;\r\n    settings.environmentGeometry.groundPlaneVisibility = newSettings.environmentGeometry.groundPlaneVisibility;\r\n    settings.rendering.ambientOcclusion = newSettings.rendering.ambientOcclusion;\r\n    settings.rendering.ambientOcclusionIntensity = newSettings.rendering.ambientOcclusionIntensity;\r\n    settings.rendering.beautyRenderBlendingDuration = newSettings.rendering.beautyRenderBlendingDuration;\r\n    settings.rendering.beautyRenderDelay = newSettings.rendering.beautyRenderDelay;\r\n    settings.rendering.outputEncoding = newSettings.rendering.outputEncoding;\r\n    settings.rendering.physicallyCorrectLights = newSettings.rendering.physicallyCorrectLights;\r\n    settings.rendering.shadows = newSettings.rendering.shadows;\r\n    settings.rendering.textureEncoding = newSettings.rendering.textureEncoding;\r\n    settings.rendering.toneMapping = newSettings.rendering.toneMapping;\r\n    settings.rendering.toneMappingExposure = newSettings.rendering.toneMappingExposure;\r\n    return settings;\r\n};\r\nexports.convertToPrevious = convertToPrevious;\r\n//# sourceMappingURL=Converter.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Defaults = void 0;\r\nconst Defaults = () => {\r\n    return {\r\n        build_date: '',\r\n        build_version: '',\r\n        settings_version: '3.2',\r\n        ar: {\r\n            enable: true,\r\n            autoScaling: true\r\n        },\r\n        camera: {\r\n            cameraId: '',\r\n            cameras: {},\r\n        },\r\n        environment: {\r\n            clearAlpha: 1.0,\r\n            clearColor: '#ffffff',\r\n            map: 'photo_studio',\r\n            mapAsBackground: false,\r\n            mapResolution: '1024'\r\n        },\r\n        environmentGeometry: {\r\n            gridColor: '#44444426',\r\n            gridVisibility: true,\r\n            groundPlaneColor: '#636363ff',\r\n            groundPlaneVisibility: true,\r\n            groundPlaneShadowColor: '#d3d3d3ff',\r\n            groundPlaneShadowVisibility: false,\r\n        },\r\n        general: {\r\n            transformation: {\r\n                scale: { x: 1, y: 1, z: 1 },\r\n                translation: { x: 0, y: 0, z: 0 },\r\n                rotation: { x: 0, y: 0, z: 0 }\r\n            },\r\n            blurWhenBusy: true,\r\n            commitSettings: false,\r\n            commitParameters: false,\r\n            pointSize: 1.0,\r\n            showMessages: true,\r\n        },\r\n        light: {\r\n            lightSceneId: '',\r\n            lightScenes: {},\r\n        },\r\n        rendering: {\r\n            ambientOcclusion: false,\r\n            ambientOcclusionIntensity: 0.1,\r\n            beautyRenderDelay: 50,\r\n            beautyRenderBlendingDuration: 1500,\r\n            lights: true,\r\n            outputEncoding: 'srgb',\r\n            physicallyCorrectLights: true,\r\n            shadows: true,\r\n            textureEncoding: 'srgb',\r\n            toneMapping: 'none',\r\n            toneMappingExposure: 1,\r\n        },\r\n        session: {},\r\n    };\r\n};\r\nexports.Defaults = Defaults;\r\n//# sourceMappingURL=Defaults.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.validate = void 0;\r\nconst zod_1 = require(\"zod\");\r\nconst orbitControlsSchema = zod_1.z.object({\r\n    autoRotationSpeed: zod_1.z.number(),\r\n    damping: zod_1.z.number(),\r\n    enableAutoRotation: zod_1.z.boolean(),\r\n    enableKeyPan: zod_1.z.boolean(),\r\n    enablePan: zod_1.z.boolean(),\r\n    enableRotation: zod_1.z.boolean(),\r\n    enableZoom: zod_1.z.boolean(),\r\n    input: zod_1.z.object({ keys: zod_1.z.object({ up: zod_1.z.number(), down: zod_1.z.number(), left: zod_1.z.number(), right: zod_1.z.number() }), mouse: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), touch: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), }),\r\n    keyPanSpeed: zod_1.z.number(),\r\n    movementSmoothness: zod_1.z.number(),\r\n    restrictions: zod_1.z.object({\r\n        position: zod_1.z.object({\r\n            cube: zod_1.z.object({ min: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }), max: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }) }),\r\n            sphere: zod_1.z.object({ center: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }), radius: zod_1.z.number().nullable() }),\r\n        }),\r\n        target: zod_1.z.object({\r\n            cube: zod_1.z.object({ min: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }), max: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }) }),\r\n            sphere: zod_1.z.object({ center: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }), radius: zod_1.z.number().nullable() }),\r\n        }),\r\n        rotation: zod_1.z.object({ minPolarAngle: zod_1.z.number(), maxPolarAngle: zod_1.z.number(), minAzimuthAngle: zod_1.z.number().nullable(), maxAzimuthAngle: zod_1.z.number().nullable() }),\r\n        zoom: zod_1.z.object({ minDistance: zod_1.z.number(), maxDistance: zod_1.z.number().nullable() }),\r\n    }),\r\n    rotationSpeed: zod_1.z.number(),\r\n    panSpeed: zod_1.z.number(),\r\n    zoomSpeed: zod_1.z.number(),\r\n});\r\nconst orthographicControlsSchema = zod_1.z.object({\r\n    damping: zod_1.z.number(),\r\n    enableKeyPan: zod_1.z.boolean(),\r\n    enablePan: zod_1.z.boolean(),\r\n    enableZoom: zod_1.z.boolean(),\r\n    input: zod_1.z.object({ keys: zod_1.z.object({ up: zod_1.z.number(), down: zod_1.z.number(), left: zod_1.z.number(), right: zod_1.z.number() }), mouse: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), touch: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), }),\r\n    keyPanSpeed: zod_1.z.number(),\r\n    movementSmoothness: zod_1.z.number(),\r\n    panSpeed: zod_1.z.number(),\r\n    zoomSpeed: zod_1.z.number(),\r\n});\r\nconst orthographicCameraSchema = zod_1.z.object({\r\n    name: zod_1.z.string().optional(),\r\n    type: zod_1.z.string(),\r\n    autoAdjust: zod_1.z.boolean(),\r\n    cameraMovementDuration: zod_1.z.number(),\r\n    controls: orthographicControlsSchema,\r\n    enableCameraControls: zod_1.z.boolean(),\r\n    position: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    revertAtMouseUp: zod_1.z.boolean(),\r\n    revertAtMouseUpDuration: zod_1.z.number(),\r\n    target: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    zoomExtentsFactor: zod_1.z.number().positive(),\r\n});\r\nconst perspectiveCameraSchema = zod_1.z.object({\r\n    name: zod_1.z.string().optional(),\r\n    type: zod_1.z.string(),\r\n    autoAdjust: zod_1.z.boolean(),\r\n    cameraMovementDuration: zod_1.z.number(),\r\n    controls: orbitControlsSchema,\r\n    enableCameraControls: zod_1.z.boolean(),\r\n    fov: zod_1.z.number().positive(),\r\n    position: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    revertAtMouseUp: zod_1.z.boolean(),\r\n    revertAtMouseUpDuration: zod_1.z.number(),\r\n    target: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    zoomExtentsFactor: zod_1.z.number().positive(),\r\n});\r\nconst cameraSchema = zod_1.z.record(zod_1.z.union([perspectiveCameraSchema, orthographicCameraSchema]));\r\nconst ambientLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number()\r\n});\r\nconst directionalLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    direction: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    castShadow: zod_1.z.boolean(),\r\n    shadowMapResolution: zod_1.z.number().optional(),\r\n    shadowMapBias: zod_1.z.number().optional()\r\n});\r\nconst hemisphereLightSchema = zod_1.z.object({\r\n    skyColor: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    groundColor: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n});\r\nconst pointLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    position: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    distance: zod_1.z.number(),\r\n    decay: zod_1.z.number(),\r\n});\r\nconst spotLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    position: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    target: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    distance: zod_1.z.number(),\r\n    decay: zod_1.z.number(),\r\n    angle: zod_1.z.number(),\r\n    penumbra: zod_1.z.number(),\r\n});\r\nconst lightSchema = zod_1.z.record(zod_1.z.object({\r\n    name: zod_1.z.string().optional(),\r\n    lights: zod_1.z.record(zod_1.z.object({\r\n        name: zod_1.z.string().optional(),\r\n        type: zod_1.z.string(),\r\n        order: zod_1.z.number().optional(),\r\n        properties: zod_1.z.union([ambientLightSchema, directionalLightSchema, hemisphereLightSchema, pointLightSchema, spotLightSchema])\r\n    }))\r\n}));\r\nconst schema = zod_1.z.object({\r\n    build_date: zod_1.z.string().optional(),\r\n    build_version: zod_1.z.string().optional(),\r\n    settings_version: zod_1.z.string(),\r\n    ar: zod_1.z.object({\r\n        enable: zod_1.z.boolean(),\r\n        autoScaling: zod_1.z.boolean(),\r\n    }).optional(),\r\n    camera: zod_1.z.object({\r\n        cameraId: zod_1.z.string(),\r\n        cameras: cameraSchema\r\n    }),\r\n    environment: zod_1.z.object({\r\n        clearAlpha: zod_1.z.number(),\r\n        clearColor: zod_1.z.string(),\r\n        map: zod_1.z.union([zod_1.z.string(), zod_1.z.string().array()]),\r\n        mapAsBackground: zod_1.z.boolean(),\r\n        mapResolution: zod_1.z.string()\r\n    }),\r\n    environmentGeometry: zod_1.z.object({\r\n        gridColor: zod_1.z.string(),\r\n        gridVisibility: zod_1.z.boolean(),\r\n        groundPlaneColor: zod_1.z.string(),\r\n        groundPlaneVisibility: zod_1.z.boolean(),\r\n        groundPlaneShadowColor: zod_1.z.string(),\r\n        groundPlaneShadowVisibility: zod_1.z.boolean(),\r\n    }),\r\n    general: zod_1.z.object({\r\n        transformation: zod_1.z.object({\r\n            scale: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n            translation: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n            rotation: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() })\r\n        }),\r\n        blurWhenBusy: zod_1.z.boolean(),\r\n        commitSettings: zod_1.z.boolean(),\r\n        commitParameters: zod_1.z.boolean(),\r\n        pointSize: zod_1.z.number(),\r\n        showMessages: zod_1.z.boolean(),\r\n    }),\r\n    light: zod_1.z.object({\r\n        lightSceneId: zod_1.z.string().optional(),\r\n        lightScenes: lightSchema,\r\n    }),\r\n    rendering: zod_1.z.object({\r\n        ambientOcclusion: zod_1.z.boolean(),\r\n        ambientOcclusionIntensity: zod_1.z.number().min(0),\r\n        beautyRenderDelay: zod_1.z.number(),\r\n        beautyRenderBlendingDuration: zod_1.z.number(),\r\n        lights: zod_1.z.boolean(),\r\n        outputEncoding: zod_1.z.string(),\r\n        physicallyCorrectLights: zod_1.z.boolean(),\r\n        shadows: zod_1.z.boolean(),\r\n        textureEncoding: zod_1.z.string(),\r\n        toneMapping: zod_1.z.string(),\r\n        toneMappingExposure: zod_1.z.number(),\r\n    }),\r\n    session: zod_1.z.record(zod_1.z.object({\r\n        order: zod_1.z.number().optional(),\r\n        displayname: zod_1.z.string().optional(),\r\n        hidden: zod_1.z.boolean().optional()\r\n    })),\r\n}).strict();\r\nconst validate = (s) => {\r\n    const result = schema.parse(s);\r\n    s = result;\r\n};\r\nexports.validate = validate;\r\n//# sourceMappingURL=Validator.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.convertToPrevious = exports.convertFromPrevious = void 0;\r\nconst Defaults_1 = require(\"../v3_2/Defaults\");\r\nconst Defaults_2 = require(\"./Defaults\");\r\nconst convertFromPrevious = (s, v) => {\r\n    const settings = Defaults_2.Defaults();\r\n    const oldSettings = s;\r\n    settings.ar = oldSettings.ar;\r\n    settings.build_date = oldSettings.build_date;\r\n    settings.build_version = oldSettings.build_version;\r\n    settings.camera = oldSettings.camera;\r\n    settings.general = oldSettings.general;\r\n    settings.light = oldSettings.light;\r\n    settings.session = oldSettings.session;\r\n    settings.environment = oldSettings.environment;\r\n    settings.environmentGeometry = oldSettings.environmentGeometry;\r\n    settings.rendering.ambientOcclusion = oldSettings.rendering.ambientOcclusion;\r\n    settings.rendering.ambientOcclusionIntensity = oldSettings.rendering.ambientOcclusionIntensity;\r\n    settings.rendering.automaticColorAdjustment = false;\r\n    settings.rendering.beautyRenderBlendingDuration = oldSettings.rendering.beautyRenderBlendingDuration;\r\n    settings.rendering.beautyRenderDelay = oldSettings.rendering.beautyRenderDelay;\r\n    settings.rendering.outputEncoding = oldSettings.rendering.outputEncoding;\r\n    settings.rendering.physicallyCorrectLights = oldSettings.rendering.physicallyCorrectLights;\r\n    settings.rendering.shadows = oldSettings.rendering.shadows;\r\n    settings.rendering.textureEncoding = oldSettings.rendering.textureEncoding;\r\n    settings.rendering.toneMapping = oldSettings.rendering.toneMapping;\r\n    settings.rendering.toneMappingExposure = oldSettings.rendering.toneMappingExposure;\r\n    return settings;\r\n};\r\nexports.convertFromPrevious = convertFromPrevious;\r\nconst convertToPrevious = (s, v) => {\r\n    const settings = Defaults_1.Defaults();\r\n    const newSettings = s;\r\n    settings.ar = newSettings.ar;\r\n    settings.build_date = newSettings.build_date;\r\n    settings.build_version = newSettings.build_version;\r\n    settings.camera = newSettings.camera;\r\n    settings.general = newSettings.general;\r\n    settings.light = newSettings.light;\r\n    settings.session = newSettings.session;\r\n    settings.environment = newSettings.environment;\r\n    settings.environmentGeometry = newSettings.environmentGeometry;\r\n    settings.rendering.ambientOcclusion = newSettings.rendering.ambientOcclusion;\r\n    settings.rendering.ambientOcclusionIntensity = newSettings.rendering.ambientOcclusionIntensity;\r\n    settings.rendering.beautyRenderBlendingDuration = newSettings.rendering.beautyRenderBlendingDuration;\r\n    settings.rendering.beautyRenderDelay = newSettings.rendering.beautyRenderDelay;\r\n    settings.rendering.outputEncoding = newSettings.rendering.outputEncoding;\r\n    settings.rendering.physicallyCorrectLights = newSettings.rendering.physicallyCorrectLights;\r\n    settings.rendering.shadows = newSettings.rendering.shadows;\r\n    settings.rendering.textureEncoding = newSettings.rendering.textureEncoding;\r\n    settings.rendering.toneMapping = newSettings.rendering.toneMapping;\r\n    settings.rendering.toneMappingExposure = newSettings.rendering.toneMappingExposure;\r\n    return settings;\r\n};\r\nexports.convertToPrevious = convertToPrevious;\r\n//# sourceMappingURL=Converter.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Defaults = void 0;\r\nconst Defaults = () => {\r\n    return {\r\n        build_date: '',\r\n        build_version: '',\r\n        settings_version: '3.3',\r\n        ar: {\r\n            enable: true,\r\n            autoScaling: true\r\n        },\r\n        camera: {\r\n            cameraId: '',\r\n            cameras: {},\r\n        },\r\n        environment: {\r\n            clearAlpha: 1.0,\r\n            clearColor: '#ffffff',\r\n            map: 'photo_studio',\r\n            mapAsBackground: false,\r\n            mapResolution: '1024'\r\n        },\r\n        environmentGeometry: {\r\n            gridColor: '#44444426',\r\n            gridVisibility: true,\r\n            groundPlaneColor: '#636363ff',\r\n            groundPlaneVisibility: true,\r\n            groundPlaneShadowColor: '#d3d3d3ff',\r\n            groundPlaneShadowVisibility: false,\r\n        },\r\n        general: {\r\n            transformation: {\r\n                scale: { x: 1, y: 1, z: 1 },\r\n                translation: { x: 0, y: 0, z: 0 },\r\n                rotation: { x: 0, y: 0, z: 0 }\r\n            },\r\n            blurWhenBusy: true,\r\n            commitSettings: false,\r\n            commitParameters: false,\r\n            pointSize: 1.0,\r\n            showMessages: true,\r\n        },\r\n        light: {\r\n            lightSceneId: '',\r\n            lightScenes: {},\r\n        },\r\n        rendering: {\r\n            ambientOcclusion: false,\r\n            ambientOcclusionIntensity: 0.1,\r\n            automaticColorAdjustment: true,\r\n            beautyRenderDelay: 50,\r\n            beautyRenderBlendingDuration: 1500,\r\n            lights: true,\r\n            outputEncoding: 'srgb',\r\n            physicallyCorrectLights: true,\r\n            shadows: true,\r\n            textureEncoding: 'srgb',\r\n            toneMapping: 'none',\r\n            toneMappingExposure: 1,\r\n        },\r\n        session: {},\r\n    };\r\n};\r\nexports.Defaults = Defaults;\r\n//# sourceMappingURL=Defaults.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.validate = void 0;\r\nconst zod_1 = require(\"zod\");\r\nconst orbitControlsSchema = zod_1.z.object({\r\n    autoRotationSpeed: zod_1.z.number(),\r\n    damping: zod_1.z.number(),\r\n    enableAutoRotation: zod_1.z.boolean(),\r\n    enableKeyPan: zod_1.z.boolean(),\r\n    enablePan: zod_1.z.boolean(),\r\n    enableRotation: zod_1.z.boolean(),\r\n    enableZoom: zod_1.z.boolean(),\r\n    input: zod_1.z.object({ keys: zod_1.z.object({ up: zod_1.z.number(), down: zod_1.z.number(), left: zod_1.z.number(), right: zod_1.z.number() }), mouse: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), touch: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), }),\r\n    keyPanSpeed: zod_1.z.number(),\r\n    movementSmoothness: zod_1.z.number(),\r\n    restrictions: zod_1.z.object({\r\n        position: zod_1.z.object({\r\n            cube: zod_1.z.object({ min: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }), max: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }) }),\r\n            sphere: zod_1.z.object({ center: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }), radius: zod_1.z.number().nullable() }),\r\n        }),\r\n        target: zod_1.z.object({\r\n            cube: zod_1.z.object({ min: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }), max: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }) }),\r\n            sphere: zod_1.z.object({ center: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }), radius: zod_1.z.number().nullable() }),\r\n        }),\r\n        rotation: zod_1.z.object({ minPolarAngle: zod_1.z.number(), maxPolarAngle: zod_1.z.number(), minAzimuthAngle: zod_1.z.number().nullable(), maxAzimuthAngle: zod_1.z.number().nullable() }),\r\n        zoom: zod_1.z.object({ minDistance: zod_1.z.number(), maxDistance: zod_1.z.number().nullable() }),\r\n    }),\r\n    rotationSpeed: zod_1.z.number(),\r\n    panSpeed: zod_1.z.number(),\r\n    zoomSpeed: zod_1.z.number(),\r\n});\r\nconst orthographicControlsSchema = zod_1.z.object({\r\n    damping: zod_1.z.number(),\r\n    enableKeyPan: zod_1.z.boolean(),\r\n    enablePan: zod_1.z.boolean(),\r\n    enableZoom: zod_1.z.boolean(),\r\n    input: zod_1.z.object({ keys: zod_1.z.object({ up: zod_1.z.number(), down: zod_1.z.number(), left: zod_1.z.number(), right: zod_1.z.number() }), mouse: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), touch: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), }),\r\n    keyPanSpeed: zod_1.z.number(),\r\n    movementSmoothness: zod_1.z.number(),\r\n    panSpeed: zod_1.z.number(),\r\n    zoomSpeed: zod_1.z.number(),\r\n});\r\nconst orthographicCameraSchema = zod_1.z.object({\r\n    name: zod_1.z.string().optional(),\r\n    type: zod_1.z.string(),\r\n    autoAdjust: zod_1.z.boolean(),\r\n    cameraMovementDuration: zod_1.z.number(),\r\n    controls: orthographicControlsSchema,\r\n    enableCameraControls: zod_1.z.boolean(),\r\n    position: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    revertAtMouseUp: zod_1.z.boolean(),\r\n    revertAtMouseUpDuration: zod_1.z.number(),\r\n    target: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    zoomExtentsFactor: zod_1.z.number().positive(),\r\n});\r\nconst perspectiveCameraSchema = zod_1.z.object({\r\n    name: zod_1.z.string().optional(),\r\n    type: zod_1.z.string(),\r\n    autoAdjust: zod_1.z.boolean(),\r\n    cameraMovementDuration: zod_1.z.number(),\r\n    controls: orbitControlsSchema,\r\n    enableCameraControls: zod_1.z.boolean(),\r\n    fov: zod_1.z.number().positive(),\r\n    position: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    revertAtMouseUp: zod_1.z.boolean(),\r\n    revertAtMouseUpDuration: zod_1.z.number(),\r\n    target: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    zoomExtentsFactor: zod_1.z.number().positive(),\r\n});\r\nconst cameraSchema = zod_1.z.record(zod_1.z.union([perspectiveCameraSchema, orthographicCameraSchema]));\r\nconst ambientLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number()\r\n});\r\nconst directionalLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    direction: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    castShadow: zod_1.z.boolean(),\r\n    shadowMapResolution: zod_1.z.number().optional(),\r\n    shadowMapBias: zod_1.z.number().optional()\r\n});\r\nconst hemisphereLightSchema = zod_1.z.object({\r\n    skyColor: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    groundColor: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n});\r\nconst pointLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    position: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    distance: zod_1.z.number(),\r\n    decay: zod_1.z.number(),\r\n});\r\nconst spotLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    position: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    target: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    distance: zod_1.z.number(),\r\n    decay: zod_1.z.number(),\r\n    angle: zod_1.z.number(),\r\n    penumbra: zod_1.z.number(),\r\n});\r\nconst lightSchema = zod_1.z.record(zod_1.z.object({\r\n    name: zod_1.z.string().optional(),\r\n    lights: zod_1.z.record(zod_1.z.object({\r\n        name: zod_1.z.string().optional(),\r\n        type: zod_1.z.string(),\r\n        order: zod_1.z.number().optional(),\r\n        properties: zod_1.z.union([ambientLightSchema, directionalLightSchema, hemisphereLightSchema, pointLightSchema, spotLightSchema])\r\n    }))\r\n}));\r\nconst schema = zod_1.z.object({\r\n    build_date: zod_1.z.string().optional(),\r\n    build_version: zod_1.z.string().optional(),\r\n    settings_version: zod_1.z.string(),\r\n    ar: zod_1.z.object({\r\n        enable: zod_1.z.boolean(),\r\n        autoScaling: zod_1.z.boolean(),\r\n    }).optional(),\r\n    camera: zod_1.z.object({\r\n        cameraId: zod_1.z.string(),\r\n        cameras: cameraSchema\r\n    }),\r\n    environment: zod_1.z.object({\r\n        clearAlpha: zod_1.z.number(),\r\n        clearColor: zod_1.z.string(),\r\n        map: zod_1.z.union([zod_1.z.string(), zod_1.z.string().array()]),\r\n        mapAsBackground: zod_1.z.boolean(),\r\n        mapResolution: zod_1.z.string()\r\n    }),\r\n    environmentGeometry: zod_1.z.object({\r\n        gridColor: zod_1.z.string(),\r\n        gridVisibility: zod_1.z.boolean(),\r\n        groundPlaneColor: zod_1.z.string(),\r\n        groundPlaneVisibility: zod_1.z.boolean(),\r\n        groundPlaneShadowColor: zod_1.z.string(),\r\n        groundPlaneShadowVisibility: zod_1.z.boolean(),\r\n    }),\r\n    general: zod_1.z.object({\r\n        transformation: zod_1.z.object({\r\n            scale: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n            translation: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n            rotation: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() })\r\n        }),\r\n        blurWhenBusy: zod_1.z.boolean(),\r\n        commitSettings: zod_1.z.boolean(),\r\n        commitParameters: zod_1.z.boolean(),\r\n        pointSize: zod_1.z.number(),\r\n        showMessages: zod_1.z.boolean(),\r\n    }),\r\n    light: zod_1.z.object({\r\n        lightSceneId: zod_1.z.string().optional(),\r\n        lightScenes: lightSchema,\r\n    }),\r\n    rendering: zod_1.z.object({\r\n        ambientOcclusion: zod_1.z.boolean(),\r\n        ambientOcclusionIntensity: zod_1.z.number().min(0),\r\n        automaticColorAdjustment: zod_1.z.boolean(),\r\n        beautyRenderDelay: zod_1.z.number(),\r\n        beautyRenderBlendingDuration: zod_1.z.number(),\r\n        lights: zod_1.z.boolean(),\r\n        outputEncoding: zod_1.z.string(),\r\n        physicallyCorrectLights: zod_1.z.boolean(),\r\n        shadows: zod_1.z.boolean(),\r\n        textureEncoding: zod_1.z.string(),\r\n        toneMapping: zod_1.z.string(),\r\n        toneMappingExposure: zod_1.z.number(),\r\n    }),\r\n    session: zod_1.z.record(zod_1.z.object({\r\n        order: zod_1.z.number().optional(),\r\n        displayname: zod_1.z.string().optional(),\r\n        hidden: zod_1.z.boolean().optional()\r\n    })),\r\n}).strict();\r\nconst validate = (s) => {\r\n    const result = schema.parse(s);\r\n    s = result;\r\n};\r\nexports.validate = validate;\r\n//# sourceMappingURL=Validator.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.convertToPrevious = exports.convertFromPrevious = void 0;\r\nconst Defaults_1 = require(\"../v3_3/Defaults\");\r\nconst Defaults_2 = require(\"./Defaults\");\r\nconst convertFromPrevious = (s, v) => {\r\n    const settings = Defaults_2.Defaults();\r\n    const oldSettings = s;\r\n    settings.ar = oldSettings.ar;\r\n    settings.build_date = oldSettings.build_date;\r\n    settings.build_version = oldSettings.build_version;\r\n    settings.camera = oldSettings.camera;\r\n    settings.light = oldSettings.light;\r\n    settings.session = oldSettings.session;\r\n    settings.environmentGeometry = oldSettings.environmentGeometry;\r\n    settings.rendering = oldSettings.rendering;\r\n    settings.general.transformation = oldSettings.general.transformation;\r\n    settings.general.blurWhenBusy = oldSettings.general.blurWhenBusy;\r\n    settings.general.commitSettings = oldSettings.general.commitSettings;\r\n    settings.general.commitParameters = oldSettings.general.commitParameters;\r\n    settings.general.pointSize = oldSettings.general.pointSize;\r\n    settings.general.showMessages = oldSettings.general.showMessages;\r\n    settings.general.defaultMaterialColor = '#199b9bff';\r\n    settings.environment.clearAlpha = oldSettings.environment.clearAlpha;\r\n    settings.environment.clearColor = oldSettings.environment.clearColor;\r\n    settings.environment.map = oldSettings.environment.map;\r\n    settings.environment.mapAsBackground = oldSettings.environment.mapAsBackground;\r\n    settings.environment.mapResolution = oldSettings.environment.mapResolution;\r\n    settings.environment.rotation = { x: 0, y: 0, z: 0, w: 1 };\r\n    settings.environment.blurriness = 0;\r\n    settings.environment.intensity = 1;\r\n    return settings;\r\n};\r\nexports.convertFromPrevious = convertFromPrevious;\r\nconst convertToPrevious = (s, v) => {\r\n    const settings = Defaults_1.Defaults();\r\n    const newSettings = s;\r\n    settings.ar = newSettings.ar;\r\n    settings.build_date = newSettings.build_date;\r\n    settings.build_version = newSettings.build_version;\r\n    settings.camera = newSettings.camera;\r\n    settings.light = newSettings.light;\r\n    settings.session = newSettings.session;\r\n    settings.environmentGeometry = newSettings.environmentGeometry;\r\n    settings.rendering = newSettings.rendering;\r\n    settings.general.transformation = newSettings.general.transformation;\r\n    settings.general.blurWhenBusy = newSettings.general.blurWhenBusy;\r\n    settings.general.commitSettings = newSettings.general.commitSettings;\r\n    settings.general.commitParameters = newSettings.general.commitParameters;\r\n    settings.general.pointSize = newSettings.general.pointSize;\r\n    settings.general.showMessages = newSettings.general.showMessages;\r\n    settings.environment.clearAlpha = newSettings.environment.clearAlpha;\r\n    settings.environment.clearColor = newSettings.environment.clearColor;\r\n    settings.environment.map = newSettings.environment.map;\r\n    settings.environment.mapAsBackground = newSettings.environment.mapAsBackground;\r\n    settings.environment.mapResolution = newSettings.environment.mapResolution;\r\n    return settings;\r\n};\r\nexports.convertToPrevious = convertToPrevious;\r\n//# sourceMappingURL=Converter.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Defaults = void 0;\r\nconst Defaults = () => {\r\n    return {\r\n        build_date: '',\r\n        build_version: '',\r\n        settings_version: '3.4',\r\n        ar: {\r\n            enable: true,\r\n            autoScaling: true\r\n        },\r\n        camera: {\r\n            cameraId: '',\r\n            cameras: {},\r\n        },\r\n        environment: {\r\n            clearAlpha: 1.0,\r\n            clearColor: '#ffffff',\r\n            map: 'photo_studio',\r\n            mapAsBackground: false,\r\n            mapResolution: '1024',\r\n            rotation: { x: 0, y: 0, z: 0, w: 1 },\r\n            intensity: 1,\r\n            blurriness: 0\r\n        },\r\n        environmentGeometry: {\r\n            gridColor: '#44444426',\r\n            gridVisibility: true,\r\n            groundPlaneColor: '#636363ff',\r\n            groundPlaneVisibility: true,\r\n            groundPlaneShadowColor: '#d3d3d3ff',\r\n            groundPlaneShadowVisibility: false,\r\n        },\r\n        general: {\r\n            transformation: {\r\n                scale: { x: 1, y: 1, z: 1 },\r\n                translation: { x: 0, y: 0, z: 0 },\r\n                rotation: { x: 0, y: 0, z: 0 }\r\n            },\r\n            blurWhenBusy: true,\r\n            commitSettings: false,\r\n            commitParameters: false,\r\n            pointSize: 1.0,\r\n            showMessages: true,\r\n            defaultMaterialColor: '#199b9bff'\r\n        },\r\n        light: {\r\n            lightSceneId: '',\r\n            lightScenes: {},\r\n        },\r\n        rendering: {\r\n            ambientOcclusion: false,\r\n            ambientOcclusionIntensity: 0.1,\r\n            automaticColorAdjustment: true,\r\n            beautyRenderDelay: 50,\r\n            beautyRenderBlendingDuration: 1500,\r\n            lights: true,\r\n            outputEncoding: 'srgb',\r\n            physicallyCorrectLights: true,\r\n            shadows: true,\r\n            textureEncoding: 'srgb',\r\n            toneMapping: 'none',\r\n            toneMappingExposure: 1,\r\n        },\r\n        session: {},\r\n    };\r\n};\r\nexports.Defaults = Defaults;\r\n//# sourceMappingURL=Defaults.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.validate = void 0;\r\nconst zod_1 = require(\"zod\");\r\nconst orbitControlsSchema = zod_1.z.object({\r\n    autoRotationSpeed: zod_1.z.number(),\r\n    damping: zod_1.z.number(),\r\n    enableAutoRotation: zod_1.z.boolean(),\r\n    enableKeyPan: zod_1.z.boolean(),\r\n    enablePan: zod_1.z.boolean(),\r\n    enableRotation: zod_1.z.boolean(),\r\n    enableZoom: zod_1.z.boolean(),\r\n    input: zod_1.z.object({ keys: zod_1.z.object({ up: zod_1.z.number(), down: zod_1.z.number(), left: zod_1.z.number(), right: zod_1.z.number() }), mouse: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), touch: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), }),\r\n    keyPanSpeed: zod_1.z.number(),\r\n    movementSmoothness: zod_1.z.number(),\r\n    restrictions: zod_1.z.object({\r\n        position: zod_1.z.object({\r\n            cube: zod_1.z.object({ min: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }), max: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }) }),\r\n            sphere: zod_1.z.object({ center: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }), radius: zod_1.z.number().nullable() }),\r\n        }),\r\n        target: zod_1.z.object({\r\n            cube: zod_1.z.object({ min: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }), max: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }) }),\r\n            sphere: zod_1.z.object({ center: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }), radius: zod_1.z.number().nullable() }),\r\n        }),\r\n        rotation: zod_1.z.object({ minPolarAngle: zod_1.z.number(), maxPolarAngle: zod_1.z.number(), minAzimuthAngle: zod_1.z.number().nullable(), maxAzimuthAngle: zod_1.z.number().nullable() }),\r\n        zoom: zod_1.z.object({ minDistance: zod_1.z.number(), maxDistance: zod_1.z.number().nullable() }),\r\n    }),\r\n    rotationSpeed: zod_1.z.number(),\r\n    panSpeed: zod_1.z.number(),\r\n    zoomSpeed: zod_1.z.number(),\r\n});\r\nconst orthographicControlsSchema = zod_1.z.object({\r\n    damping: zod_1.z.number(),\r\n    enableKeyPan: zod_1.z.boolean(),\r\n    enablePan: zod_1.z.boolean(),\r\n    enableZoom: zod_1.z.boolean(),\r\n    input: zod_1.z.object({ keys: zod_1.z.object({ up: zod_1.z.number(), down: zod_1.z.number(), left: zod_1.z.number(), right: zod_1.z.number() }), mouse: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), touch: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), }),\r\n    keyPanSpeed: zod_1.z.number(),\r\n    movementSmoothness: zod_1.z.number(),\r\n    panSpeed: zod_1.z.number(),\r\n    zoomSpeed: zod_1.z.number(),\r\n});\r\nconst orthographicCameraSchema = zod_1.z.object({\r\n    name: zod_1.z.string().optional(),\r\n    type: zod_1.z.string(),\r\n    autoAdjust: zod_1.z.boolean(),\r\n    cameraMovementDuration: zod_1.z.number(),\r\n    controls: orthographicControlsSchema,\r\n    enableCameraControls: zod_1.z.boolean(),\r\n    position: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    revertAtMouseUp: zod_1.z.boolean(),\r\n    revertAtMouseUpDuration: zod_1.z.number(),\r\n    target: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    zoomExtentsFactor: zod_1.z.number().positive(),\r\n});\r\nconst perspectiveCameraSchema = zod_1.z.object({\r\n    name: zod_1.z.string().optional(),\r\n    type: zod_1.z.string(),\r\n    autoAdjust: zod_1.z.boolean(),\r\n    cameraMovementDuration: zod_1.z.number(),\r\n    controls: orbitControlsSchema,\r\n    enableCameraControls: zod_1.z.boolean(),\r\n    fov: zod_1.z.number().positive(),\r\n    position: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    revertAtMouseUp: zod_1.z.boolean(),\r\n    revertAtMouseUpDuration: zod_1.z.number(),\r\n    target: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    zoomExtentsFactor: zod_1.z.number().positive(),\r\n});\r\nconst cameraSchema = zod_1.z.record(zod_1.z.union([perspectiveCameraSchema, orthographicCameraSchema]));\r\nconst ambientLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number()\r\n});\r\nconst directionalLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    direction: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    castShadow: zod_1.z.boolean(),\r\n    shadowMapResolution: zod_1.z.number().optional(),\r\n    shadowMapBias: zod_1.z.number().optional()\r\n});\r\nconst hemisphereLightSchema = zod_1.z.object({\r\n    skyColor: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    groundColor: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n});\r\nconst pointLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    position: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    distance: zod_1.z.number(),\r\n    decay: zod_1.z.number(),\r\n});\r\nconst spotLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    position: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    target: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    distance: zod_1.z.number(),\r\n    decay: zod_1.z.number(),\r\n    angle: zod_1.z.number(),\r\n    penumbra: zod_1.z.number(),\r\n});\r\nconst lightSchema = zod_1.z.record(zod_1.z.object({\r\n    name: zod_1.z.string().optional(),\r\n    lights: zod_1.z.record(zod_1.z.object({\r\n        name: zod_1.z.string().optional(),\r\n        type: zod_1.z.string(),\r\n        order: zod_1.z.number().optional(),\r\n        properties: zod_1.z.union([ambientLightSchema, directionalLightSchema, hemisphereLightSchema, pointLightSchema, spotLightSchema])\r\n    }))\r\n}));\r\nconst schema = zod_1.z.object({\r\n    build_date: zod_1.z.string().optional(),\r\n    build_version: zod_1.z.string().optional(),\r\n    settings_version: zod_1.z.string(),\r\n    ar: zod_1.z.object({\r\n        enable: zod_1.z.boolean(),\r\n        autoScaling: zod_1.z.boolean(),\r\n    }).optional(),\r\n    camera: zod_1.z.object({\r\n        cameraId: zod_1.z.string(),\r\n        cameras: cameraSchema\r\n    }),\r\n    environment: zod_1.z.object({\r\n        clearAlpha: zod_1.z.number(),\r\n        clearColor: zod_1.z.string(),\r\n        map: zod_1.z.union([zod_1.z.string(), zod_1.z.string().array()]),\r\n        mapAsBackground: zod_1.z.boolean(),\r\n        mapResolution: zod_1.z.string(),\r\n        rotation: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number(), w: zod_1.z.number() }),\r\n        blurriness: zod_1.z.number(),\r\n        intensity: zod_1.z.number(),\r\n    }),\r\n    environmentGeometry: zod_1.z.object({\r\n        gridColor: zod_1.z.string(),\r\n        gridVisibility: zod_1.z.boolean(),\r\n        groundPlaneColor: zod_1.z.string(),\r\n        groundPlaneVisibility: zod_1.z.boolean(),\r\n        groundPlaneShadowColor: zod_1.z.string(),\r\n        groundPlaneShadowVisibility: zod_1.z.boolean(),\r\n    }),\r\n    general: zod_1.z.object({\r\n        transformation: zod_1.z.object({\r\n            scale: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n            translation: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n            rotation: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() })\r\n        }),\r\n        blurWhenBusy: zod_1.z.boolean(),\r\n        commitSettings: zod_1.z.boolean(),\r\n        commitParameters: zod_1.z.boolean(),\r\n        pointSize: zod_1.z.number(),\r\n        showMessages: zod_1.z.boolean(),\r\n        defaultMaterialColor: zod_1.z.string(),\r\n    }),\r\n    light: zod_1.z.object({\r\n        lightSceneId: zod_1.z.string().optional(),\r\n        lightScenes: lightSchema,\r\n    }),\r\n    rendering: zod_1.z.object({\r\n        ambientOcclusion: zod_1.z.boolean(),\r\n        ambientOcclusionIntensity: zod_1.z.number().min(0),\r\n        automaticColorAdjustment: zod_1.z.boolean(),\r\n        beautyRenderDelay: zod_1.z.number(),\r\n        beautyRenderBlendingDuration: zod_1.z.number(),\r\n        lights: zod_1.z.boolean(),\r\n        outputEncoding: zod_1.z.string(),\r\n        physicallyCorrectLights: zod_1.z.boolean(),\r\n        shadows: zod_1.z.boolean(),\r\n        textureEncoding: zod_1.z.string(),\r\n        toneMapping: zod_1.z.string(),\r\n        toneMappingExposure: zod_1.z.number(),\r\n    }),\r\n    session: zod_1.z.record(zod_1.z.object({\r\n        order: zod_1.z.number().optional(),\r\n        displayname: zod_1.z.string().optional(),\r\n        hidden: zod_1.z.boolean().optional()\r\n    })),\r\n}).strict();\r\nconst validate = (s) => {\r\n    const result = schema.parse(s);\r\n    s = result;\r\n};\r\nexports.validate = validate;\r\n//# sourceMappingURL=Validator.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.convertToPrevious = exports.convertFromPrevious = void 0;\r\nconst Defaults_1 = require(\"../v3_4/Defaults\");\r\nconst Defaults_2 = require(\"./Defaults\");\r\nconst convertFromPrevious = (s, v) => {\r\n    const settings = Defaults_2.Defaults();\r\n    const oldSettings = s;\r\n    settings.ar = oldSettings.ar;\r\n    settings.build_date = oldSettings.build_date;\r\n    settings.build_version = oldSettings.build_version;\r\n    settings.camera = oldSettings.camera;\r\n    settings.general = oldSettings.general;\r\n    settings.light = oldSettings.light;\r\n    settings.session = oldSettings.session;\r\n    settings.environment = oldSettings.environment;\r\n    settings.environmentGeometry = oldSettings.environmentGeometry;\r\n    settings.rendering.automaticColorAdjustment = oldSettings.rendering.automaticColorAdjustment;\r\n    settings.rendering.beautyRenderDelay = oldSettings.rendering.beautyRenderDelay;\r\n    settings.rendering.beautyRenderBlendingDuration = oldSettings.rendering.beautyRenderBlendingDuration;\r\n    settings.rendering.lights = oldSettings.rendering.lights;\r\n    settings.rendering.outputEncoding = oldSettings.rendering.outputEncoding;\r\n    settings.rendering.physicallyCorrectLights = oldSettings.rendering.physicallyCorrectLights;\r\n    settings.rendering.shadows = oldSettings.rendering.shadows;\r\n    settings.rendering.textureEncoding = oldSettings.rendering.textureEncoding;\r\n    settings.rendering.toneMapping = oldSettings.rendering.toneMapping;\r\n    settings.rendering.toneMappingExposure = oldSettings.rendering.toneMappingExposure;\r\n    return settings;\r\n};\r\nexports.convertFromPrevious = convertFromPrevious;\r\nconst convertToPrevious = (s, v) => {\r\n    const settings = Defaults_1.Defaults();\r\n    const newSettings = s;\r\n    settings.ar = newSettings.ar;\r\n    settings.build_date = newSettings.build_date;\r\n    settings.build_version = newSettings.build_version;\r\n    settings.camera = newSettings.camera;\r\n    settings.general = newSettings.general;\r\n    settings.light = newSettings.light;\r\n    settings.session = newSettings.session;\r\n    settings.environment = newSettings.environment;\r\n    settings.environmentGeometry = newSettings.environmentGeometry;\r\n    settings.rendering.ambientOcclusion = false;\r\n    settings.rendering.ambientOcclusionIntensity = 0.1;\r\n    settings.rendering.automaticColorAdjustment = newSettings.rendering.automaticColorAdjustment;\r\n    settings.rendering.beautyRenderDelay = newSettings.rendering.beautyRenderDelay;\r\n    settings.rendering.beautyRenderBlendingDuration = newSettings.rendering.beautyRenderBlendingDuration;\r\n    settings.rendering.lights = newSettings.rendering.lights;\r\n    settings.rendering.outputEncoding = newSettings.rendering.outputEncoding;\r\n    settings.rendering.physicallyCorrectLights = newSettings.rendering.physicallyCorrectLights;\r\n    settings.rendering.shadows = newSettings.rendering.shadows;\r\n    settings.rendering.textureEncoding = newSettings.rendering.textureEncoding;\r\n    settings.rendering.toneMapping = newSettings.rendering.toneMapping;\r\n    settings.rendering.toneMappingExposure = newSettings.rendering.toneMappingExposure;\r\n    return settings;\r\n};\r\nexports.convertToPrevious = convertToPrevious;\r\n//# sourceMappingURL=Converter.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Defaults = void 0;\r\nconst Defaults = () => {\r\n    return {\r\n        build_date: '',\r\n        build_version: '',\r\n        settings_version: '4.0',\r\n        ar: {\r\n            enable: true,\r\n            autoScaling: true\r\n        },\r\n        camera: {\r\n            cameraId: '',\r\n            cameras: {},\r\n        },\r\n        environment: {\r\n            clearAlpha: 1.0,\r\n            clearColor: '#ffffff',\r\n            map: 'photo_studio',\r\n            mapAsBackground: false,\r\n            mapResolution: '1024',\r\n            rotation: { x: 0, y: 0, z: 0, w: 1 },\r\n            intensity: 1,\r\n            blurriness: 0\r\n        },\r\n        environmentGeometry: {\r\n            gridColor: '#44444426',\r\n            gridVisibility: true,\r\n            groundPlaneColor: '#636363ff',\r\n            groundPlaneVisibility: true,\r\n            groundPlaneShadowColor: '#d3d3d3ff',\r\n            groundPlaneShadowVisibility: false,\r\n        },\r\n        general: {\r\n            transformation: {\r\n                scale: { x: 1, y: 1, z: 1 },\r\n                translation: { x: 0, y: 0, z: 0 },\r\n                rotation: { x: 0, y: 0, z: 0 }\r\n            },\r\n            blurWhenBusy: true,\r\n            commitSettings: false,\r\n            commitParameters: false,\r\n            pointSize: 1.0,\r\n            showMessages: true,\r\n            defaultMaterialColor: '#199b9bff'\r\n        },\r\n        light: {\r\n            lightSceneId: '',\r\n            lightScenes: {},\r\n        },\r\n        postprocessing: {\r\n            antiAliasingTechnique: \"smaa\",\r\n            antiAliasingTechniqueMobile: \"fxaa\",\r\n            enablePostProcessingOnMobile: true,\r\n            ssaaSampleLevel: 2,\r\n            effects: []\r\n        },\r\n        rendering: {\r\n            automaticColorAdjustment: true,\r\n            beautyRenderDelay: 50,\r\n            beautyRenderBlendingDuration: 1500,\r\n            lights: true,\r\n            outputEncoding: 'srgb',\r\n            physicallyCorrectLights: true,\r\n            shadows: true,\r\n            softShadows: true,\r\n            textureEncoding: 'srgb',\r\n            toneMapping: 'none',\r\n            toneMappingExposure: 1,\r\n        },\r\n        session: {},\r\n    };\r\n};\r\nexports.Defaults = Defaults;\r\n//# sourceMappingURL=Defaults.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.validate = void 0;\r\nconst zod_1 = require(\"zod\");\r\nconst orbitControlsSchema = zod_1.z.object({\r\n    autoRotationSpeed: zod_1.z.number(),\r\n    damping: zod_1.z.number(),\r\n    enableAutoRotation: zod_1.z.boolean(),\r\n    enableKeyPan: zod_1.z.boolean(),\r\n    enablePan: zod_1.z.boolean(),\r\n    enableRotation: zod_1.z.boolean(),\r\n    enableZoom: zod_1.z.boolean(),\r\n    input: zod_1.z.object({ keys: zod_1.z.object({ up: zod_1.z.number(), down: zod_1.z.number(), left: zod_1.z.number(), right: zod_1.z.number() }), mouse: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), touch: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), }),\r\n    keyPanSpeed: zod_1.z.number(),\r\n    movementSmoothness: zod_1.z.number(),\r\n    restrictions: zod_1.z.object({\r\n        position: zod_1.z.object({\r\n            cube: zod_1.z.object({ min: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }), max: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }) }),\r\n            sphere: zod_1.z.object({ center: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }), radius: zod_1.z.number().nullable() }),\r\n        }),\r\n        target: zod_1.z.object({\r\n            cube: zod_1.z.object({ min: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }), max: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }) }),\r\n            sphere: zod_1.z.object({ center: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }), radius: zod_1.z.number().nullable() }),\r\n        }),\r\n        rotation: zod_1.z.object({ minPolarAngle: zod_1.z.number(), maxPolarAngle: zod_1.z.number(), minAzimuthAngle: zod_1.z.number().nullable(), maxAzimuthAngle: zod_1.z.number().nullable() }),\r\n        zoom: zod_1.z.object({ minDistance: zod_1.z.number(), maxDistance: zod_1.z.number().nullable() }),\r\n    }),\r\n    rotationSpeed: zod_1.z.number(),\r\n    panSpeed: zod_1.z.number(),\r\n    zoomSpeed: zod_1.z.number(),\r\n});\r\nconst orthographicControlsSchema = zod_1.z.object({\r\n    damping: zod_1.z.number(),\r\n    enableKeyPan: zod_1.z.boolean(),\r\n    enablePan: zod_1.z.boolean(),\r\n    enableZoom: zod_1.z.boolean(),\r\n    input: zod_1.z.object({ keys: zod_1.z.object({ up: zod_1.z.number(), down: zod_1.z.number(), left: zod_1.z.number(), right: zod_1.z.number() }), mouse: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), touch: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), }),\r\n    keyPanSpeed: zod_1.z.number(),\r\n    movementSmoothness: zod_1.z.number(),\r\n    panSpeed: zod_1.z.number(),\r\n    zoomSpeed: zod_1.z.number(),\r\n});\r\nconst orthographicCameraSchema = zod_1.z.object({\r\n    name: zod_1.z.string().optional(),\r\n    type: zod_1.z.string(),\r\n    autoAdjust: zod_1.z.boolean(),\r\n    cameraMovementDuration: zod_1.z.number(),\r\n    controls: orthographicControlsSchema,\r\n    enableCameraControls: zod_1.z.boolean(),\r\n    position: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    revertAtMouseUp: zod_1.z.boolean(),\r\n    revertAtMouseUpDuration: zod_1.z.number(),\r\n    target: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    zoomExtentsFactor: zod_1.z.number().positive(),\r\n});\r\nconst perspectiveCameraSchema = zod_1.z.object({\r\n    name: zod_1.z.string().optional(),\r\n    type: zod_1.z.string(),\r\n    autoAdjust: zod_1.z.boolean(),\r\n    cameraMovementDuration: zod_1.z.number(),\r\n    controls: orbitControlsSchema,\r\n    enableCameraControls: zod_1.z.boolean(),\r\n    fov: zod_1.z.number().positive(),\r\n    position: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    revertAtMouseUp: zod_1.z.boolean(),\r\n    revertAtMouseUpDuration: zod_1.z.number(),\r\n    target: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    zoomExtentsFactor: zod_1.z.number().positive(),\r\n});\r\nconst cameraSchema = zod_1.z.record(zod_1.z.union([perspectiveCameraSchema, orthographicCameraSchema]));\r\nconst ambientLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number()\r\n});\r\nconst directionalLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    direction: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    castShadow: zod_1.z.boolean(),\r\n    shadowMapResolution: zod_1.z.number().optional(),\r\n    shadowMapBias: zod_1.z.number().optional()\r\n});\r\nconst hemisphereLightSchema = zod_1.z.object({\r\n    skyColor: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    groundColor: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n});\r\nconst pointLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    position: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    distance: zod_1.z.number(),\r\n    decay: zod_1.z.number(),\r\n});\r\nconst spotLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    position: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    target: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    distance: zod_1.z.number(),\r\n    decay: zod_1.z.number(),\r\n    angle: zod_1.z.number(),\r\n    penumbra: zod_1.z.number(),\r\n});\r\nconst lightSchema = zod_1.z.record(zod_1.z.object({\r\n    name: zod_1.z.string().optional(),\r\n    lights: zod_1.z.record(zod_1.z.object({\r\n        name: zod_1.z.string().optional(),\r\n        type: zod_1.z.string(),\r\n        order: zod_1.z.number().optional(),\r\n        properties: zod_1.z.union([ambientLightSchema, directionalLightSchema, hemisphereLightSchema, pointLightSchema, spotLightSchema])\r\n    }))\r\n}));\r\nconst bloomEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        blendFunction: zod_1.z.number().optional(),\r\n        intensity: zod_1.z.number().optional(),\r\n        kernelSize: zod_1.z.number().optional(),\r\n        luminanceSmoothing: zod_1.z.number().optional(),\r\n        luminanceThreshold: zod_1.z.number().optional(),\r\n        mipmapBlur: zod_1.z.boolean(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst chromaticAberrationEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        blendFunction: zod_1.z.number().optional(),\r\n        modulationOffset: zod_1.z.number().optional(),\r\n        offset: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number() }).optional(),\r\n        radialModulation: zod_1.z.boolean().optional(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst depthOfFieldEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        blendFunction: zod_1.z.number().optional(),\r\n        bokehScale: zod_1.z.number().optional(),\r\n        focusDistance: zod_1.z.number().optional(),\r\n        focusRange: zod_1.z.number().optional(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst dotScreenEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        angle: zod_1.z.number().optional(),\r\n        blendFunction: zod_1.z.number().optional(),\r\n        scale: zod_1.z.number().optional(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst gridEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        blendFunction: zod_1.z.number().optional(),\r\n        scale: zod_1.z.number().optional(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst hbaoEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        resolutionScale: zod_1.z.number().optional(),\r\n        spp: zod_1.z.number().optional(),\r\n        distance: zod_1.z.number().optional(),\r\n        distanceIntensity: zod_1.z.number().optional(),\r\n        intensity: zod_1.z.number().optional(),\r\n        color: zod_1.z.string().optional(),\r\n        bias: zod_1.z.number().optional(),\r\n        thickness: zod_1.z.number().optional(),\r\n        iterations: zod_1.z.number().optional(),\r\n        radius: zod_1.z.number().optional(),\r\n        rings: zod_1.z.number().optional(),\r\n        lumaPhi: zod_1.z.number().optional(),\r\n        depthPhi: zod_1.z.number().optional(),\r\n        normalPhi: zod_1.z.number().optional(),\r\n        samples: zod_1.z.number().optional(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst hueSaturationEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        blendFunction: zod_1.z.number().optional(),\r\n        hue: zod_1.z.number().optional(),\r\n        saturation: zod_1.z.number().optional(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst noiseEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        blendFunction: zod_1.z.number().optional(),\r\n        premultiply: zod_1.z.boolean().optional(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst pixelationEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        blendFunction: zod_1.z.number().optional(),\r\n        granularity: zod_1.z.number().optional(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst scanlineEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        blendFunction: zod_1.z.number().optional(),\r\n        density: zod_1.z.number().optional(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst ssaoEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        resolutionScale: zod_1.z.number().optional(),\r\n        spp: zod_1.z.number().optional(),\r\n        distance: zod_1.z.number().optional(),\r\n        distanceIntensity: zod_1.z.number().optional(),\r\n        intensity: zod_1.z.number().optional(),\r\n        color: zod_1.z.string().optional(),\r\n        iterations: zod_1.z.number().optional(),\r\n        radius: zod_1.z.number().optional(),\r\n        rings: zod_1.z.number().optional(),\r\n        lumaPhi: zod_1.z.number().optional(),\r\n        depthPhi: zod_1.z.number().optional(),\r\n        normalPhi: zod_1.z.number().optional(),\r\n        samples: zod_1.z.number().optional(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst tiltShiftEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        blendFunction: zod_1.z.number().optional(),\r\n        feather: zod_1.z.number().optional(),\r\n        focusArea: zod_1.z.number().optional(),\r\n        kernelSize: zod_1.z.number().optional(),\r\n        offset: zod_1.z.number().optional(),\r\n        rotation: zod_1.z.number().optional(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst vignetteEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        blendFunction: zod_1.z.number().optional(),\r\n        darkness: zod_1.z.number().optional(),\r\n        offset: zod_1.z.number().optional(),\r\n        technique: zod_1.z.number().optional(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst postProcessingSchema = zod_1.z.array(zod_1.z.union([bloomEffectSchema, chromaticAberrationEffectSchema, depthOfFieldEffectSchema, dotScreenEffectSchema, gridEffectSchema, hbaoEffectSchema, hueSaturationEffectSchema, noiseEffectSchema, pixelationEffectSchema, scanlineEffectSchema, ssaoEffectSchema, tiltShiftEffectSchema, vignetteEffectSchema]));\r\nconst schema = zod_1.z.object({\r\n    build_date: zod_1.z.string().optional(),\r\n    build_version: zod_1.z.string().optional(),\r\n    settings_version: zod_1.z.string(),\r\n    ar: zod_1.z.object({\r\n        enable: zod_1.z.boolean(),\r\n        autoScaling: zod_1.z.boolean(),\r\n    }).optional(),\r\n    camera: zod_1.z.object({\r\n        cameraId: zod_1.z.string(),\r\n        cameras: cameraSchema\r\n    }),\r\n    environment: zod_1.z.object({\r\n        clearAlpha: zod_1.z.number(),\r\n        clearColor: zod_1.z.string(),\r\n        map: zod_1.z.union([zod_1.z.string(), zod_1.z.string().array()]),\r\n        mapAsBackground: zod_1.z.boolean(),\r\n        mapResolution: zod_1.z.string(),\r\n        rotation: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number(), w: zod_1.z.number() }),\r\n        blurriness: zod_1.z.number(),\r\n        intensity: zod_1.z.number(),\r\n    }),\r\n    environmentGeometry: zod_1.z.object({\r\n        gridColor: zod_1.z.string(),\r\n        gridVisibility: zod_1.z.boolean(),\r\n        groundPlaneColor: zod_1.z.string(),\r\n        groundPlaneVisibility: zod_1.z.boolean(),\r\n        groundPlaneShadowColor: zod_1.z.string(),\r\n        groundPlaneShadowVisibility: zod_1.z.boolean(),\r\n    }),\r\n    general: zod_1.z.object({\r\n        transformation: zod_1.z.object({\r\n            scale: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n            translation: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n            rotation: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() })\r\n        }),\r\n        blurWhenBusy: zod_1.z.boolean(),\r\n        commitSettings: zod_1.z.boolean(),\r\n        commitParameters: zod_1.z.boolean(),\r\n        pointSize: zod_1.z.number(),\r\n        showMessages: zod_1.z.boolean(),\r\n        defaultMaterialColor: zod_1.z.string(),\r\n    }),\r\n    light: zod_1.z.object({\r\n        lightSceneId: zod_1.z.string().optional(),\r\n        lightScenes: lightSchema,\r\n    }),\r\n    postprocessing: zod_1.z.object({\r\n        antiAliasingTechnique: zod_1.z.string(),\r\n        antiAliasingTechniqueMobile: zod_1.z.string(),\r\n        enablePostProcessingOnMobile: zod_1.z.boolean(),\r\n        ssaaSampleLevel: zod_1.z.number(),\r\n        effects: postProcessingSchema\r\n    }),\r\n    rendering: zod_1.z.object({\r\n        automaticColorAdjustment: zod_1.z.boolean(),\r\n        beautyRenderDelay: zod_1.z.number(),\r\n        beautyRenderBlendingDuration: zod_1.z.number(),\r\n        lights: zod_1.z.boolean(),\r\n        outputEncoding: zod_1.z.string(),\r\n        physicallyCorrectLights: zod_1.z.boolean(),\r\n        shadows: zod_1.z.boolean(),\r\n        softShadows: zod_1.z.boolean(),\r\n        textureEncoding: zod_1.z.string(),\r\n        toneMapping: zod_1.z.string(),\r\n        toneMappingExposure: zod_1.z.number(),\r\n    }),\r\n    session: zod_1.z.record(zod_1.z.object({\r\n        order: zod_1.z.number().optional(),\r\n        displayname: zod_1.z.string().optional(),\r\n        hidden: zod_1.z.boolean().optional()\r\n    })),\r\n}).strict();\r\nconst validate = (s) => {\r\n    const result = schema.parse(s);\r\n    s = result;\r\n};\r\nexports.validate = validate;\r\n//# sourceMappingURL=Validator.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.convertToPrevious = exports.convertFromPrevious = void 0;\r\nconst Defaults_1 = require(\"../v4_0/Defaults\");\r\nconst Defaults_2 = require(\"./Defaults\");\r\nconst convertFromPrevious = (s, v) => {\r\n    const settings = Defaults_2.Defaults();\r\n    const oldSettings = s;\r\n    settings.ar = oldSettings.ar;\r\n    settings.build_date = oldSettings.build_date;\r\n    settings.build_version = oldSettings.build_version;\r\n    settings.camera = oldSettings.camera;\r\n    settings.general = oldSettings.general;\r\n    settings.light = oldSettings.light;\r\n    settings.session = oldSettings.session;\r\n    settings.environment = oldSettings.environment;\r\n    settings.environmentGeometry = oldSettings.environmentGeometry;\r\n    settings.rendering = oldSettings.rendering;\r\n    settings.postprocessing.antiAliasingTechnique = oldSettings.postprocessing.antiAliasingTechnique;\r\n    settings.postprocessing.antiAliasingTechniqueMobile = oldSettings.postprocessing.antiAliasingTechniqueMobile;\r\n    settings.postprocessing.enablePostProcessingOnMobile = oldSettings.postprocessing.enablePostProcessingOnMobile;\r\n    settings.postprocessing.ssaaSampleLevel = oldSettings.postprocessing.ssaaSampleLevel;\r\n    settings.postprocessing.effects = oldSettings.postprocessing.effects;\r\n    const ssaoEffect = settings.postprocessing.effects.find(e => e.type === \"ssao\");\r\n    if (!ssaoEffect)\r\n        settings.postprocessing.effects.push(Defaults_2.Defaults().postprocessing.effects.find(e => e.type === \"ssao\"));\r\n    return settings;\r\n};\r\nexports.convertFromPrevious = convertFromPrevious;\r\nconst convertToPrevious = (s, v) => {\r\n    const settings = Defaults_1.Defaults();\r\n    const newSettings = s;\r\n    settings.ar = newSettings.ar;\r\n    settings.build_date = newSettings.build_date;\r\n    settings.build_version = newSettings.build_version;\r\n    settings.camera = newSettings.camera;\r\n    settings.general = newSettings.general;\r\n    settings.light = newSettings.light;\r\n    settings.rendering = newSettings.rendering;\r\n    settings.session = newSettings.session;\r\n    settings.environment = newSettings.environment;\r\n    settings.environmentGeometry = newSettings.environmentGeometry;\r\n    settings.postprocessing = newSettings.postprocessing;\r\n    return settings;\r\n};\r\nexports.convertToPrevious = convertToPrevious;\r\n//# sourceMappingURL=Converter.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Defaults = void 0;\r\nconst Defaults = () => {\r\n    return {\r\n        build_date: '',\r\n        build_version: '',\r\n        settings_version: '4.1',\r\n        ar: {\r\n            enable: true,\r\n            autoScaling: true\r\n        },\r\n        camera: {\r\n            cameraId: '',\r\n            cameras: {},\r\n        },\r\n        environment: {\r\n            clearAlpha: 1.0,\r\n            clearColor: '#ffffff',\r\n            map: 'photo_studio',\r\n            mapAsBackground: false,\r\n            mapResolution: '1024',\r\n            rotation: { x: 0, y: 0, z: 0, w: 1 },\r\n            intensity: 1,\r\n            blurriness: 0\r\n        },\r\n        environmentGeometry: {\r\n            gridColor: '#44444426',\r\n            gridVisibility: false,\r\n            groundPlaneColor: '#636363ff',\r\n            groundPlaneVisibility: true,\r\n            groundPlaneShadowColor: '#d3d3d3ff',\r\n            groundPlaneShadowVisibility: false,\r\n        },\r\n        general: {\r\n            transformation: {\r\n                scale: { x: 1, y: 1, z: 1 },\r\n                translation: { x: 0, y: 0, z: 0 },\r\n                rotation: { x: 0, y: 0, z: 0 }\r\n            },\r\n            blurWhenBusy: true,\r\n            commitSettings: false,\r\n            commitParameters: false,\r\n            pointSize: 1.0,\r\n            showMessages: true,\r\n            defaultMaterialColor: '#199b9bff'\r\n        },\r\n        light: {\r\n            lightSceneId: '',\r\n            lightScenes: {},\r\n        },\r\n        postprocessing: {\r\n            antiAliasingTechnique: \"smaa\",\r\n            antiAliasingTechniqueMobile: \"fxaa\",\r\n            enablePostProcessingOnMobile: true,\r\n            ssaaSampleLevel: 2,\r\n            effects: [\r\n                {\r\n                    properties: {\r\n                        resolutionScale: 1,\r\n                        spp: 8,\r\n                        distance: 1,\r\n                        distanceIntensity: 1,\r\n                        intensity: 2.5,\r\n                        color: '#000000',\r\n                        iterations: 1,\r\n                        radius: 15,\r\n                        rings: 4,\r\n                        lumaPhi: 10,\r\n                        depthPhi: 2,\r\n                        normalPhi: 3.25,\r\n                        samples: 16,\r\n                    },\r\n                    type: \"ssao\"\r\n                }\r\n            ]\r\n        },\r\n        rendering: {\r\n            automaticColorAdjustment: true,\r\n            beautyRenderDelay: 50,\r\n            beautyRenderBlendingDuration: 1500,\r\n            lights: true,\r\n            outputEncoding: 'srgb',\r\n            physicallyCorrectLights: true,\r\n            shadows: true,\r\n            softShadows: true,\r\n            textureEncoding: 'srgb',\r\n            toneMapping: 'none',\r\n            toneMappingExposure: 1,\r\n        },\r\n        session: {},\r\n    };\r\n};\r\nexports.Defaults = Defaults;\r\n//# sourceMappingURL=Defaults.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.validate = void 0;\r\nconst Validator_1 = require(\"../v4_0/Validator\");\r\nObject.defineProperty(exports, \"validate\", { enumerable: true, get: function () { return Validator_1.validate; } });\r\n//# sourceMappingURL=Validator.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.convertToPrevious = exports.convertFromPrevious = void 0;\r\nconst Defaults_1 = require(\"../v4_1/Defaults\");\r\nconst Defaults_2 = require(\"./Defaults\");\r\nconst convertFromPrevious = (s, v) => {\r\n    const settings = Defaults_2.Defaults();\r\n    const oldSettings = s;\r\n    settings.ar = oldSettings.ar;\r\n    settings.build_date = oldSettings.build_date;\r\n    settings.build_version = oldSettings.build_version;\r\n    settings.general = oldSettings.general;\r\n    settings.light = oldSettings.light;\r\n    settings.session = oldSettings.session;\r\n    settings.environment = oldSettings.environment;\r\n    settings.environmentGeometry = oldSettings.environmentGeometry;\r\n    settings.rendering = oldSettings.rendering;\r\n    settings.postprocessing = oldSettings.postprocessing;\r\n    settings.camera.cameraId = oldSettings.camera.cameraId;\r\n    for (let key in oldSettings.camera.cameras) {\r\n        if (oldSettings.camera.cameras[key].type === \"perspective\") {\r\n            const perspectiveCamera = oldSettings.camera.cameras[key];\r\n            settings.camera.cameras[key] = {\r\n                autoAdjust: perspectiveCamera.autoAdjust,\r\n                cameraMovementDuration: perspectiveCamera.cameraMovementDuration,\r\n                controls: {\r\n                    autoRotationSpeed: perspectiveCamera.controls.autoRotationSpeed,\r\n                    damping: perspectiveCamera.controls.damping,\r\n                    enableAutoRotation: perspectiveCamera.controls.enableAutoRotation,\r\n                    enableKeyPan: perspectiveCamera.controls.enableKeyPan,\r\n                    enablePan: perspectiveCamera.controls.enablePan,\r\n                    enableRotation: perspectiveCamera.controls.enableRotation,\r\n                    enableZoom: perspectiveCamera.controls.enableZoom,\r\n                    input: perspectiveCamera.controls.input,\r\n                    keyPanSpeed: perspectiveCamera.controls.keyPanSpeed,\r\n                    movementSmoothness: perspectiveCamera.controls.movementSmoothness,\r\n                    restrictions: perspectiveCamera.controls.restrictions,\r\n                    rotationSpeed: perspectiveCamera.controls.rotationSpeed,\r\n                    panSpeed: perspectiveCamera.controls.panSpeed,\r\n                    zoomSpeed: perspectiveCamera.controls.zoomSpeed,\r\n                    enableAzimuthRotation: true,\r\n                    enableObjectControls: false,\r\n                    enablePolarRotation: true,\r\n                    enableTurntableControls: false,\r\n                    objectControlsCenter: { x: 0, y: 0, z: 0 },\r\n                    turntableCenter: { x: 0, y: 0, z: 0 },\r\n                },\r\n                enableCameraControls: perspectiveCamera.enableCameraControls,\r\n                fov: perspectiveCamera.fov,\r\n                name: perspectiveCamera.name,\r\n                position: perspectiveCamera.position,\r\n                revertAtMouseUp: perspectiveCamera.revertAtMouseUp,\r\n                revertAtMouseUpDuration: perspectiveCamera.revertAtMouseUpDuration,\r\n                sceneRotation: { x: 0, y: 0 },\r\n                target: perspectiveCamera.target,\r\n                type: perspectiveCamera.type,\r\n                zoomExtentsFactor: perspectiveCamera.zoomExtentsFactor\r\n            };\r\n        }\r\n        else {\r\n            const orthographicCamera = oldSettings.camera.cameras[key];\r\n            settings.camera.cameras[key] = {\r\n                autoAdjust: orthographicCamera.autoAdjust,\r\n                cameraMovementDuration: orthographicCamera.cameraMovementDuration,\r\n                controls: {\r\n                    damping: orthographicCamera.controls.damping,\r\n                    enableKeyPan: orthographicCamera.controls.enableKeyPan,\r\n                    enablePan: orthographicCamera.controls.enablePan,\r\n                    enableZoom: orthographicCamera.controls.enableZoom,\r\n                    input: orthographicCamera.controls.input,\r\n                    keyPanSpeed: orthographicCamera.controls.keyPanSpeed,\r\n                    movementSmoothness: orthographicCamera.controls.movementSmoothness,\r\n                    panSpeed: orthographicCamera.controls.panSpeed,\r\n                    zoomSpeed: orthographicCamera.controls.zoomSpeed,\r\n                    autoRotationSpeed: 0,\r\n                    enableAutoRotation: false,\r\n                    enableAzimuthRotation: true,\r\n                    enableObjectControls: false,\r\n                    enablePolarRotation: true,\r\n                    enableRotation: true,\r\n                    enableTurntableControls: false,\r\n                    objectControlsCenter: { x: 0, y: 0, z: 0 },\r\n                    restrictions: {\r\n                        position: {\r\n                            cube: { min: { x: -Infinity, y: -Infinity, z: -Infinity }, max: { x: Infinity, y: Infinity, z: Infinity } },\r\n                            sphere: { center: { x: 0, y: 0, z: 0 }, radius: Infinity },\r\n                        },\r\n                        rotation: { minPolarAngle: 0, maxPolarAngle: 180, minAzimuthAngle: -Infinity, maxAzimuthAngle: Infinity },\r\n                        target: {\r\n                            cube: { min: { x: -Infinity, y: -Infinity, z: -Infinity }, max: { x: Infinity, y: Infinity, z: Infinity } },\r\n                            sphere: { center: { x: 0, y: 0, z: 0 }, radius: Infinity },\r\n                        },\r\n                        zoom: { minDistance: 0, maxDistance: Infinity },\r\n                    },\r\n                    rotationSpeed: 0,\r\n                    turntableCenter: { x: 0, y: 0, z: 0 },\r\n                },\r\n                enableCameraControls: orthographicCamera.enableCameraControls,\r\n                fov: orthographicCamera.fov,\r\n                name: orthographicCamera.name,\r\n                position: orthographicCamera.position,\r\n                revertAtMouseUp: orthographicCamera.revertAtMouseUp,\r\n                revertAtMouseUpDuration: orthographicCamera.revertAtMouseUpDuration,\r\n                sceneRotation: { x: 0, y: 0 },\r\n                target: orthographicCamera.target,\r\n                type: orthographicCamera.type,\r\n                zoomExtentsFactor: orthographicCamera.zoomExtentsFactor\r\n            };\r\n        }\r\n    }\r\n    return settings;\r\n};\r\nexports.convertFromPrevious = convertFromPrevious;\r\nconst convertToPrevious = (s, v) => {\r\n    const settings = Defaults_1.Defaults();\r\n    const newSettings = s;\r\n    settings.ar = newSettings.ar;\r\n    settings.build_date = newSettings.build_date;\r\n    settings.build_version = newSettings.build_version;\r\n    settings.general = newSettings.general;\r\n    settings.light = newSettings.light;\r\n    settings.rendering = newSettings.rendering;\r\n    settings.session = newSettings.session;\r\n    settings.environment = newSettings.environment;\r\n    settings.environmentGeometry = newSettings.environmentGeometry;\r\n    settings.postprocessing = newSettings.postprocessing;\r\n    settings.camera.cameraId = newSettings.camera.cameraId;\r\n    for (let key in newSettings.camera.cameras) {\r\n        if (newSettings.camera.cameras[key].type === \"perspective\") {\r\n            const perspectiveCamera = newSettings.camera.cameras[key];\r\n            settings.camera.cameras[key] = {\r\n                autoAdjust: perspectiveCamera.autoAdjust,\r\n                cameraMovementDuration: perspectiveCamera.cameraMovementDuration,\r\n                controls: {\r\n                    autoRotationSpeed: perspectiveCamera.controls.autoRotationSpeed,\r\n                    damping: perspectiveCamera.controls.damping,\r\n                    enableAutoRotation: perspectiveCamera.controls.enableAutoRotation,\r\n                    enableKeyPan: perspectiveCamera.controls.enableKeyPan,\r\n                    enablePan: perspectiveCamera.controls.enablePan,\r\n                    enableRotation: perspectiveCamera.controls.enableRotation,\r\n                    enableZoom: perspectiveCamera.controls.enableZoom,\r\n                    input: perspectiveCamera.controls.input,\r\n                    keyPanSpeed: perspectiveCamera.controls.keyPanSpeed,\r\n                    movementSmoothness: perspectiveCamera.controls.movementSmoothness,\r\n                    restrictions: perspectiveCamera.controls.restrictions,\r\n                    rotationSpeed: perspectiveCamera.controls.rotationSpeed,\r\n                    panSpeed: perspectiveCamera.controls.panSpeed,\r\n                    zoomSpeed: perspectiveCamera.controls.zoomSpeed,\r\n                },\r\n                enableCameraControls: perspectiveCamera.enableCameraControls,\r\n                fov: perspectiveCamera.fov,\r\n                name: perspectiveCamera.name,\r\n                position: perspectiveCamera.position,\r\n                revertAtMouseUp: perspectiveCamera.revertAtMouseUp,\r\n                revertAtMouseUpDuration: perspectiveCamera.revertAtMouseUpDuration,\r\n                target: perspectiveCamera.target,\r\n                type: perspectiveCamera.type,\r\n                zoomExtentsFactor: perspectiveCamera.zoomExtentsFactor\r\n            };\r\n        }\r\n        else {\r\n            const orthographicCamera = newSettings.camera.cameras[key];\r\n            if (orthographicCamera.type === \"custom\")\r\n                continue;\r\n            settings.camera.cameras[key] = {\r\n                autoAdjust: orthographicCamera.autoAdjust,\r\n                cameraMovementDuration: orthographicCamera.cameraMovementDuration,\r\n                controls: {\r\n                    damping: orthographicCamera.controls.damping,\r\n                    enableKeyPan: orthographicCamera.controls.enableKeyPan,\r\n                    enablePan: orthographicCamera.controls.enablePan,\r\n                    enableZoom: orthographicCamera.controls.enableZoom,\r\n                    input: orthographicCamera.controls.input,\r\n                    keyPanSpeed: orthographicCamera.controls.keyPanSpeed,\r\n                    movementSmoothness: orthographicCamera.controls.movementSmoothness,\r\n                    panSpeed: orthographicCamera.controls.panSpeed,\r\n                    zoomSpeed: orthographicCamera.controls.zoomSpeed,\r\n                },\r\n                enableCameraControls: orthographicCamera.enableCameraControls,\r\n                fov: orthographicCamera.fov,\r\n                name: orthographicCamera.name,\r\n                position: orthographicCamera.position,\r\n                revertAtMouseUp: orthographicCamera.revertAtMouseUp,\r\n                revertAtMouseUpDuration: orthographicCamera.revertAtMouseUpDuration,\r\n                target: orthographicCamera.target,\r\n                type: orthographicCamera.type,\r\n                zoomExtentsFactor: orthographicCamera.zoomExtentsFactor\r\n            };\r\n        }\r\n    }\r\n    return settings;\r\n};\r\nexports.convertToPrevious = convertToPrevious;\r\n//# sourceMappingURL=Converter.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Defaults = void 0;\r\nconst Defaults = () => {\r\n    return {\r\n        build_date: '',\r\n        build_version: '',\r\n        settings_version: '4.1',\r\n        ar: {\r\n            enable: true,\r\n            autoScaling: true\r\n        },\r\n        camera: {\r\n            cameraId: '',\r\n            cameras: {},\r\n        },\r\n        environment: {\r\n            clearAlpha: 1.0,\r\n            clearColor: '#ffffff',\r\n            map: 'photo_studio',\r\n            mapAsBackground: false,\r\n            mapResolution: '1024',\r\n            rotation: { x: 0, y: 0, z: 0, w: 1 },\r\n            intensity: 1,\r\n            blurriness: 0\r\n        },\r\n        environmentGeometry: {\r\n            gridColor: '#44444426',\r\n            gridVisibility: false,\r\n            groundPlaneColor: '#636363ff',\r\n            groundPlaneVisibility: true,\r\n            groundPlaneShadowColor: '#d3d3d3ff',\r\n            groundPlaneShadowVisibility: false,\r\n        },\r\n        general: {\r\n            transformation: {\r\n                scale: { x: 1, y: 1, z: 1 },\r\n                translation: { x: 0, y: 0, z: 0 },\r\n                rotation: { x: 0, y: 0, z: 0 }\r\n            },\r\n            blurWhenBusy: true,\r\n            commitSettings: false,\r\n            commitParameters: false,\r\n            pointSize: 1.0,\r\n            showMessages: true,\r\n            defaultMaterialColor: '#199b9bff'\r\n        },\r\n        light: {\r\n            lightSceneId: '',\r\n            lightScenes: {},\r\n        },\r\n        postprocessing: {\r\n            antiAliasingTechnique: \"smaa\",\r\n            antiAliasingTechniqueMobile: \"fxaa\",\r\n            enablePostProcessingOnMobile: true,\r\n            ssaaSampleLevel: 2,\r\n            effects: [\r\n                {\r\n                    properties: {\r\n                        resolutionScale: 1,\r\n                        spp: 8,\r\n                        distance: 1,\r\n                        distanceIntensity: 1,\r\n                        intensity: 2.5,\r\n                        color: '#000000',\r\n                        iterations: 1,\r\n                        radius: 15,\r\n                        rings: 4,\r\n                        lumaPhi: 10,\r\n                        depthPhi: 2,\r\n                        normalPhi: 3.25,\r\n                        samples: 16,\r\n                    },\r\n                    type: \"ssao\"\r\n                }\r\n            ]\r\n        },\r\n        rendering: {\r\n            automaticColorAdjustment: true,\r\n            beautyRenderDelay: 50,\r\n            beautyRenderBlendingDuration: 1500,\r\n            lights: true,\r\n            outputEncoding: 'srgb',\r\n            physicallyCorrectLights: true,\r\n            shadows: true,\r\n            softShadows: true,\r\n            textureEncoding: 'srgb',\r\n            toneMapping: 'none',\r\n            toneMappingExposure: 1,\r\n        },\r\n        session: {},\r\n    };\r\n};\r\nexports.Defaults = Defaults;\r\n//# sourceMappingURL=Defaults.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.validate = void 0;\r\nconst zod_1 = require(\"zod\");\r\nconst cameraControlsSchema = zod_1.z.object({\r\n    autoRotationSpeed: zod_1.z.number(),\r\n    damping: zod_1.z.number(),\r\n    enableAutoRotation: zod_1.z.boolean(),\r\n    enableKeyPan: zod_1.z.boolean(),\r\n    enablePan: zod_1.z.boolean(),\r\n    enableRotation: zod_1.z.boolean(),\r\n    enableZoom: zod_1.z.boolean(),\r\n    input: zod_1.z.object({ keys: zod_1.z.object({ up: zod_1.z.number(), down: zod_1.z.number(), left: zod_1.z.number(), right: zod_1.z.number() }), mouse: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), touch: zod_1.z.object({ rotate: zod_1.z.number(), zoom: zod_1.z.number(), pan: zod_1.z.number() }), }),\r\n    keyPanSpeed: zod_1.z.number(),\r\n    movementSmoothness: zod_1.z.number(),\r\n    restrictions: zod_1.z.object({\r\n        position: zod_1.z.object({\r\n            cube: zod_1.z.object({ min: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }), max: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }) }),\r\n            sphere: zod_1.z.object({ center: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }), radius: zod_1.z.number().nullable() }),\r\n        }),\r\n        target: zod_1.z.object({\r\n            cube: zod_1.z.object({ min: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }), max: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }) }),\r\n            sphere: zod_1.z.object({ center: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }), radius: zod_1.z.number().nullable() }),\r\n        }),\r\n        rotation: zod_1.z.object({ minPolarAngle: zod_1.z.number(), maxPolarAngle: zod_1.z.number(), minAzimuthAngle: zod_1.z.number().nullable(), maxAzimuthAngle: zod_1.z.number().nullable() }),\r\n        zoom: zod_1.z.object({ minDistance: zod_1.z.number(), maxDistance: zod_1.z.number().nullable() }),\r\n    }),\r\n    rotationSpeed: zod_1.z.number(),\r\n    panSpeed: zod_1.z.number(),\r\n    zoomSpeed: zod_1.z.number(),\r\n    enableAzimuthRotation: zod_1.z.boolean(),\r\n    enableObjectControls: zod_1.z.boolean(),\r\n    enablePolarRotation: zod_1.z.boolean(),\r\n    enableTurntableControls: zod_1.z.boolean(),\r\n    objectControlsCenter: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    turntableCenter: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() })\r\n});\r\nconst generalCameraSchema = zod_1.z.object({\r\n    name: zod_1.z.string().optional(),\r\n    type: zod_1.z.string(),\r\n    autoAdjust: zod_1.z.boolean(),\r\n    cameraMovementDuration: zod_1.z.number(),\r\n    controls: cameraControlsSchema,\r\n    enableCameraControls: zod_1.z.boolean(),\r\n    position: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    revertAtMouseUp: zod_1.z.boolean(),\r\n    revertAtMouseUpDuration: zod_1.z.number(),\r\n    target: zod_1.z.object({ x: zod_1.z.number().nullable(), y: zod_1.z.number().nullable(), z: zod_1.z.number().nullable() }),\r\n    zoomExtentsFactor: zod_1.z.number().positive(),\r\n    sceneRotation: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number() })\r\n});\r\nconst perspectiveCameraSchema = generalCameraSchema.extend({\r\n    fov: zod_1.z.number().positive()\r\n});\r\nconst cameraSchema = zod_1.z.record(zod_1.z.union([perspectiveCameraSchema, generalCameraSchema]));\r\nconst ambientLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number()\r\n});\r\nconst directionalLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    direction: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    castShadow: zod_1.z.boolean(),\r\n    shadowMapResolution: zod_1.z.number().optional(),\r\n    shadowMapBias: zod_1.z.number().optional()\r\n});\r\nconst hemisphereLightSchema = zod_1.z.object({\r\n    skyColor: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    groundColor: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n});\r\nconst pointLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    position: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    distance: zod_1.z.number(),\r\n    decay: zod_1.z.number(),\r\n});\r\nconst spotLightSchema = zod_1.z.object({\r\n    color: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]),\r\n    intensity: zod_1.z.number(),\r\n    position: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    target: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n    distance: zod_1.z.number(),\r\n    decay: zod_1.z.number(),\r\n    angle: zod_1.z.number(),\r\n    penumbra: zod_1.z.number(),\r\n});\r\nconst lightSchema = zod_1.z.record(zod_1.z.object({\r\n    name: zod_1.z.string().optional(),\r\n    lights: zod_1.z.record(zod_1.z.object({\r\n        name: zod_1.z.string().optional(),\r\n        type: zod_1.z.string(),\r\n        order: zod_1.z.number().optional(),\r\n        properties: zod_1.z.union([ambientLightSchema, directionalLightSchema, hemisphereLightSchema, pointLightSchema, spotLightSchema])\r\n    }))\r\n}));\r\nconst bloomEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        blendFunction: zod_1.z.number().optional(),\r\n        intensity: zod_1.z.number().optional(),\r\n        kernelSize: zod_1.z.number().optional(),\r\n        luminanceSmoothing: zod_1.z.number().optional(),\r\n        luminanceThreshold: zod_1.z.number().optional(),\r\n        mipmapBlur: zod_1.z.boolean(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst chromaticAberrationEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        blendFunction: zod_1.z.number().optional(),\r\n        modulationOffset: zod_1.z.number().optional(),\r\n        offset: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number() }).optional(),\r\n        radialModulation: zod_1.z.boolean().optional(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst depthOfFieldEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        blendFunction: zod_1.z.number().optional(),\r\n        bokehScale: zod_1.z.number().optional(),\r\n        focusDistance: zod_1.z.number().optional(),\r\n        focusRange: zod_1.z.number().optional(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst dotScreenEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        angle: zod_1.z.number().optional(),\r\n        blendFunction: zod_1.z.number().optional(),\r\n        scale: zod_1.z.number().optional(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst gridEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        blendFunction: zod_1.z.number().optional(),\r\n        scale: zod_1.z.number().optional(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst hbaoEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        resolutionScale: zod_1.z.number().optional(),\r\n        spp: zod_1.z.number().optional(),\r\n        distance: zod_1.z.number().optional(),\r\n        distanceIntensity: zod_1.z.number().optional(),\r\n        intensity: zod_1.z.number().optional(),\r\n        color: zod_1.z.string().optional(),\r\n        bias: zod_1.z.number().optional(),\r\n        thickness: zod_1.z.number().optional(),\r\n        iterations: zod_1.z.number().optional(),\r\n        radius: zod_1.z.number().optional(),\r\n        rings: zod_1.z.number().optional(),\r\n        lumaPhi: zod_1.z.number().optional(),\r\n        depthPhi: zod_1.z.number().optional(),\r\n        normalPhi: zod_1.z.number().optional(),\r\n        samples: zod_1.z.number().optional(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst hueSaturationEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        blendFunction: zod_1.z.number().optional(),\r\n        hue: zod_1.z.number().optional(),\r\n        saturation: zod_1.z.number().optional(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst noiseEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        blendFunction: zod_1.z.number().optional(),\r\n        premultiply: zod_1.z.boolean().optional(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst pixelationEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        blendFunction: zod_1.z.number().optional(),\r\n        granularity: zod_1.z.number().optional(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst scanlineEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        blendFunction: zod_1.z.number().optional(),\r\n        density: zod_1.z.number().optional(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst ssaoEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        resolutionScale: zod_1.z.number().optional(),\r\n        spp: zod_1.z.number().optional(),\r\n        distance: zod_1.z.number().optional(),\r\n        distanceIntensity: zod_1.z.number().optional(),\r\n        intensity: zod_1.z.number().optional(),\r\n        color: zod_1.z.string().optional(),\r\n        iterations: zod_1.z.number().optional(),\r\n        radius: zod_1.z.number().optional(),\r\n        rings: zod_1.z.number().optional(),\r\n        lumaPhi: zod_1.z.number().optional(),\r\n        depthPhi: zod_1.z.number().optional(),\r\n        normalPhi: zod_1.z.number().optional(),\r\n        samples: zod_1.z.number().optional(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst tiltShiftEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        blendFunction: zod_1.z.number().optional(),\r\n        feather: zod_1.z.number().optional(),\r\n        focusArea: zod_1.z.number().optional(),\r\n        kernelSize: zod_1.z.number().optional(),\r\n        offset: zod_1.z.number().optional(),\r\n        rotation: zod_1.z.number().optional(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst vignetteEffectSchema = zod_1.z.object({\r\n    properties: zod_1.z.object({\r\n        blendFunction: zod_1.z.number().optional(),\r\n        darkness: zod_1.z.number().optional(),\r\n        offset: zod_1.z.number().optional(),\r\n        technique: zod_1.z.number().optional(),\r\n    }).optional(),\r\n    type: zod_1.z.string()\r\n});\r\nconst postProcessingSchema = zod_1.z.array(zod_1.z.union([bloomEffectSchema, chromaticAberrationEffectSchema, depthOfFieldEffectSchema, dotScreenEffectSchema, gridEffectSchema, hbaoEffectSchema, hueSaturationEffectSchema, noiseEffectSchema, pixelationEffectSchema, scanlineEffectSchema, ssaoEffectSchema, tiltShiftEffectSchema, vignetteEffectSchema]));\r\nconst schema = zod_1.z.object({\r\n    build_date: zod_1.z.string().optional(),\r\n    build_version: zod_1.z.string().optional(),\r\n    settings_version: zod_1.z.string(),\r\n    ar: zod_1.z.object({\r\n        enable: zod_1.z.boolean(),\r\n        autoScaling: zod_1.z.boolean(),\r\n    }).optional(),\r\n    camera: zod_1.z.object({\r\n        cameraId: zod_1.z.string(),\r\n        cameras: cameraSchema\r\n    }),\r\n    environment: zod_1.z.object({\r\n        clearAlpha: zod_1.z.number(),\r\n        clearColor: zod_1.z.string(),\r\n        map: zod_1.z.union([zod_1.z.string(), zod_1.z.string().array()]),\r\n        mapAsBackground: zod_1.z.boolean(),\r\n        mapResolution: zod_1.z.string(),\r\n        rotation: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number(), w: zod_1.z.number() }),\r\n        blurriness: zod_1.z.number(),\r\n        intensity: zod_1.z.number(),\r\n    }),\r\n    environmentGeometry: zod_1.z.object({\r\n        gridColor: zod_1.z.string(),\r\n        gridVisibility: zod_1.z.boolean(),\r\n        groundPlaneColor: zod_1.z.string(),\r\n        groundPlaneVisibility: zod_1.z.boolean(),\r\n        groundPlaneShadowColor: zod_1.z.string(),\r\n        groundPlaneShadowVisibility: zod_1.z.boolean(),\r\n    }),\r\n    general: zod_1.z.object({\r\n        transformation: zod_1.z.object({\r\n            scale: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n            translation: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() }),\r\n            rotation: zod_1.z.object({ x: zod_1.z.number(), y: zod_1.z.number(), z: zod_1.z.number() })\r\n        }),\r\n        blurWhenBusy: zod_1.z.boolean(),\r\n        commitSettings: zod_1.z.boolean(),\r\n        commitParameters: zod_1.z.boolean(),\r\n        pointSize: zod_1.z.number(),\r\n        showMessages: zod_1.z.boolean(),\r\n        defaultMaterialColor: zod_1.z.string(),\r\n    }),\r\n    light: zod_1.z.object({\r\n        lightSceneId: zod_1.z.string().optional(),\r\n        lightScenes: lightSchema,\r\n    }),\r\n    postprocessing: zod_1.z.object({\r\n        antiAliasingTechnique: zod_1.z.string(),\r\n        antiAliasingTechniqueMobile: zod_1.z.string(),\r\n        enablePostProcessingOnMobile: zod_1.z.boolean(),\r\n        ssaaSampleLevel: zod_1.z.number(),\r\n        effects: postProcessingSchema\r\n    }),\r\n    rendering: zod_1.z.object({\r\n        automaticColorAdjustment: zod_1.z.boolean(),\r\n        beautyRenderDelay: zod_1.z.number(),\r\n        beautyRenderBlendingDuration: zod_1.z.number(),\r\n        lights: zod_1.z.boolean(),\r\n        outputEncoding: zod_1.z.string(),\r\n        physicallyCorrectLights: zod_1.z.boolean(),\r\n        shadows: zod_1.z.boolean(),\r\n        softShadows: zod_1.z.boolean(),\r\n        textureEncoding: zod_1.z.string(),\r\n        toneMapping: zod_1.z.string(),\r\n        toneMappingExposure: zod_1.z.number(),\r\n    }),\r\n    session: zod_1.z.record(zod_1.z.object({\r\n        order: zod_1.z.number().optional(),\r\n        displayname: zod_1.z.string().optional(),\r\n        hidden: zod_1.z.boolean().optional()\r\n    })),\r\n}).strict();\r\nconst validate = (s) => {\r\n    const result = schema.parse(s);\r\n    s = result;\r\n};\r\nexports.validate = validate;\r\n//# sourceMappingURL=Validator.js.map"],"names":[],"sourceRoot":""}